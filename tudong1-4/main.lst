CCS PCH C Compiler, Version 5.015, 41519               01-Apr-14 22:04

               Filename:   F:\Robocon 2014\Lap trinh design\LAP TRINH ROBOT TU DONG\tudong1-4\main.lst

               ROM used:   1122 bytes (7%)
                           Largest free fragment is 15258
               RAM used:   24 (3%) at main() level
                           44 (6%) worst case
               Stack used: 7 locations (6 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   0410
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.3
004A:  GOTO   0054
004E:  BTFSC  F9E.3
0050:  GOTO   0096
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... #include <18f4431.h> 
.................... //////////// Standard Header file for the PIC18F4431 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4431 
*
00AA:  DATA 0C,78
00AC:  DATA 75,6E
00AE:  DATA 67,20
00B0:  DATA 25,35
00B2:  DATA 6C,64
00B4:  DATA 00,00
*
02FC:  TBLRD*+
02FE:  MOVFF  FF6,19
0302:  MOVFF  FF7,1A
0306:  MOVFF  FF5,21
030A:  RCALL  02AC
030C:  MOVFF  19,FF6
0310:  MOVFF  1A,FF7
0314:  DECFSZ 18,F
0316:  BRA    02FC
0318:  GOTO   044E (RETURN)
031C:  MOVFF  FEA,20
0320:  MOVFF  FE9,1F
0324:  BTFSS  19.7
0326:  BRA    0338
0328:  BSF    1F.7
032A:  BTFSS  1F.4
032C:  INCF   1F,F
032E:  COMF   18,F
0330:  COMF   19,F
0332:  INCF   18,F
0334:  BTFSC  FD8.2
0336:  INCF   19,F
0338:  SWAPF  19,W
033A:  IORLW  F0
033C:  MOVWF  1B
033E:  ADDWF  1B,F
0340:  ADDLW  E2
0342:  MOVWF  1C
0344:  ADDLW  32
0346:  MOVWF  1E
0348:  MOVF   19,W
034A:  ANDLW  0F
034C:  ADDWF  1C,F
034E:  ADDWF  1C,F
0350:  ADDWF  1E,F
0352:  ADDLW  E9
0354:  MOVWF  1D
0356:  ADDWF  1D,F
0358:  ADDWF  1D,F
035A:  SWAPF  18,W
035C:  ANDLW  0F
035E:  ADDWF  1D,F
0360:  ADDWF  1E,F
0362:  RLCF   1D,F
0364:  RLCF   1E,F
0366:  COMF   1E,F
0368:  RLCF   1E,F
036A:  MOVF   18,W
036C:  ANDLW  0F
036E:  ADDWF  1E,F
0370:  RLCF   1B,F
0372:  MOVLW  07
0374:  MOVWF  1A
0376:  MOVLW  0A
0378:  DECF   1D,F
037A:  ADDWF  1E,F
037C:  BNC   0378
037E:  DECF   1C,F
0380:  ADDWF  1D,F
0382:  BNC   037E
0384:  DECF   1B,F
0386:  ADDWF  1C,F
0388:  BNC   0384
038A:  DECF   1A,F
038C:  ADDWF  1B,F
038E:  BNC   038A
0390:  CLRF   FEA
0392:  MOVLW  1A
0394:  MOVWF  FE9
0396:  MOVLW  07
0398:  ANDWF  1F,W
039A:  BCF    1F.6
039C:  MOVF   FED,F
039E:  ANDWF  1F,W
03A0:  BNZ   03B0
03A2:  BTFSC  1F.4
03A4:  MOVF   FEE,F
03A6:  BTFSC  1F.4
03A8:  BRA    03B0
03AA:  MOVLW  20
03AC:  MOVWF  00
03AE:  BRA    03F0
03B0:  ADDWF  FE9,F
03B2:  MOVLW  00
03B4:  ADDWFC FEA,F
03B6:  MOVF   FE9,W
03B8:  SUBLW  1E
03BA:  BNZ   03C2
03BC:  MOVF   FEA,F
03BE:  BNZ   03C2
03C0:  BSF    1F.6
03C2:  MOVF   FEF,W
03C4:  MOVWF  00
03C6:  BNZ   03D8
03C8:  BTFSC  1F.6
03CA:  BRA    03D8
03CC:  BTFSC  1F.4
03CE:  BRA    0406
03D0:  BTFSC  1F.3
03D2:  BRA    03D8
03D4:  MOVLW  20
03D6:  BRA    03EE
03D8:  BTFSS  1F.7
03DA:  BRA    03E8
03DC:  MOVLW  2D
03DE:  MOVWF  00
03E0:  MOVF   FED,W
03E2:  BCF    1F.6
03E4:  BCF    1F.7
03E6:  BRA    03F0
03E8:  BSF    1F.3
03EA:  BCF    1F.4
03EC:  MOVLW  30
03EE:  ADDWF  00,F
03F0:  MOVFF  FEA,19
03F4:  MOVFF  FE9,18
03F8:  MOVFF  00,21
03FC:  RCALL  02AC
03FE:  MOVFF  19,FEA
0402:  MOVFF  18,FE9
0406:  MOVF   FEE,W
0408:  BTFSS  1F.6
040A:  BRA    03B6
040C:  GOTO   045C (RETURN)
....................  
.................... #list 
....................  
.................... #include <PIC18F4431_registers.h> 
.................... #byte TOSU = 0xFFF 
.................... #word TOS = 0xFFE 
.................... #byte STKPTR = 0xFFC 
.................... #bit    STKPTR0 = STKPTR.0 
.................... #bit    STKPTR1 = STKPTR.1 
.................... #bit    STKPTR2 = STKPTR.2 
.................... #bit    STKPTR3 = STKPTR.3 
.................... #bit    STKPTR4 = STKPTR.4 
.................... #bit    STKUNF = STKPTR.6 
.................... #bit    STKFUL = STKPTR.7 
.................... #byte PCLATU = 0xFFB 
.................... #byte PCLATH = 0xFFA 
.................... #byte PCL = 0xFF9 
.................... #byte TBLPTRU = 0xFF8 
.................... #bit    TBLPTRU0 = TBLPTRU.0 
.................... #bit    TBLPTRU1 = TBLPTRU.1 
.................... #bit    TBLPTRU2 = TBLPTRU.2 
.................... #bit    TBLPTRU3 = TBLPTRU.3 
.................... #bit    TBLPTRU4 = TBLPTRU.4 
.................... #bit    ACSS = TBLPTRU.5 
.................... #word TBLPTR = 0xFF7 
.................... #byte TABLAT = 0xFF5 
.................... #word PROD = 0xFF4 
.................... #byte INTCON = 0xFF2 
.................... #bit    RBIF = INTCON.0 
.................... #bit    INT0IF = INTCON.1 
.................... #bit    TMR0IF = INTCON.2 
.................... #bit    RBIE = INTCON.3 
.................... #bit    INT0IE = INTCON.4 
.................... #bit    TMR0IE = INTCON.5 
.................... #bit    PEIE_GIEL = INTCON.6 
.................... #bit    GIE_GIEH = INTCON.7 
.................... #byte INTCON2 = 0xFF1 
.................... #bit    RBIP = INTCON2.0 
.................... #bit    TMR0IP = INTCON2.2 
.................... #bit    INTEDG2 = INTCON2.4 
.................... #bit    INTEDG1 = INTCON2.5 
.................... #bit    INTEDG0 = INTCON2.6 
.................... #bit    RBPU = INTCON2.7 
.................... #byte INTCON3 = 0xFF0 
.................... #bit    INT1IF = INTCON3.0 
.................... #bit    INT2IF = INTCON3.1 
.................... #bit    INT1IE = INTCON3.3 
.................... #bit    INT2IE = INTCON3.4 
.................... #bit    INT1IP = INTCON3.6 
.................... #bit    INT2IP = INTCON3.7 
.................... #byte INDF0 = 0xFEF 
.................... #byte POSTINC0 = 0xFEE 
.................... #byte POSTDEC0 = 0xFED 
.................... #byte PREINC0 = 0xFEC 
.................... #byte PLUSW0 = 0xFEB 
.................... #word FSR0 = 0xFEA 
.................... #byte WREG = 0xFE8 
.................... #byte INDF1 = 0xFE7 
.................... #byte POSTINC1 = 0xFE6 
.................... #byte POSTDEC1 = 0xFE5 
.................... #byte PREINC1 = 0xFE4 
.................... #byte PLUSW1 = 0xFE3 
.................... #word FSR1 = 0xFE2 
.................... #byte BSR = 0xFE0 
.................... #byte INDF2 = 0xFDF 
.................... #byte POSTINC2 = 0xFDE 
.................... #byte POSTDEC2 = 0xFDD 
.................... #byte PREINC2 = 0xFDC 
.................... #byte PLUSW2 = 0xFDB 
.................... #word FSR2 = 0xFDA 
.................... #byte STATUS = 0xFD8 
.................... #bit    DC = STATUS.1 
.................... #bit    OV = STATUS.3 
.................... #word TMR0 = 0xFD7 
.................... #byte T0CON = 0xFD5 
.................... #bit    T0PS0 = T0CON.0 
.................... #bit    T0PS1 = T0CON.1 
.................... #bit    T0PS2 = T0CON.2 
.................... #bit    PSA = T0CON.3 
.................... #bit    T0SE = T0CON.4 
.................... #bit    T0CS = T0CON.5 
.................... #bit    T016BIT = T0CON.6 
.................... #bit    TMR0ON = T0CON.7 
.................... #byte OSCCON = 0xFD3 
.................... #bit    SCS0 = OSCCON.0 
.................... #bit    SCS1 = OSCCON.1 
.................... #bit    IOFS = OSCCON.2 
.................... #bit    OSTS = OSCCON.3 
.................... #bit    IRCF0 = OSCCON.4 
.................... #bit    IRCF1 = OSCCON.5 
.................... #bit    IRCF2 = OSCCON.6 
.................... #bit    IDLEN = OSCCON.7 
.................... #byte LVDCON = 0xFD2 
.................... #bit    LVDL0 = LVDCON.0 
.................... #bit    LVDL1 = LVDCON.1 
.................... #bit    LVDL2 = LVDCON.2 
.................... #bit    LVDL3 = LVDCON.3 
.................... #bit    LVDEN = LVDCON.4 
.................... #bit    IRVST = LVDCON.5 
.................... #byte WDTCON = 0xFD1 
.................... #bit    SWDTEN = WDTCON.0 
.................... #bit    WDTW = WDTCON.7 
.................... #byte RCON = 0xFD0 
.................... #bit    BOR = RCON.0 
.................... #bit    POR = RCON.1 
.................... #bit    PD = RCON.2 
.................... #bit    TO = RCON.3 
.................... #bit    RI = RCON.4 
.................... #bit    IPEN = RCON.7 
.................... #word TMR1 = 0xFCF 
.................... #byte T1CON = 0xFCD 
.................... #bit    TMR1ON = T1CON.0 
.................... #bit    TMR1CS = T1CON.1 
.................... #bit    T1SYNC = T1CON.2 
.................... #bit    T1OSCEN = T1CON.3 
.................... #bit    T1CKPS0 = T1CON.4 
.................... #bit    T1CKPS1 = T1CON.5 
.................... #bit    T1RUN = T1CON.6 
.................... #bit    RD16 = T1CON.7 
.................... #byte TMR2 = 0xFCC 
.................... #byte PR2 = 0xFCB 
.................... #byte T2CON = 0xFCA 
.................... #bit    T2CKPS0 = T2CON.0 
.................... #bit    T2CKPS1 = T2CON.1 
.................... #bit    TMR2ON = T2CON.2 
.................... #bit    TOUTPS0 = T2CON.3 
.................... #bit    TOUTPS1 = T2CON.4 
.................... #bit    TOUTPS2 = T2CON.5 
.................... #bit    TOUTPS3 = T2CON.6 
.................... #byte SSPBUF = 0xFC9 
.................... #byte SSPADD = 0xFC8 
.................... #byte SSPSTAT = 0xFC7 
.................... #bit    BF = SSPSTAT.0 
.................... #bit    UA = SSPSTAT.1 
.................... #bit    CKE = SSPSTAT.6 
.................... #bit    SMP = SSPSTAT.7 
.................... #byte SSPCON = 0xFC6 
.................... #bit    SSPM0 = SSPCON.0 
.................... #bit    SSPM1 = SSPCON.1 
.................... #bit    SSPM2 = SSPCON.2 
.................... #bit    SSPM3 = SSPCON.3 
.................... #bit    CKP = SSPCON.4 
.................... #bit    SSPEN = SSPCON.5 
.................... #bit    SSPOV = SSPCON.6 
.................... #bit    WCOL = SSPCON.7 
.................... #word ADRES = 0xFC4 
.................... #byte ADCON0 = 0xFC2 
.................... #bit    ADON = ADCON0.0 
.................... #bit    GO = ADCON0.1 
.................... #bit    ACMOD0 = ADCON0.2 
.................... #bit    ACMOD1 = ADCON0.3 
.................... #bit    ACSCH = ADCON0.4 
.................... #bit    ACONV = ADCON0.5 
.................... #byte ADCON1 = 0xFC1 
.................... #bit    ADPNT0 = ADCON1.0 
.................... #bit    ADPNT1 = ADCON1.1 
.................... #bit    BFOVFL = ADCON1.2 
.................... #bit    BFEMT = ADCON1.3 
.................... #bit    FIFOEN = ADCON1.4 
.................... #bit    VCFG0 = ADCON1.6 
.................... #bit    VCFG1 = ADCON1.7 
.................... #byte ADCON2 = 0xFC0 
.................... #bit    ADCS0 = ADCON2.0 
.................... #bit    ADCS1 = ADCON2.1 
.................... #bit    ADCS2 = ADCON2.2 
.................... #bit    ACQT0 = ADCON2.3 
.................... #bit    ACQT1 = ADCON2.4 
.................... #bit    ACQT2 = ADCON2.5 
.................... #bit    ACQT3 = ADCON2.6 
.................... #bit    ADFM = ADCON2.7 
.................... #word CCPR1 = 0xFBF 
.................... #byte CCP1CON = 0xFBD 
.................... #bit    CCP1M0 = CCP1CON.0 
.................... #bit    CCP1M1 = CCP1CON.1 
.................... #bit    CCP1M2 = CCP1CON.2 
.................... #bit    CCP1M3 = CCP1CON.3 
.................... #bit    DC1B0 = CCP1CON.4 
.................... #bit    DC1B1 = CCP1CON.5 
.................... #word CCPR2 = 0xFBC 
.................... #byte CCP2CON = 0xFBA 
.................... #bit    CCP2M0 = CCP2CON.0 
.................... #bit    CCP2M1 = CCP2CON.1 
.................... #bit    CCP2M2 = CCP2CON.2 
.................... #bit    CCP2M3 = CCP2CON.3 
.................... #bit    DC2B0 = CCP2CON.4 
.................... #bit    DC2B1 = CCP2CON.5 
.................... #byte ANSEL1 = 0xFB9 
.................... #bit    ANS8 = ANSEL1.0 
.................... #byte ANSEL0 = 0xFB8 
.................... #byte T5CON = 0xFB7 
.................... #bit    TMR5ON = T5CON.0 
.................... #bit    TMR5CS = T5CON.1 
.................... #bit    T5SYNC = T5CON.2 
.................... #bit    T5PS0 = T5CON.3 
.................... #bit    T5PS1 = T5CON.4 
.................... #bit    T5MOD = T5CON.5 
.................... #bit    RESEN = T5CON.6 
.................... #bit    T5SEN = T5CON.7 
.................... #byte QEICON = 0xFB6 
.................... #bit    PDEC0 = QEICON.0 
.................... #bit    PDEC1 = QEICON.1 
.................... #bit    QEIM0 = QEICON.2 
.................... #bit    QEIM1 = QEICON.3 
.................... #bit    QEIM2 = QEICON.4 
.................... #bit    UP = QEICON.5 
.................... #bit    ERROR = QEICON.6 
.................... #bit    VELM = QEICON.7 
.................... #byte SPBRGH = 0xFB0 
.................... #byte SPBRG = 0xFAF 
.................... #byte RCREG = 0xFAE 
.................... #byte TXREG = 0xFAD 
.................... #byte TXSTA = 0xFAC 
.................... #bit    TX9D = TXSTA.0 
.................... #bit    TRMT = TXSTA.1 
.................... #bit    BRGH = TXSTA.2 
.................... #bit    SENDB = TXSTA.3 
.................... #bit    SYNC = TXSTA.4 
.................... #bit    TXEN = TXSTA.5 
.................... #bit    TX9 = TXSTA.6 
.................... #bit    CSRC = TXSTA.7 
.................... #byte RCSTA = 0xFAB 
.................... #bit    RX9D = RCSTA.0 
.................... #bit    OERR = RCSTA.1 
.................... #bit    FERR = RCSTA.2 
.................... #bit    ADDEN = RCSTA.3 
.................... #bit    CREN = RCSTA.4 
.................... #bit    SREN = RCSTA.5 
.................... #bit    RX9 = RCSTA.6 
.................... #bit    SPEN = RCSTA.7 
.................... #byte BAUDCON = 0xFAA 
.................... #bit    ABDEN = BAUDCON.0 
.................... #bit    WUE = BAUDCON.1 
.................... #bit    BRG16 = BAUDCON.3 
.................... #bit    TXCKP = BAUDCON.4 
.................... #bit    RXDTP = BAUDCON.5 
.................... #bit    RCIDL = BAUDCON.6 
.................... #bit    ABDOVF = BAUDCON.7 
.................... #byte EEADR = 0xFA9 
.................... #byte EEDATA = 0xFA8 
.................... #byte EECON2 = 0xFA7 
.................... #byte EECON1 = 0xFA6 
.................... #bit    RD = EECON1.0 
.................... #bit    WR = EECON1.1 
.................... #bit    WREN = EECON1.2 
.................... #bit    WRERR = EECON1.3 
.................... #bit    FREE = EECON1.4 
.................... #bit    CFGS = EECON1.6 
.................... #bit    EEPGD = EECON1.7 
.................... #byte IPR3 = 0xFA5 
.................... #bit    TMR5IP = IPR3.0 
.................... #bit    IC1IP = IPR3.1 
.................... #bit    IC2QEIP = IPR3.2 
.................... #bit    IC3DRIP = IPR3.3 
.................... #bit    PTIP = IPR3.4 
.................... #byte PIR3 = 0xFA4 
.................... #bit    TMR5IF = PIR3.0 
.................... #bit    IC1IF = PIR3.1 
.................... #bit    IC2QEIF = PIR3.2 
.................... #bit    IC3DRIF = PIR3.3 
.................... #bit    PTIF = PIR3.4 
.................... #byte PIE3 = 0xFA3 
.................... #bit    TMR5IE = PIE3.0 
.................... #bit    IC1IE = PIE3.1 
.................... #bit    IC2QEIE = PIE3.2 
.................... #bit    IC3DRIE = PIE3.3 
.................... #bit    PTIE = PIE3.4 
.................... #byte IPR2 = 0xFA2 
.................... #bit    CCP2IP = IPR2.0 
.................... #bit    LVDIP = IPR2.2 
.................... #bit    EEIP = IPR2.4 
.................... #bit    OSFIP = IPR2.7 
.................... #byte PIR2 = 0xFA1 
.................... #bit    CCP2IF = PIR2.0 
.................... #bit    LVDIF = PIR2.2 
.................... #bit    EEIF = PIR2.4 
.................... #bit    OSFIF = PIR2.7 
.................... #byte PIE2 = 0xFA0 
.................... #bit    CCP2IE = PIE2.0 
.................... #bit    LVDIE = PIE2.2 
.................... #bit    EEIE = PIE2.4 
.................... #bit    OSFIE = PIE2.7 
.................... #byte IPR1 = 0xF9F 
.................... #bit    TMR1IP = IPR1.0 
.................... #bit    TMR2IP = IPR1.1 
.................... #bit    CCP1IP = IPR1.2 
.................... #bit    SSPIP = IPR1.3 
.................... #bit    TXIP = IPR1.4 
.................... #bit    RCIP = IPR1.5 
.................... #bit    ADIP = IPR1.6 
.................... #byte PIR1 = 0xF9E 
.................... #bit    TMR1IF = PIR1.0 
.................... #bit    TMR2IF = PIR1.1 
.................... #bit    CCP1IF = PIR1.2 
.................... #bit    SSPIF = PIR1.3 
.................... #bit    TXIF = PIR1.4 
.................... #bit    RCIF = PIR1.5 
.................... #bit    ADIF = PIR1.6 
.................... #byte PIE1 = 0xF9D 
.................... #bit    TMR1IE = PIE1.0 
.................... #bit    TMR2IE = PIE1.1 
.................... #bit    CCP1IE = PIE1.2 
.................... #bit    SSPIE = PIE1.3 
.................... #bit    TXIE = PIE1.4 
.................... #bit    RCIE = PIE1.5 
.................... #bit    ADIE = PIE1.6 
.................... #byte OSCTUNE = 0xF9B 
.................... #byte ADCON3 = 0xF9A 
.................... #bit    SSRC0 = ADCON3.0 
.................... #bit    SSRC1 = ADCON3.1 
.................... #bit    SSRC2 = ADCON3.2 
.................... #bit    SSRC3 = ADCON3.3 
.................... #bit    SSRC4 = ADCON3.4 
.................... #bit    ADRS0 = ADCON3.6 
.................... #bit    ADRS1 = ADCON3.7 
.................... #byte ADCHS = 0xF99 
.................... #bit    SASEL0 = ADCHS.0 
.................... #bit    SASEL1 = ADCHS.1 
.................... #bit    SCSEL0 = ADCHS.2 
.................... #bit    SCSEL1 = ADCHS.3 
.................... #bit    SBSEL0 = ADCHS.4 
.................... #bit    SBSEL1 = ADCHS.5 
.................... #bit    SDSEL0 = ADCHS.6 
.................... #bit    SDSEL1 = ADCHS.7 
.................... #byte TRISE = 0xF96 
.................... #byte TRISD = 0xF95 
.................... #byte TRISC = 0xF94 
.................... #byte TRISB = 0xF93 
.................... #byte TRISA = 0xF92 
.................... #word PR5 = 0xF91 
.................... #byte LATE = 0xF8D 
.................... #byte LATD = 0xF8C 
.................... #byte LATC = 0xF8B 
.................... #byte LATB = 0xF8A 
.................... #byte LATA = 0xF89 
.................... #word TMR5 = 0xF88 
.................... #byte PORTE = 0xF84 
.................... #byte PORTD = 0xF83 
.................... #byte PORTC = 0xF82 
.................... #byte PORTB = 0xF81 
.................... #byte PORTA = 0xF80 
.................... #byte PTCON0 = 0xF7F 
.................... #bit    PTMOD0 = PTCON0.0 
.................... #bit    PTMOD1 = PTCON0.1 
.................... #bit    PTCKPS0 = PTCON0.2 
.................... #bit    PTCKPS1 = PTCON0.3 
.................... #bit    PTOPS0 = PTCON0.4 
.................... #bit    PTOPS1 = PTCON0.5 
.................... #bit    PTOPS2 = PTCON0.6 
.................... #bit    PTOPS3 = PTCON0.7 
.................... #byte PTCON1 = 0xF7E 
.................... #bit    PTDIR = PTCON1.6 
.................... #bit    PTEN = PTCON1.7 
.................... #byte PTMRL = 0xF7D 
.................... #byte PTMRH = 0xF7C 
.................... #byte PTPERL = 0xF7B 
.................... #byte PTPERH = 0xF7A 
.................... #byte PDC0L = 0xF79 
.................... #byte PDC0H = 0xF78 
.................... #byte PDC1L = 0xF77 
.................... #byte PDC1H = 0xF76 
.................... #byte PDC2L = 0xF75 
.................... #byte PDC2H = 0xF74 
.................... #byte PDC3L = 0xF73 
.................... #byte PDC3H = 0xF72 
.................... #byte SEVTCMPL = 0xF71 
.................... #byte SEVTCMPH = 0xF70 
.................... #byte PWMCON0 = 0xF6F 
.................... #bit    PMOD0 = PWMCON0.0 
.................... #bit    PMOD1 = PWMCON0.1 
.................... #bit    PMOD2 = PWMCON0.2 
.................... #bit    PMOD3 = PWMCON0.3 
.................... #bit    PWMEN0 = PWMCON0.4 
.................... #bit    PWMEN1 = PWMCON0.5 
.................... #bit    PWMEN2 = PWMCON0.6 
.................... #byte PWMCON1 = 0xF6E 
.................... #bit    OSYNC = PWMCON1.0 
.................... #bit    UDIS = PWMCON1.1 
.................... #bit    SEVTDIR = PWMCON1.3 
.................... #bit    SEVOPS0 = PWMCON1.4 
.................... #bit    SEVOPS1 = PWMCON1.5 
.................... #bit    SEVOPS2 = PWMCON1.6 
.................... #bit    SEVOPS3 = PWMCON1.7 
.................... #byte DTCON = 0xF6D 
.................... #bit    DTA0 = DTCON.0 
.................... #bit    DTA1 = DTCON.1 
.................... #bit    DTA2 = DTCON.2 
.................... #bit    DTA3 = DTCON.3 
.................... #bit    DTA4 = DTCON.4 
.................... #bit    DTA5 = DTCON.5 
.................... #bit    DTAPS0 = DTCON.6 
.................... #bit    DTAPS1 = DTCON.7 
.................... #byte FLTCONFIG = 0xF6C 
.................... #bit    FLTAEN = FLTCONFIG.0 
.................... #bit    FLTAMOD = FLTCONFIG.1 
.................... #bit    FLTAS = FLTCONFIG.2 
.................... #bit    FLTCON = FLTCONFIG.3 
.................... #bit    FLTBEN = FLTCONFIG.4 
.................... #bit    FLTBMOD = FLTCONFIG.5 
.................... #bit    FLTBS = FLTCONFIG.6 
.................... #bit    BRFEN = FLTCONFIG.7 
.................... #byte OVDCOND = 0xF6B 
.................... #byte OVDCONS = 0xF6A 
.................... #word CAP1BUF = 0xF69 
.................... #word CAP2BUF = 0xF67 
.................... #word CAP3BUF = 0xF65 
.................... #byte CAP1CON = 0xF63 
.................... #bit    CAP1M0 = CAP1CON.0 
.................... #bit    CAP1M1 = CAP1CON.1 
.................... #bit    CAP1M2 = CAP1CON.2 
.................... #bit    CAP1M3 = CAP1CON.3 
.................... #bit    CAP1TMR = CAP1CON.5 
.................... #bit    CAP1REN = CAP1CON.6 
.................... #byte CAP2CON = 0xF62 
.................... #bit    CAP2M0 = CAP2CON.0 
.................... #bit    CAP2M1 = CAP2CON.1 
.................... #bit    CAP2M2 = CAP2CON.2 
.................... #bit    CAP2M3 = CAP2CON.3 
.................... #bit    CAP2TMR = CAP2CON.5 
.................... #bit    CAP2REN = CAP2CON.6 
.................... #byte CAP3CON = 0xF61 
.................... #bit    CAP3M0 = CAP3CON.0 
.................... #bit    CAP3M1 = CAP3CON.1 
.................... #bit    CAP3M2 = CAP3CON.2 
.................... #bit    CAP3M3 = CAP3CON.3 
.................... #bit    CAP3TMR = CAP3CON.5 
.................... #bit    CAP3REN = CAP3CON.6 
.................... #byte DFLTCON = 0xF60 
.................... #bit    FLTCK0 = DFLTCON.0 
.................... #bit    FLTCK1 = DFLTCON.1 
.................... #bit    FLTCK2 = DFLTCON.2 
.................... #bit    FLT1EN = DFLTCON.3 
.................... #bit    FLT2EN = DFLTCON.4 
.................... #bit    FLT3EN = DFLTCON.5 
.................... #bit    FLT4EN = DFLTCON.6 
....................  
.................... #fuses   hs,nolvp,nowdt,ssp_rd 
.................... #use     delay(clock=20000000) 
*
00B6:  CLRF   FEA
00B8:  MOVLW  22
00BA:  MOVWF  FE9
00BC:  MOVF   FEF,W
00BE:  BZ    00DA
00C0:  MOVLW  06
00C2:  MOVWF  01
00C4:  CLRF   00
00C6:  DECFSZ 00,F
00C8:  BRA    00C6
00CA:  DECFSZ 01,F
00CC:  BRA    00C4
00CE:  MOVLW  7B
00D0:  MOVWF  00
00D2:  DECFSZ 00,F
00D4:  BRA    00D2
00D6:  DECFSZ FEF,F
00D8:  BRA    00C0
00DA:  RETURN 0
.................... ///// CHUONG TRINH HIEN THI LCD 
.................... #define LCD_RS_PIN      PIN_D5                                  
.................... #define LCD_RW_PIN      PIN_D6     
.................... #define LCD_ENABLE_PIN  PIN_D7                                                               
.................... #define LCD_DATA4       PIN_B0                                  
.................... #define LCD_DATA5       PIN_B1                                   
.................... #define LCD_DATA6       PIN_B2                                    
.................... #define LCD_DATA7       PIN_B3 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0176:  BSF    F93.0
....................    output_float(LCD_DATA5); 
0178:  BSF    F93.1
....................    output_float(LCD_DATA6); 
017A:  BSF    F93.2
....................    output_float(LCD_DATA7); 
017C:  BSF    F93.3
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
017E:  BSF    F8C.6
0180:  BCF    F95.6
....................    delay_cycles(1); 
0182:  NOP   
....................    lcd_output_enable(1); 
0184:  BSF    F8C.7
0186:  BCF    F95.7
....................    delay_cycles(1); 
0188:  NOP   
....................    high = lcd_read_nibble(); 
018A:  RCALL  0124
018C:  MOVFF  01,29
....................        
....................    lcd_output_enable(0); 
0190:  BCF    F8C.7
0192:  BCF    F95.7
....................    delay_cycles(1); 
0194:  NOP   
....................    lcd_output_enable(1); 
0196:  BSF    F8C.7
0198:  BCF    F95.7
....................    delay_us(1); 
019A:  BRA    019C
019C:  BRA    019E
019E:  NOP   
....................    low = lcd_read_nibble(); 
01A0:  RCALL  0124
01A2:  MOVFF  01,28
....................        
....................    lcd_output_enable(0); 
01A6:  BCF    F8C.7
01A8:  BCF    F95.7
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
01AA:  BCF    F93.0
....................    output_drive(LCD_DATA5); 
01AC:  BCF    F93.1
....................    output_drive(LCD_DATA6); 
01AE:  BCF    F93.2
....................    output_drive(LCD_DATA7); 
01B0:  BCF    F93.3
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
01B2:  SWAPF  29,W
01B4:  MOVWF  00
01B6:  MOVLW  F0
01B8:  ANDWF  00,F
01BA:  MOVF   00,W
01BC:  IORWF  28,W
01BE:  MOVWF  01
01C0:  GOTO   01D0 (RETURN)
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0124:  CLRF   2A
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0126:  BSF    F93.0
0128:  MOVLW  00
012A:  BTFSC  F81.0
012C:  MOVLW  01
012E:  IORWF  2A,F
....................    n |= input(LCD_DATA5) << 1; 
0130:  BSF    F93.1
0132:  MOVLW  00
0134:  BTFSC  F81.1
0136:  MOVLW  01
0138:  MOVWF  00
013A:  BCF    FD8.0
013C:  RLCF   00,F
013E:  MOVF   00,W
0140:  IORWF  2A,F
....................    n |= input(LCD_DATA6) << 2; 
0142:  BSF    F93.2
0144:  MOVLW  00
0146:  BTFSC  F81.2
0148:  MOVLW  01
014A:  MOVWF  00
014C:  RLCF   00,F
014E:  RLCF   00,F
0150:  MOVLW  FC
0152:  ANDWF  00,F
0154:  MOVF   00,W
0156:  IORWF  2A,F
....................    n |= input(LCD_DATA7) << 3; 
0158:  BSF    F93.3
015A:  MOVLW  00
015C:  BTFSC  F81.3
015E:  MOVLW  01
0160:  MOVWF  00
0162:  RLCF   00,F
0164:  RLCF   00,F
0166:  RLCF   00,F
0168:  MOVLW  F8
016A:  ANDWF  00,F
016C:  MOVF   00,W
016E:  IORWF  2A,F
....................     
....................    return(n); 
0170:  MOVFF  2A,01
....................   #else 
0174:  RETURN 0
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
00DC:  BTFSC  29.0
00DE:  BRA    00E4
00E0:  BCF    F8A.0
00E2:  BRA    00E6
00E4:  BSF    F8A.0
00E6:  BCF    F93.0
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
00E8:  BTFSC  29.1
00EA:  BRA    00F0
00EC:  BCF    F8A.1
00EE:  BRA    00F2
00F0:  BSF    F8A.1
00F2:  BCF    F93.1
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
00F4:  BTFSC  29.2
00F6:  BRA    00FC
00F8:  BCF    F8A.2
00FA:  BRA    00FE
00FC:  BSF    F8A.2
00FE:  BCF    F93.2
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0100:  BTFSC  29.3
0102:  BRA    0108
0104:  BCF    F8A.3
0106:  BRA    010A
0108:  BSF    F8A.3
010A:  BCF    F93.3
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
010C:  NOP   
....................    lcd_output_enable(1); 
010E:  BSF    F8C.7
0110:  BCF    F95.7
....................    delay_us(2); 
0112:  MOVLW  02
0114:  MOVWF  00
0116:  DECFSZ 00,F
0118:  BRA    0116
011A:  BRA    011C
011C:  NOP   
....................    lcd_output_enable(0); 
011E:  BCF    F8C.7
0120:  BCF    F95.7
0122:  RETURN 0
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
01C4:  BCF    F95.7
....................    lcd_rs_tris(); 
01C6:  BCF    F95.5
....................    lcd_rw_tris(); 
01C8:  BCF    F95.6
....................   #endif 
....................  
....................    lcd_output_rs(0); 
01CA:  BCF    F8C.5
01CC:  BCF    F95.5
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
01CE:  BRA    0176
01D0:  MOVFF  01,28
01D4:  BTFSC  01.7
01D6:  BRA    01CE
....................    lcd_output_rs(address); 
01D8:  MOVF   26,F
01DA:  BNZ   01E0
01DC:  BCF    F8C.5
01DE:  BRA    01E2
01E0:  BSF    F8C.5
01E2:  BCF    F95.5
....................    delay_cycles(1); 
01E4:  NOP   
....................    lcd_output_rw(0); 
01E6:  BCF    F8C.6
01E8:  BCF    F95.6
....................    delay_cycles(1); 
01EA:  NOP   
....................    lcd_output_enable(0); 
01EC:  BCF    F8C.7
01EE:  BCF    F95.7
....................    lcd_send_nibble(n >> 4); 
01F0:  SWAPF  27,W
01F2:  MOVWF  28
01F4:  MOVLW  0F
01F6:  ANDWF  28,F
01F8:  MOVFF  28,29
01FC:  RCALL  00DC
....................    lcd_send_nibble(n & 0xf); 
01FE:  MOVF   27,W
0200:  ANDLW  0F
0202:  MOVWF  28
0204:  MOVWF  29
0206:  RCALL  00DC
0208:  RETURN 0
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
020A:  MOVLW  28
020C:  MOVWF  19
020E:  MOVLW  0C
0210:  MOVWF  1A
0212:  MOVLW  01
0214:  MOVWF  1B
0216:  MOVLW  06
0218:  MOVWF  1C
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
021A:  BCF    F8C.7
021C:  BCF    F95.7
....................    lcd_output_rs(0); 
021E:  BCF    F8C.5
0220:  BCF    F95.5
....................    lcd_output_rw(0); 
0222:  BCF    F8C.6
0224:  BCF    F95.6
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0226:  BCF    F93.0
....................    output_drive(LCD_DATA5); 
0228:  BCF    F93.1
....................    output_drive(LCD_DATA6); 
022A:  BCF    F93.2
....................    output_drive(LCD_DATA7); 
022C:  BCF    F93.3
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
022E:  BCF    F95.7
....................    lcd_rs_tris(); 
0230:  BCF    F95.5
....................    lcd_rw_tris(); 
0232:  BCF    F95.6
....................  #endif 
....................      
....................    delay_ms(15); 
0234:  MOVLW  0F
0236:  MOVWF  22
0238:  RCALL  00B6
....................    for(i=1;i<=3;++i) 
023A:  MOVLW  01
023C:  MOVWF  18
023E:  MOVF   18,W
0240:  SUBLW  03
0242:  BNC   0254
....................    { 
....................        lcd_send_nibble(3); 
0244:  MOVLW  03
0246:  MOVWF  29
0248:  RCALL  00DC
....................        delay_ms(5); 
024A:  MOVLW  05
024C:  MOVWF  22
024E:  RCALL  00B6
0250:  INCF   18,F
0252:  BRA    023E
....................    } 
....................     
....................    lcd_send_nibble(2); 
0254:  MOVLW  02
0256:  MOVWF  29
0258:  RCALL  00DC
....................    delay_ms(5); 
025A:  MOVLW  05
025C:  MOVWF  22
025E:  RCALL  00B6
....................    for(i=0;i<=3;++i) 
0260:  CLRF   18
0262:  MOVF   18,W
0264:  SUBLW  03
0266:  BNC   0286
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0268:  CLRF   03
026A:  MOVF   18,W
026C:  ADDLW  19
026E:  MOVWF  FE9
0270:  MOVLW  00
0272:  ADDWFC 03,W
0274:  MOVWF  FEA
0276:  MOVFF  FEF,1D
027A:  CLRF   26
027C:  MOVFF  1D,27
0280:  RCALL  01C4
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0282:  INCF   18,F
0284:  BRA    0262
0286:  GOTO   0426 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
028A:  DECFSZ 23,W
028C:  BRA    0290
028E:  BRA    0296
....................       address=LCD_LINE_TWO; 
0290:  MOVLW  40
0292:  MOVWF  24
0294:  BRA    0298
....................    else 
....................       address=0; 
0296:  CLRF   24
....................       
....................    address+=x-1; 
0298:  MOVLW  01
029A:  SUBWF  22,W
029C:  ADDWF  24,F
....................    lcd_send_byte(0,0x80|address); 
029E:  MOVF   24,W
02A0:  IORLW  80
02A2:  MOVWF  25
02A4:  CLRF   26
02A6:  MOVWF  27
02A8:  RCALL  01C4
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
02AA:  RETURN 0
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
02AC:  MOVF   21,W
02AE:  XORLW  07
02B0:  BZ    02C0
02B2:  XORLW  0B
02B4:  BZ    02CA
02B6:  XORLW  06
02B8:  BZ    02DA
02BA:  XORLW  02
02BC:  BZ    02E6
02BE:  BRA    02F0
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
02C0:  MOVLW  01
02C2:  MOVWF  22
02C4:  MOVWF  23
02C6:  RCALL  028A
02C8:  BRA    02FA
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
02CA:  CLRF   26
02CC:  MOVLW  01
02CE:  MOVWF  27
02D0:  RCALL  01C4
....................                      delay_ms(2); 
02D2:  MOVLW  02
02D4:  MOVWF  22
02D6:  RCALL  00B6
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
02D8:  BRA    02FA
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
02DA:  MOVLW  01
02DC:  MOVWF  22
02DE:  MOVLW  02
02E0:  MOVWF  23
02E2:  RCALL  028A
02E4:  BRA    02FA
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
02E6:  CLRF   26
02E8:  MOVLW  10
02EA:  MOVWF  27
02EC:  RCALL  01C4
02EE:  BRA    02FA
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
02F0:  MOVLW  01
02F2:  MOVWF  26
02F4:  MOVFF  21,27
02F8:  RCALL  01C4
....................      #endif 
....................    } 
02FA:  RETURN 0
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... ///// NGAT NHAN SPI 
.................... signed int16 spi_data=0; 
.................... #int_ssp 
.................... void nhan_dulieu(void)  
....................    { 
....................    spi_data=spi_read(); 
*
0096:  RRCF   FC7,W
0098:  BNC   0096
009A:  MOVF   FC9,W
009C:  CLRF   03
009E:  MOVWF  16
00A0:  MOVFF  03,17
00A4:  BCF    F9E.3
00A6:  GOTO   0054
....................    } 
....................  
.................... ///// CHUONG TRINH CHINH    
....................  
.................... void main(void)  
*
0410:  CLRF   FF8
0412:  BCF    FD0.7
0414:  BSF    07.7
0416:  CLRF   17
0418:  CLRF   16
041A:  BCF    FB9.0
041C:  BCF    FC1.6
041E:  BCF    FC1.7
0420:  MOVLW  00
0422:  MOVWF  FB8
.................... { 
....................    lcd_init();   
0424:  BRA    020A
....................    setup_spi(SPI_SLAVE |SPI_L_TO_H  ); 
0426:  BCF    FC6.5
0428:  BCF    F94.7
042A:  BSF    F94.4
042C:  BSF    F94.6
042E:  BSF    F94.5
0430:  MOVLW  24
0432:  MOVWF  FC6
0434:  MOVLW  00
0436:  MOVWF  FC7
....................    enable_interrupts(int_ssp); 
0438:  BSF    F9D.3
....................    clear_interrupt(int_ssp); 
043A:  BCF    F9E.3
....................    enable_interrupts(global); 
043C:  MOVLW  C0
043E:  IORWF  FF2,F
....................     
....................  
.................... while(true) 
....................    { 
....................    printf(LCD_PUTC,"\fxung %5ld",spi_data); 
0440:  MOVLW  AA
0442:  MOVWF  FF6
0444:  MOVLW  00
0446:  MOVWF  FF7
0448:  MOVLW  06
044A:  MOVWF  18
044C:  BRA    02FC
044E:  MOVLW  01
0450:  MOVWF  FE9
0452:  MOVFF  17,19
0456:  MOVFF  16,18
045A:  BRA    031C
....................    delay_ms(10); 
045C:  MOVLW  0A
045E:  MOVWF  22
0460:  RCALL  00B6
0462:  BRA    0440
....................    } 
....................     
.................... } 
0464:  SLEEP 

Configuration Fuses:
   Word  1: C200   HS FCMEN IESO
   Word  2: 3E0E   PUT BROWNOUT BORV20 NOWDT WDT32768 NOWINEN
   Word  3: 993C   NOPWMPIN LPOL_HIGH HPOL_HIGH T1LOWPOWER FLTAC1 SSP_RD PWM4B5 EXCLKC3 MCLR
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
