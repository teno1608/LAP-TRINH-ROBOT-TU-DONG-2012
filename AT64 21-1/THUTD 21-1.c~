/*****************************************************
Chip type               : ATmega64
Program type            : Application
AVR Core Clock frequency: 11.059200 MHz
Memory model            : Small
External RAM size       : 0
Data Stack size         : 1024
*****************************************************/
#include <mega64.h>
#include <delay.h>
// Alphanumeric LCD Module functions
#include <alcd.h>
void lcd_putnum (long int so,unsigned char x,unsigned char y)
{
   long int a, b, c, d, e;  
   lcd_gotoxy (x, y) ;
   if (so<0) {lcd_putsf("-"); so=-so; }
   a = so / 10000;
   b = (so - 10000 * a) / 1000;
   c = (so - 10000 * a - 1000 * b) / 100;
   d = (so - 10000 * a - 1000 * b - 100 * c) / 10;
   e = so - 10000 * a - 1000 * b - 100 * c - 10 * d;
   if(so>10000)  lcd_putchar (a + 48) ;
   if(so>1000) lcd_putchar (b + 48) ;
   if(so>100) lcd_putchar (c + 48) ;
   if(so>10) lcd_putchar (d + 48) ;
   lcd_putchar (e + 48) ;
}

// CHUONG TRINH DOC TAY GAME PS2
#define DATA PINB.3 // dây 1 màu nâu (chan DI)
#define CMD PORTB.2 // dây 2 màu cam (chan DO)
#define CLK PORTB.1 // dây 7 xanh da tr?i (chan CLK)
#define ATT PORTB.0 // dây 6 màu vàng (chan CS)
#define DDRDATA DDRB.3 
#define DDRCMD DDRB.2
#define DDRCLK DDRB.1 
#define DDRATT DDRB.0 
volatile unsigned char PES[6],analog;
volatile unsigned char L1,R1,L2,R2,L,R,start,select,up,down,left,right,nut3,nut2,nut4,nut1;
unsigned char access(unsigned char tbyte)
{
unsigned char rbyte=0;
unsigned int j;
CLK=1;
for(j=0;j<8;j++)
{
CMD=tbyte&0x01;
delay_us(100);
CLK=0;
delay_us(100);
rbyte=(rbyte>>1)|(DATA<<7);
CLK=1;
tbyte=tbyte>>1;
}
delay_us(100);
return rbyte;
CLK=1;
}
void DOCPS2(void)
{
DDRDATA=0;
DDRCMD=DDRCLK=DDRATT=1;
ATT=1;
PES[2]=PES[3]=PES[4]=PES[5]=128;
analog=128;
ATT=0;
access(0x01);
analog=access(0x42);
access(0);
PES[0]=access(0);
PES[1]=access(0);
if(analog==0x73||0x23||0X53)
{
PES[2]=access(0);
PES[3]=access(0);
PES[4]=access(0);
PES[5]=access(0);
}
if(analog==0x12)
{
PES[2]=access(0);
PES[3]=access(0);
}
ATT=1;
 
select = PES[0]&0x01;
L = (PES[0]&0x02)/2;
R = (PES[0]&0x04)/4;
start = (PES[0]&0x08)/8;
 
up = (PES[0]&0x10)/16;
right = (PES[0]&0x20)/32;
down = (PES[0]&0x40)/64;
left = (PES[0]&0x80)/128;
 
L2 = (PES[1]&0x01);
R2 = (PES[1]&0x02)/2;
L1 = (PES[1]&0x04)/4;
R1 = (PES[1]&0x08)/8;
 
nut1 = (PES[1]&0x10)/16;
nut2 = (PES[1]&0x20)/32;
nut3 = (PES[1]&0x40)/64;
nut4 = (PES[1]&0x80)/128;
}

// External Interrupt 0 service routine       
#define ddrkenha1 DDRD.0=0
#define ddrkenhb1 DDRD.1=0
#define kenhb1 PIND.1
volatile long int ENDATA1=0;
interrupt [EXT_INT0] void ext_int0_isr(void)
{
// Place your code here
if (kenhb1==1) {ENDATA1++;} else {ENDATA1--;}
}

// External Interrupt 2 service routine
#define ddrkenha2 DDRD.2=0
#define ddrkenhb2 DDRD.3=0
#define kenhb2 PIND.3
volatile long int ENDATA2=0;
interrupt [EXT_INT2] void ext_int2_isr(void)
{
// Place your code here
if (kenhb2==1) {ENDATA2++;} else {ENDATA2--;}
}

// CHUONG TRINH DIEU KHIEN DONG CO 1
#define DDRBRA1 DDRE.6
#define DDRDIR1 DDRB.4
#define DDRPWMDC1 DDRB.5
#define BRA1 PORTE.6
#define DIR1 PORTB.4
#define PWMDC1 OCR1A
void DC1THUAN(long int xung)
{
DDRBRA1=1;
DDRDIR1=1;
DDRPWMDC1=1;
BRA1=0;
DIR1=0;
PWMDC1=xung;
}
void DC1NGUOC(long int xung)
{
DDRBRA1=1;
DDRDIR1=1;
DDRPWMDC1=1;
BRA1=0;
DIR1=1;
PWMDC1=xung;
}
void RESDC1()
{
DDRBRA1=1;
DDRDIR1=1;
DDRPWMDC1=1;
BRA1=1;
DIR1=0;
PWMDC1=0;
}

// CHUONG TRINH DIEU KHIEN DONG CO 2
#define DDRBRA2 DDRE.7
#define DDRDIR2 DDRB.7
#define DDRPWMDC2 DDRB.6
#define BRA2 PORTE.7
#define DIR2 PORTB.7
#define PWMDC2 OCR1B
void DC2THUAN(long int xung)
{
DDRBRA2=1;
DDRDIR2=1;
DDRPWMDC2=1;
BRA2=0;
DIR2=0;
PWMDC2=xung;
}
void DC2NGUOC(long int xung)
{
DDRBRA2=1;
DDRDIR2=1;
DDRPWMDC2=1;
BRA2=0;
DIR2=1;
PWMDC2=xung;
}
void RESDC2()
{
DDRBRA2=1;
DDRDIR2=1;
DDRPWMDC2=1;
BRA2=1;
DIR2=0;
PWMDC2=0;
}

//PID DONG CO 1 //////////////////
volatile long int ERR1=0, REALVT1=0;
void PIDDC1(volatile long int SETVT1)
     {
     REALVT1=ENDATA1;
     if (REALVT1 < SETVT1) 
          {
          ERR1=SETVT1-REALVT1; 
          if (ERR1>600) {DC1THUAN(600);} else {DC1THUAN(2*ERR1+200);}
          }
     if (REALVT1 > SETVT1) 
          {
          ERR1=REALVT1-SETVT1; 
          if (ERR1>600) {DC1NGUOC(600);} else {DC1NGUOC(2*ERR1+200);}
          }
     if (REALVT1 == SETVT1) { RESDC1();}
     }
    
//PID DONG CO 2
volatile long int ERR2=0, REALVT2=0;
void PIDDC2(volatile long int SETVT2)
     {
     REALVT2=ENDATA2;
     if (REALVT2 < SETVT2) 
          {
          ERR2=SETVT2-REALVT2; 
          if (ERR2>600) {DC2THUAN(600);} else {DC2THUAN(2*ERR2+200);}
          }
     if (REALVT2 > SETVT2) 
          {
          ERR2=REALVT2-SETVT2; 
          if (ERR1>600) {DC2NGUOC(600);} else {DC2NGUOC(2*ERR2+200);}
          }
     if (REALVT2 == SETVT2) { RESDC2();}
     }

// NGAT TIMER0 DE PID
volatile long int SETVT1=0, SETVT2=0;
interrupt [TIM0_COMP] void timer0_comp_isr(void)
{
#asm("cli");
PIDDC1(SETVT1);
PIDDC2(SETVT2);
#asm("sei");
}

// CHUONG TRINH BEEP LOA
void BEEP()
     {
     DDRC.7=1;
     PORTC.7=0;
     delay_ms(30);
     PORTC.7=1;
     delay_ms(70);
     }

// CHUONG TRINH CHINH
char i;
#define DDRVAN_T1 DDRA.0
#define VAN_T1 PORTA.0                      
#define DDRVAN_T2 DDRA.1
#define VAN_T2 PORTA.1

#define DDRVAN_G1 DDRA.2
#define VAN_G1 PORTA.2
#define DDRVAN_G2 DDRA.3
#define VAN_G2 PORTA.3

#define DDRVAN_L DDRA.4
#define VAN_L PORTA.4
#define DDRVAN_D DDRA.5
#define VAN_D PORTA.5

#define DDRCTHT1 DDRD.5
#define CTHT1 PIND.5
#define DDRCTHT2 DDRD.7
#define CTHT2 PIND.7
#define DDRTAY1 DDRD.4
#define TAY1 PIND.4
#define DDRTAY2 DDRD.6
#define TAY2 PIND.6

void main(void)
{
DDRA=0xff;
PORTA=0xff;
DDRC=0xff;
PORTC=0xff;
DDRD=0x00;
PORTD=0xff;
// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: 43.200 kHz   0.023 MS
// Mode: Normal top=0xFF
// OC0 output: Disconnected
ASSR=0x00;
TCCR0=0x06;
TCNT0=0x00;
OCR0=0x64;

// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: 11059.200 kHz
// Mode: Fast PWM top=ICR1
// OC1A output: Non-Inv.
// OC1B output: Non-Inv.
// OC1C output: Discon.
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
// Compare C Match Interrupt: Off
TCCR1A=0xA2;
TCCR1B=0x19;
TCNT1H=0x00;
TCNT1L=0x00;
ICR1H=0x03;
ICR1L=0xe8;
OCR1AH=0x00;
OCR1AL=0x00;
OCR1BH=0x00;
OCR1BL=0x00;
OCR1CH=0x00;
OCR1CL=0x00;

// Timer/Counter 2 initialization
// Clock source: System Clock
// Clock value: Timer2 Stopped
// Mode: Normal top=0xFF
// OC2 output: Disconnected
TCCR2=0x00;
TCNT2=0x00;
OCR2=0x00;

// Timer/Counter 3 initialization
// Clock source: System Clock
// Clock value: Timer3 Stopped
// Mode: Normal top=0xFFFF
// OC3A output: Discon.
// OC3B output: Discon.
// OC3C output: Discon.
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer3 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
// Compare C Match Interrupt: Off
TCCR3A=0x00;
TCCR3B=0x00;
TCNT3H=0x00;
TCNT3L=0x00;
ICR3H=0x00;
ICR3L=0x00;
OCR3AH=0x00;
OCR3AL=0x00;
OCR3BH=0x00;
OCR3BL=0x00;
OCR3CH=0x00;
OCR3CL=0x00;

// External Interrupt(s) initialization
// INT0: On
// INT0 Mode: Falling Edge
// INT1: Off
// INT2: On
// INT2 Mode: Falling Edge
// INT3: Off
// INT4: Off
// INT5: Off
// INT6: Off
// INT7: Off
EICRA=0x22;
EICRB=0x00;
EIMSK=0x05;
EIFR=0x05;

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=0x00;
ETIMSK=0x00;

// Timer(s)/Counter(s) Interrupt(s) initialization
//TIMSK=0x02; //////////CHO PHEP NGAT TIMER0 COMPARE MATH
//ETIMSK=0x00;

// USART0 initialization
// USART0 disabled
UCSR0B=0x00;

// USART1 initialization
// USART1 disabled
UCSR1B=0x00;

// Analog Comparator initialization
// Analog Comparator: Off
// Analog Comparator Input Capture by Timer/Counter 1: Off
ACSR=0x80;
SFIOR=0x00;

// ADC initialization
// ADC disabled
ADCSRA=0x00;

// SPI initialization
// SPI disabled
SPCR=0x00;

// TWI initialization
// TWI disabled
TWCR=0x00;

// Alphanumeric LCD initialization
// Connections specified in the
// Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
// RS - PORTC Bit 0
// RD - PORTC Bit 1
// EN - PORTC Bit 2
// D4 - PORTC Bit 3
// D5 - PORTC Bit 4
// D6 - PORTC Bit 5
// D7 - PORTC Bit 6                                                                                                                                                           
// Characters/line: 16
lcd_init(16);
lcd_putsf(" Ready.....");
for (i=0; i<6; i++) {BEEP(); }
lcd_clear();

#asm("sei");
while (1)
     { 
     nut1=1;
     /*
     while (nut1==1) {DOCPS2();if (nut4==0) {VAN_T1=VAN_T2=0;}; lcd_putnum(ENDATA1,0,0); lcd_putnum(ENDATA2,8,0); delay_ms(100); lcd_clear();}
          BEEP();
          nut1=1;
          VAN_G1=0;
          VAN_G2=0;  
          delay_ms(500);
          DDRCTHT1=0; CTHT1=1; 
          while (CTHT1==1) {DC1THUAN(400); lcd_putnum(ENDATA1,0,0); } 
          RESDC1();                                                   
          for (i=0; i<3; i++) {BEEP(); } 
          while (CTHT2==1) {DC2THUAN(600); lcd_putnum(ENDATA2,0,0); }; 
          RESDC2();
          for (i=0; i<3; i++) {BEEP(); }                                                                              
          ENDATA1=0;
          ENDATA2=0;
     ////////////////////////////////RES 2 DC XONG /////////////////// 
     while (nut1==1) {DOCPS2(); if (nut4==0) {VAN_T1=VAN_T2=0;}; lcd_putnum(ENDATA1,0,0); lcd_putnum(ENDATA2,8,0); delay_ms(100);}
          BEEP();
          nut1=1;
          ENDATA1=0;
          ENDATA2=0;
          delay_ms(1000);
          TIMSK=0x02; ///////TIMER0 COMPARE MATH PID
          ETIMSK=0x00;
          SETVT1=-195;
          SETVT2=-195;
                                                                    
     while (nut1==1) {DOCPS2(); if (nut4==0) {VAN_T1=VAN_T2=0;}; lcd_putnum(ENDATA1,0,0); lcd_putnum(ENDATA2,8,0); delay_ms(100);}
          BEEP();
          nut1=1;
          TIMSK=0x00; ///////TAT TIMER0 COMPARE MATH PID
          ETIMSK=0x00;
          VAN_G1=1;
          VAN_G2=1;
      */    
     
     while (nut1==1) {DOCPS2(); if (nut4==0) {VAN_T1=VAN_T2=0;}; lcd_putnum(ENDATA1,0,0); lcd_putnum(ENDATA2,8,0); delay_ms(100);}
          BEEP();
          nut1=1;
          VAN_L=0;
     //while (nut1==1) {DOCPS2(); if (nut4==0) {VAN_T1=VAN_T2=0;}; lcd_putnum(ENDATA1,0,0); lcd_putnum(ENDATA2,8,0); delay_ms(100);}
          delay_ms(1000);
          BEEP();
          nut1=1;
          VAN_L=1;     
     //while (nut1==1) {DOCPS2(); if (nut4==0) {VAN_T1=VAN_T2=0;}; lcd_putnum(ENDATA1,0,0); lcd_putnum(ENDATA2,8,0); delay_ms(100);}
          delay_ms(1000);
          BEEP();
          nut1=1;
          VAN_L=0;
     //while (nut1==1) {DOCPS2(); if (nut4==0) {VAN_T1=VAN_T2=0;}; lcd_putnum(ENDATA1,0,0); lcd_putnum(ENDATA2,8,0); delay_ms(100);}
          delay_ms(1000);
          BEEP();
          nut1=1;
          VAN_L=1;
     //while (nut1==1) {DOCPS2(); if (nut4==0) {VAN_T1=VAN_T2=0;}; lcd_putnum(ENDATA1,0,0); lcd_putnum(ENDATA2,8,0); delay_ms(100);}
          delay_ms(1000);
          BEEP();
          nut1=1;
          VAN_L=0;
     //////
     //while (nut1==1) {DOCPS2(); if (nut4==0) {VAN_T1=VAN_T2=0;}; lcd_putnum(ENDATA1,0,0); lcd_putnum(ENDATA2,8,0); delay_ms(100);}
          delay_ms(1000);
          BEEP();
          nut1=1;
          VAN_L=1;     
     //while (nut1==1) {DOCPS2(); if (nut4==0) {VAN_T1=VAN_T2=0;}; lcd_putnum(ENDATA1,0,0); lcd_putnum(ENDATA2,8,0); delay_ms(100);}
          delay_ms(1000);
          BEEP();
          nut1=1;
          VAN_L=0;
     //while (nut1==1) {DOCPS2(); if (nut4==0) {VAN_T1=VAN_T2=0;}; lcd_putnum(ENDATA1,0,0); lcd_putnum(ENDATA2,8,0); delay_ms(100);}
          delay_ms(1000);
          BEEP();
          nut1=1;
          VAN_L=1;
     //while (nut1==1) {DOCPS2(); if (nut4==0) {VAN_T1=VAN_T2=0;}; lcd_putnum(ENDATA1,0,0); lcd_putnum(ENDATA2,8,0); delay_ms(100);}
          delay_ms(1000);
          BEEP();
          nut1=1;
          VAN_L=0;
     //while (nut1==1) {DOCPS2(); if (nut4==0) {VAN_T1=VAN_T2=0;}; lcd_putnum(ENDATA1,0,0); lcd_putnum(ENDATA2,8,0); delay_ms(100);}
          delay_ms(1000);
          BEEP();
          nut1=1;
          VAN_L=1;
          for (i=0; i<20; i++) {BEEP(); }
               
     while (nut1==1) {DOCPS2(); if (nut4==0) {VAN_T1=VAN_T2=0;}; lcd_putnum(ENDATA1,0,0); lcd_putnum(ENDATA2,8,0); delay_ms(100);}
          BEEP();
          nut1=1;
          while(1) {}    
          
     
     while (nut1==1) {DOCPS2(); if (nut4==0) {VAN_T1=VAN_T2=0;}; lcd_putnum(ENDATA1,0,0); lcd_putnum(ENDATA2,8,0); delay_ms(100);}
          BEEP();
          nut1=1;
          ENDATA1=0;
          ENDATA2=0;
          TIMSK=0x02; ///////TIMER0 COMPARE MATH PID
          ETIMSK=0x00;
          SETVT1=-30;
          SETVT2=-15; 
     //////////////////////////////////////////////////////////////////
     while (nut1==1) {DOCPS2(); if (nut4==0) {VAN_T1=VAN_T2=0;}; lcd_putnum(ENDATA1,0,0); lcd_putnum(ENDATA2,8,0); delay_ms(100); lcd_clear(); }
          BEEP();
          nut1=1;
          TIMSK=0x00; ///////TAT TIMER0 COMPARE MATH PID
          ETIMSK=0x00;
          RESDC1();
          RESDC2();
          VAN_T1=0;
          VAN_T2=0;
     while (nut1==1) {DOCPS2(); if (nut4==0) {VAN_T1=VAN_T2=0;}; lcd_putnum(ENDATA1,0,0); lcd_putnum(ENDATA2,8,0); delay_ms(100); lcd_clear(); }
          BEEP();
          nut1=1;
          VAN_T1=1;
     ////////////////////////////DONG MO VAN 2 TAY XONG ////////////////////////
     
     while (nut1==1) {DOCPS2(); if (nut4==0) {VAN_T1=VAN_T2=0;}; lcd_putnum(ENDATA1,0,0); lcd_putnum(ENDATA2,8,0); delay_ms(100);}
          BEEP();
          nut1=1;     
          ENDATA1=0;
          ENDATA2=0;
          TIMSK=0x02; ///////TIMER0 COMPARE MATH PID
          ETIMSK=0x00;
          SETVT2=0; 
          while (TAY2==1) {SETVT1++; delay_ms(10); }
          VAN_T2=1;
          TIMSK=0x00; ///////TAT TIMER0 COMPARE MATH PID
          ETIMSK=0x00;               
          RESDC1(); RESDC2();
     
     while (nut1==1) {DOCPS2();if (nut4==0) {VAN_T1=VAN_T2=0;}; lcd_putnum(ENDATA1,0,0); lcd_putnum(ENDATA2,8,0); delay_ms(100); lcd_clear();}
          BEEP();
          nut1=1;
          VAN_T1=0;
     while (nut1==1) {DOCPS2();if (nut4==0) {VAN_T1=VAN_T2=0;}; lcd_putnum(ENDATA1,0,0); lcd_putnum(ENDATA2,8,0); delay_ms(100); lcd_clear();}
          BEEP();
          nut1=1;
          ENDATA1=0;
          ENDATA2=0;  
          TIMSK=0x02; ///////TIMER0 COMPARE MATH PID
          ETIMSK=0x00;
          SETVT2=-100;
          SETVT1=0;
          while (ENDATA2>-50) {}
          SETVT1=-200;
          while (ENDATA2>-100) {}
          ENDATA2=0;
          while (TAY1==1) {SETVT2--; delay_ms(10); }
          VAN_T1=1;
          TIMSK=0x00; ///////TAT TIMER0 COMPARE MATH PID
          ETIMSK=0x00;               
          RESDC1(); RESDC2();
     while (nut1==1) {DOCPS2();if (nut4==0) {VAN_T1=VAN_T2=0;}; lcd_putnum(ENDATA1,0,0); lcd_putnum(ENDATA2,8,0); delay_ms(100); lcd_clear();}
          BEEP();
          nut1=1;
          VAN_T2=0;
     while (nut1==1) {DOCPS2();if (nut4==0) {VAN_T1=VAN_T2=0;}; lcd_putnum(ENDATA1,0,0); lcd_putnum(ENDATA2,8,0); delay_ms(100); lcd_clear();}
          BEEP();
          nut1=1;
          ENDATA1=0;
          ENDATA2=0;  
          TIMSK=0x02; ///////TIMER0 COMPARE MATH PID
          ETIMSK=0x00;
          SETVT1=100;
          SETVT2=0;
          while (ENDATA1<99) {}
          RESDC1();
          RESDC2();
          TIMSK=0x00; ///////TAT TIMER0 COMPARE MATH PID
          ETIMSK=0x00;
          
     while (nut1==1) {DOCPS2();if (nut4==0) {VAN_T1=VAN_T2=0;}; lcd_putnum(ENDATA1,0,0); lcd_putnum(ENDATA2,8,0); delay_ms(100); lcd_clear();}
          BEEP();
          nut1=1;
          TIMSK=0x02; ///////TIMER0 COMPARE MATH PID
          ETIMSK=0x00;
          SETVT2=190; 
          delay_ms(200);
     while (nut1==1) {DOCPS2();if (nut4==0) {VAN_T1=VAN_T2=0;}; lcd_putnum(ENDATA1,0,0); lcd_putnum(ENDATA2,8,0); delay_ms(100); lcd_clear();}
          BEEP();
          nut1=1;
          while (TAY2==1) {SETVT1++; delay_ms(10); }
          VAN_T2=1;
          TIMSK=0x00; ///////TAT TIMER0 COMPARE MATH PID
          ETIMSK=0x00;               
          RESDC1(); RESDC2();
     while (nut1==1) {DOCPS2();if (nut4==0) {VAN_T1=VAN_T2=0;}; lcd_putnum(ENDATA1,0,0); lcd_putnum(ENDATA2,8,0); delay_ms(100); lcd_clear();}
          BEEP();
          nut1=1;
          VAN_T1=0;
     while (nut1==1) {DOCPS2();if (nut4==0) {VAN_T1=VAN_T2=0;}; lcd_putnum(ENDATA1,0,0); lcd_putnum(ENDATA2,8,0); delay_ms(100); lcd_clear();}
          BEEP();
          nut1=1;
          ENDATA1=0;
          ENDATA2=0;  
          TIMSK=0x02; ///////TIMER0 COMPARE MATH PID
          ETIMSK=0x00;
          SETVT2=-30;
          SETVT1=0;                        
     while (ENDATA2>-30) {}
          TIMSK=0x00; ///////TAT TIMER0 COMPARE MATH PID
          ETIMSK=0x00;
          RESDC1(); RESDC2();
          
     
     while (nut1==1) {DOCPS2();if (nut4==0) {VAN_T1=VAN_T2=0;}; lcd_putnum(ENDATA1,0,0); lcd_putnum(ENDATA2,8,0); delay_ms(100); lcd_clear();}     
          while(1) {}
     
     
     while (nut1==1) {DOCPS2(); lcd_putnum(ENDATA1,0,0); lcd_putnum(ENDATA2,8,0); delay_ms(100);}
          BEEP();
          nut1=1;
          TIMSK=0x02; ///////TIMER0 COMPARE MATH PID
          ETIMSK=0x00;
          
          while(1)
          {
          DOCPS2();
          if (up==0) { SETVT1=SETVT1+5; BEEP(); } 
          if (down==0) { SETVT1=SETVT1-5; BEEP(); }
          if (left==0) { SETVT2=SETVT2+5; BEEP(); }
          if (right==0) { SETVT2=SETVT2-5; BEEP(); }
          lcd_putnum(ENDATA1,0,0); lcd_putnum(ENDATA2,8,0);
          lcd_putnum(SETVT1,0,1); lcd_putnum(SETVT2,8,1); 
          delay_ms(100);
          lcd_clear();
          };
          
     } 

//////////////////////////////////////////////////////////
/*
while (1)
      {      
      nut1=1;
      while (nut1==1) {DOCPS2(); }
          VAN_G=0;
      while (nut1==1) {DOCPS2(); }
          CTHT1=1; 
          while (CTHT1 ==1) {DC1THUAN(300); }
          RESDC1();
          CTHT2=1;
          while (CTHT2 ==1) {DC2THUAN(300); }
          RESDC2();
          
      while (nut1==1) {DOCPS2();}    
          ENDATA1=0; ENDATA2=0;      
          #asm("sei");
          SETVT1=-30;
          SETVT2=0;
          VAN_T1=0;
          VAN_T2=0;   
          
      while (nut1==1) {DOCPS2();}   
          VAN_T1=1;
          
      while (nut1==1) {DOCPS2();}
          TAY2=1;  
          SETVT1=0;
          if (TAY2==0) {VAN_T2=1; } 
          while (TAY2==1) 
               {
               
               }  
             
          
      } */
}
