CCS PCH C Compiler, Version 5.015, 41519               29-Mar-14 22:59

               Filename:   F:\Robocon 2014\Lap trinh design\LAP TRINH ROBOT TU DONG\tudong29-3\tudong40mhz\tudong\lttudongnew.lst

               ROM used:   5620 bytes (34%)
                           Largest free fragment is 10760
               RAM used:   89 (12%) at main() level
                           119 (15%) worst case
               Stack used: 7 locations (4 in main + 3 for interrupts)
               Stack size: 31

*
0000:  GOTO   14AC
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF2.5
004A:  GOTO   0054
004E:  BTFSC  FF2.2
0050:  GOTO   0156
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   0A30
0060:  BTFSS  FF0.3
0062:  GOTO   006C
0066:  BTFSC  FF0.0
0068:  GOTO   00C6
006C:  BTFSS  FF0.4
006E:  GOTO   0078
0072:  BTFSC  FF0.1
0074:  GOTO   010E
0078:  BTFSS  FA3.0
007A:  GOTO   0084
007E:  BTFSC  FA4.0
0080:  GOTO   0B1C
0084:  MOVFF  0E,00
0088:  MOVFF  0F,01
008C:  MOVFF  10,02
0090:  MOVFF  11,03
0094:  MOVFF  0C,FE9
0098:  MOVFF  07,FEA
009C:  BSF    07.7
009E:  MOVFF  08,FE1
00A2:  MOVFF  09,FE2
00A6:  MOVFF  0A,FD9
00AA:  MOVFF  0B,FDA
00AE:  MOVFF  12,FF3
00B2:  MOVFF  13,FF4
00B6:  MOVFF  14,FFA
00BA:  MOVF   04,W
00BC:  MOVFF  06,FE0
00C0:  MOVFF  05,FD8
00C4:  RETFIE 0
....................  
.................... ///// CHUONG TRINH CHINH 
....................  
.................... #include <lttudongnew.h> 
.................... #include <18F4431.h> 
.................... //////////// Standard Header file for the PIC18F4431 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4431 
*
01E0:  MOVLW  8E
01E2:  MOVWF  00
01E4:  MOVFF  68,01
01E8:  MOVFF  67,02
01EC:  CLRF   03
01EE:  BTFSS  x68.7
01F0:  BRA    01FC
01F2:  COMF   01,F
01F4:  COMF   02,F
01F6:  INCF   02,F
01F8:  BNZ   01FC
01FA:  INCF   01,F
01FC:  MOVF   01,F
01FE:  BNZ   0212
0200:  MOVFF  02,01
0204:  CLRF   02
0206:  MOVLW  08
0208:  SUBWF  00,F
020A:  MOVF   01,F
020C:  BNZ   0212
020E:  CLRF   00
0210:  BRA    0226
0212:  BCF    FD8.0
0214:  BTFSC  01.7
0216:  BRA    0220
0218:  RLCF   02,F
021A:  RLCF   01,F
021C:  DECF   00,F
021E:  BRA    0212
0220:  BTFSC  x68.7
0222:  BRA    0226
0224:  BCF    01.7
0226:  RETURN 0
0228:  MOVF   x67,W
022A:  BTFSC  FD8.2
022C:  BRA    0310
022E:  MOVWF  00
0230:  MOVF   x6B,W
0232:  BTFSC  FD8.2
0234:  BRA    0310
0236:  ADDWF  00,F
0238:  BNC   0242
023A:  MOVLW  81
023C:  ADDWF  00,F
023E:  BC    0310
0240:  BRA    024A
0242:  MOVLW  7F
0244:  SUBWF  00,F
0246:  BNC   0310
0248:  BZ    0310
024A:  MOVFF  68,6F
024E:  MOVF   x6C,W
0250:  XORWF  x6F,F
0252:  BSF    x68.7
0254:  BSF    x6C.7
0256:  MOVF   x6A,W
0258:  MULWF  x6E
025A:  MOVFF  FF4,71
025E:  MOVF   x69,W
0260:  MULWF  x6D
0262:  MOVFF  FF4,03
0266:  MOVFF  FF3,70
026A:  MULWF  x6E
026C:  MOVF   FF3,W
026E:  ADDWF  x71,F
0270:  MOVF   FF4,W
0272:  ADDWFC x70,F
0274:  MOVLW  00
0276:  ADDWFC 03,F
0278:  MOVF   x6A,W
027A:  MULWF  x6D
027C:  MOVF   FF3,W
027E:  ADDWF  x71,F
0280:  MOVF   FF4,W
0282:  ADDWFC x70,F
0284:  MOVLW  00
0286:  CLRF   02
0288:  ADDWFC 03,F
028A:  ADDWFC 02,F
028C:  MOVF   x68,W
028E:  MULWF  x6E
0290:  MOVF   FF3,W
0292:  ADDWF  x70,F
0294:  MOVF   FF4,W
0296:  ADDWFC 03,F
0298:  MOVLW  00
029A:  ADDWFC 02,F
029C:  MOVF   x68,W
029E:  MULWF  x6D
02A0:  MOVF   FF3,W
02A2:  ADDWF  03,F
02A4:  MOVF   FF4,W
02A6:  ADDWFC 02,F
02A8:  MOVLW  00
02AA:  CLRF   01
02AC:  ADDWFC 01,F
02AE:  MOVF   x6A,W
02B0:  MULWF  x6C
02B2:  MOVF   FF3,W
02B4:  ADDWF  x70,F
02B6:  MOVF   FF4,W
02B8:  ADDWFC 03,F
02BA:  MOVLW  00
02BC:  ADDWFC 02,F
02BE:  ADDWFC 01,F
02C0:  MOVF   x69,W
02C2:  MULWF  x6C
02C4:  MOVF   FF3,W
02C6:  ADDWF  03,F
02C8:  MOVF   FF4,W
02CA:  ADDWFC 02,F
02CC:  MOVLW  00
02CE:  ADDWFC 01,F
02D0:  MOVF   x68,W
02D2:  MULWF  x6C
02D4:  MOVF   FF3,W
02D6:  ADDWF  02,F
02D8:  MOVF   FF4,W
02DA:  ADDWFC 01,F
02DC:  INCF   00,F
02DE:  BTFSC  01.7
02E0:  BRA    02EC
02E2:  RLCF   x70,F
02E4:  RLCF   03,F
02E6:  RLCF   02,F
02E8:  RLCF   01,F
02EA:  DECF   00,F
02EC:  MOVLW  00
02EE:  BTFSS  x70.7
02F0:  BRA    0306
02F2:  INCF   03,F
02F4:  ADDWFC 02,F
02F6:  ADDWFC 01,F
02F8:  MOVF   01,W
02FA:  BNZ   0306
02FC:  MOVF   02,W
02FE:  BNZ   0306
0300:  MOVF   03,W
0302:  BNZ   0306
0304:  INCF   00,F
0306:  BTFSC  x6F.7
0308:  BSF    01.7
030A:  BTFSS  x6F.7
030C:  BCF    01.7
030E:  BRA    0318
0310:  CLRF   00
0312:  CLRF   01
0314:  CLRF   02
0316:  CLRF   03
0318:  RETURN 0
031A:  MOVLW  80
031C:  BTFSC  FD8.1
031E:  XORWF  x6C,F
0320:  CLRF   x71
0322:  CLRF   x72
0324:  MOVFF  68,70
0328:  MOVF   x6C,W
032A:  XORWF  x70,F
032C:  MOVF   x67,W
032E:  BTFSC  FD8.2
0330:  BRA    04EA
0332:  MOVWF  x6F
0334:  MOVWF  00
0336:  MOVF   x6B,W
0338:  BTFSC  FD8.2
033A:  BRA    04FC
033C:  SUBWF  x6F,F
033E:  BTFSC  FD8.2
0340:  BRA    0444
0342:  BNC   03BE
0344:  MOVFF  6C,75
0348:  BSF    x75.7
034A:  MOVFF  6D,74
034E:  MOVFF  6E,73
0352:  CLRF   x72
0354:  BCF    FD8.0
0356:  RRCF   x75,F
0358:  RRCF   x74,F
035A:  RRCF   x73,F
035C:  RRCF   x72,F
035E:  DECFSZ x6F,F
0360:  BRA    0352
0362:  BTFSS  x70.7
0364:  BRA    036C
0366:  BSF    x71.0
0368:  BRA    0524
036A:  BCF    x71.0
036C:  BCF    x6F.0
036E:  BSF    x71.4
0370:  CLRF   FEA
0372:  MOVLW  6A
0374:  MOVWF  FE9
0376:  BRA    054A
0378:  BCF    x71.4
037A:  BTFSC  x70.7
037C:  BRA    0392
037E:  BTFSS  x6F.0
0380:  BRA    03A8
0382:  RRCF   x75,F
0384:  RRCF   x74,F
0386:  RRCF   x73,F
0388:  RRCF   x72,F
038A:  INCF   00,F
038C:  BTFSC  FD8.2
038E:  BRA    051A
0390:  BRA    03A8
0392:  BTFSC  x75.7
0394:  BRA    03AE
0396:  BCF    FD8.0
0398:  RLCF   x72,F
039A:  RLCF   x73,F
039C:  RLCF   x74,F
039E:  RLCF   x75,F
03A0:  DECF   00,F
03A2:  BTFSC  FD8.2
03A4:  BRA    051A
03A6:  BRA    0392
03A8:  BSF    x71.6
03AA:  BRA    0482
03AC:  BCF    x71.6
03AE:  MOVFF  68,70
03B2:  BTFSS  x68.7
03B4:  BRA    03BA
03B6:  BSF    x75.7
03B8:  BRA    050C
03BA:  BCF    x75.7
03BC:  BRA    050C
03BE:  MOVFF  6B,6F
03C2:  MOVFF  6B,00
03C6:  MOVF   x67,W
03C8:  SUBWF  x6F,F
03CA:  MOVFF  68,75
03CE:  BSF    x75.7
03D0:  MOVFF  69,74
03D4:  MOVFF  6A,73
03D8:  CLRF   x72
03DA:  BCF    FD8.0
03DC:  RRCF   x75,F
03DE:  RRCF   x74,F
03E0:  RRCF   x73,F
03E2:  RRCF   x72,F
03E4:  DECFSZ x6F,F
03E6:  BRA    03D8
03E8:  BTFSS  x70.7
03EA:  BRA    03F2
03EC:  BSF    x71.1
03EE:  BRA    0524
03F0:  BCF    x71.1
03F2:  BCF    x6F.0
03F4:  BSF    x71.5
03F6:  CLRF   FEA
03F8:  MOVLW  6E
03FA:  MOVWF  FE9
03FC:  BRA    054A
03FE:  BCF    x71.5
0400:  BTFSC  x70.7
0402:  BRA    0418
0404:  BTFSS  x6F.0
0406:  BRA    042E
0408:  RRCF   x75,F
040A:  RRCF   x74,F
040C:  RRCF   x73,F
040E:  RRCF   x72,F
0410:  INCF   00,F
0412:  BTFSC  FD8.2
0414:  BRA    051A
0416:  BRA    042E
0418:  BTFSC  x75.7
041A:  BRA    0434
041C:  BCF    FD8.0
041E:  RLCF   x72,F
0420:  RLCF   x73,F
0422:  RLCF   x74,F
0424:  RLCF   x75,F
0426:  DECF   00,F
0428:  BTFSC  FD8.2
042A:  BRA    051A
042C:  BRA    0418
042E:  BSF    x71.7
0430:  BRA    0482
0432:  BCF    x71.7
0434:  MOVFF  6C,70
0438:  BTFSS  x6C.7
043A:  BRA    0440
043C:  BSF    x75.7
043E:  BRA    050C
0440:  BCF    x75.7
0442:  BRA    050C
0444:  MOVFF  6C,75
0448:  BSF    x75.7
044A:  MOVFF  6D,74
044E:  MOVFF  6E,73
0452:  BTFSS  x70.7
0454:  BRA    045E
0456:  BCF    x75.7
0458:  BSF    x71.2
045A:  BRA    0524
045C:  BCF    x71.2
045E:  CLRF   x72
0460:  BCF    x6F.0
0462:  CLRF   FEA
0464:  MOVLW  6A
0466:  MOVWF  FE9
0468:  BRA    054A
046A:  BTFSC  x70.7
046C:  BRA    04A6
046E:  MOVFF  68,70
0472:  BTFSS  x6F.0
0474:  BRA    0482
0476:  RRCF   x75,F
0478:  RRCF   x74,F
047A:  RRCF   x73,F
047C:  RRCF   x72,F
047E:  INCF   00,F
0480:  BZ    051A
0482:  BTFSS  x72.7
0484:  BRA    049C
0486:  INCF   x73,F
0488:  BNZ   049C
048A:  INCF   x74,F
048C:  BNZ   049C
048E:  INCF   x75,F
0490:  BNZ   049C
0492:  RRCF   x75,F
0494:  RRCF   x74,F
0496:  RRCF   x73,F
0498:  INCF   00,F
049A:  BZ    051A
049C:  BTFSC  x71.6
049E:  BRA    03AC
04A0:  BTFSC  x71.7
04A2:  BRA    0432
04A4:  BRA    04DE
04A6:  MOVLW  80
04A8:  XORWF  x75,F
04AA:  BTFSS  x75.7
04AC:  BRA    04B6
04AE:  BRA    0524
04B0:  MOVFF  6C,70
04B4:  BRA    04CA
04B6:  MOVFF  68,70
04BA:  MOVF   x75,F
04BC:  BNZ   04CA
04BE:  MOVF   x74,F
04C0:  BNZ   04CA
04C2:  MOVF   x73,F
04C4:  BNZ   04CA
04C6:  CLRF   00
04C8:  BRA    050C
04CA:  BTFSC  x75.7
04CC:  BRA    04DE
04CE:  BCF    FD8.0
04D0:  RLCF   x72,F
04D2:  RLCF   x73,F
04D4:  RLCF   x74,F
04D6:  RLCF   x75,F
04D8:  DECFSZ 00,F
04DA:  BRA    04CA
04DC:  BRA    051A
04DE:  BTFSS  x70.7
04E0:  BRA    04E6
04E2:  BSF    x75.7
04E4:  BRA    050C
04E6:  BCF    x75.7
04E8:  BRA    050C
04EA:  MOVFF  6B,00
04EE:  MOVFF  6C,75
04F2:  MOVFF  6D,74
04F6:  MOVFF  6E,73
04FA:  BRA    050C
04FC:  MOVFF  67,00
0500:  MOVFF  68,75
0504:  MOVFF  69,74
0508:  MOVFF  6A,73
050C:  MOVFF  75,01
0510:  MOVFF  74,02
0514:  MOVFF  73,03
0518:  BRA    0582
051A:  CLRF   00
051C:  CLRF   01
051E:  CLRF   02
0520:  CLRF   03
0522:  BRA    0582
0524:  CLRF   x72
0526:  COMF   x73,F
0528:  COMF   x74,F
052A:  COMF   x75,F
052C:  COMF   x72,F
052E:  INCF   x72,F
0530:  BNZ   053C
0532:  INCF   x73,F
0534:  BNZ   053C
0536:  INCF   x74,F
0538:  BNZ   053C
053A:  INCF   x75,F
053C:  BTFSC  x71.0
053E:  BRA    036A
0540:  BTFSC  x71.1
0542:  BRA    03F0
0544:  BTFSC  x71.2
0546:  BRA    045C
0548:  BRA    04B0
054A:  MOVF   FEF,W
054C:  ADDWF  x73,F
054E:  BNC   055A
0550:  INCF   x74,F
0552:  BNZ   055A
0554:  INCF   x75,F
0556:  BTFSC  FD8.2
0558:  BSF    x6F.0
055A:  MOVF   FED,F
055C:  MOVF   FEF,W
055E:  ADDWF  x74,F
0560:  BNC   0568
0562:  INCF   x75,F
0564:  BTFSC  FD8.2
0566:  BSF    x6F.0
0568:  MOVF   FED,F
056A:  MOVF   FEF,W
056C:  BTFSC  FEF.7
056E:  BRA    0572
0570:  XORLW  80
0572:  ADDWF  x75,F
0574:  BTFSC  FD8.0
0576:  BSF    x6F.0
0578:  BTFSC  x71.4
057A:  BRA    0378
057C:  BTFSC  x71.5
057E:  BRA    03FE
0580:  BRA    046A
0582:  RETURN 0
0584:  MOVLW  8E
0586:  MOVWF  00
0588:  MOVF   x63,W
058A:  SUBWF  00,F
058C:  MOVFF  64,02
0590:  MOVFF  65,01
0594:  BSF    02.7
0596:  MOVF   00,F
0598:  BZ    05AC
059A:  BCF    FD8.0
059C:  MOVF   02,F
059E:  BNZ   05A4
05A0:  MOVF   01,F
05A2:  BZ    05AC
05A4:  RRCF   02,F
05A6:  RRCF   01,F
05A8:  DECFSZ 00,F
05AA:  BRA    059A
05AC:  BTFSS  x64.7
05AE:  BRA    05BA
05B0:  COMF   01,F
05B2:  COMF   02,F
05B4:  INCF   01,F
05B6:  BTFSC  FD8.2
05B8:  INCF   02,F
05BA:  RETURN 0
*
0AAE:  ADDWF  FE8,W
0AB0:  CLRF   FF7
0AB2:  RLCF   FF7,F
0AB4:  ADDLW  C9
0AB6:  MOVWF  FF6
0AB8:  MOVLW  0A
0ABA:  ADDWFC FF7,F
0ABC:  TBLRD*-
0ABE:  MOVF   FF5,W
0AC0:  MOVWF  FFA
0AC2:  TBLRD*
0AC4:  MOVF   FF5,W
0AC6:  MOVWF  FF9
0AC8:  DATA 48,0A
0ACA:  DATA 54,0A
0ACC:  DATA 6C,0A
0ACE:  DATA 84,0A
....................  
.................... #list 
....................  
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... //#FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                     //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOPUT 
....................  
.................... #use delay(clock=40000000,crystal=10000000) 
0AD0:  CLRF   FEA
0AD2:  MOVLW  63
0AD4:  MOVWF  FE9
0AD6:  MOVF   FEF,W
0AD8:  BZ    0AF6
0ADA:  MOVLW  0C
0ADC:  MOVWF  01
0ADE:  CLRF   00
0AE0:  DECFSZ 00,F
0AE2:  BRA    0AE0
0AE4:  DECFSZ 01,F
0AE6:  BRA    0ADE
0AE8:  MOVLW  F7
0AEA:  MOVWF  00
0AEC:  DECFSZ 00,F
0AEE:  BRA    0AEC
0AF0:  BRA    0AF2
0AF2:  DECFSZ FEF,F
0AF4:  BRA    0ADA
0AF6:  RETURN 0
....................  
....................  
.................... #include <PIC18F4431_registers.h> 
.................... #byte TOSU = 0xFFF 
.................... #word TOS = 0xFFE 
.................... #byte STKPTR = 0xFFC 
.................... #bit    STKOVF = STKPTR.7 
.................... #byte STKPTR = 0xFFC 
.................... #bit    STKPTR0 = STKPTR.0 
.................... #bit    STKPTR1 = STKPTR.1 
.................... #bit    STKPTR2 = STKPTR.2 
.................... #bit    STKPTR3 = STKPTR.3 
.................... #bit    STKPTR4 = STKPTR.4 
.................... #bit    STKUNF = STKPTR.6 
.................... #bit    STKFUL = STKPTR.7 
.................... #byte PCLATU = 0xFFB 
.................... #byte PCLATH = 0xFFA 
.................... #byte PCL = 0xFF9 
.................... #byte TBLPTRU = 0xFF8 
.................... #bit    TBLPTRU0 = TBLPTRU.0 
.................... #bit    TBLPTRU1 = TBLPTRU.1 
.................... #bit    TBLPTRU2 = TBLPTRU.2 
.................... #bit    TBLPTRU3 = TBLPTRU.3 
.................... #bit    TBLPTRU4 = TBLPTRU.4 
.................... #bit    ACSS = TBLPTRU.5 
.................... #word TBLPTR = 0xFF7 
.................... #byte TABLAT = 0xFF5 
.................... #word PROD = 0xFF4 
.................... #byte INTCON = 0xFF2 
.................... #bit    RBIF = INTCON.0 
.................... #bit    INT0IF = INTCON.1 
.................... #bit    TMR0IF = INTCON.2 
.................... #bit    RBIE = INTCON.3 
.................... #bit    INT0IE = INTCON.4 
.................... #bit    TMR0IE = INTCON.5 
.................... #bit    PEIE_GIEL = INTCON.6 
.................... #bit    GIE_GIEH = INTCON.7 
.................... #byte INTCON = 0xFF2 
.................... #bit    PEIE = INTCON.6 
.................... #bit    GIE = INTCON.7 
.................... #byte INTCON = 0xFF2 
.................... #bit    INT0F = INTCON.1 
.................... #bit    T0IF = INTCON.2 
.................... #bit    INT0E = INTCON.4 
.................... #bit    T0IE = INTCON.5 
.................... #bit    GIEL = INTCON.6 
.................... #bit    GIEH = INTCON.7 
.................... #byte INTCON2 = 0xFF1 
.................... #bit    T0IP = INTCON2.2 
.................... #byte INTCON2 = 0xFF1 
.................... #bit    RBIP = INTCON2.0 
.................... #bit    TMR0IP = INTCON2.2 
.................... #bit    INTEDG2 = INTCON2.4 
.................... #bit    INTEDG1 = INTCON2.5 
.................... #bit    INTEDG0 = INTCON2.6 
.................... #bit    RBPU = INTCON2.7 
.................... #byte INTCON3 = 0xFF0 
.................... #bit    INT1F = INTCON3.0 
.................... #bit    INT2F = INTCON3.1 
.................... #bit    INT1E = INTCON3.3 
.................... #bit    INT2E = INTCON3.4 
.................... #bit    INT1P = INTCON3.6 
.................... #bit    INT2P = INTCON3.7 
.................... #byte INTCON3 = 0xFF0 
.................... #bit    INT1IF = INTCON3.0 
.................... #bit    INT2IF = INTCON3.1 
.................... #bit    INT1IE = INTCON3.3 
.................... #bit    INT2IE = INTCON3.4 
.................... #bit    INT1IP = INTCON3.6 
.................... #bit    INT2IP = INTCON3.7 
.................... #byte INDF0 = 0xFEF 
.................... #byte POSTINC0 = 0xFEE 
.................... #byte POSTDEC0 = 0xFED 
.................... #byte PREINC0 = 0xFEC 
.................... #byte PLUSW0 = 0xFEB 
.................... #word FSR0 = 0xFEA 
.................... #byte WREG = 0xFE8 
.................... #byte INDF1 = 0xFE7 
.................... #byte POSTINC1 = 0xFE6 
.................... #byte POSTDEC1 = 0xFE5 
.................... #byte PREINC1 = 0xFE4 
.................... #byte PLUSW1 = 0xFE3 
.................... #word FSR1 = 0xFE2 
.................... #byte BSR = 0xFE0 
.................... #byte INDF2 = 0xFDF 
.................... #byte POSTINC2 = 0xFDE 
.................... #byte POSTDEC2 = 0xFDD 
.................... #byte PREINC2 = 0xFDC 
.................... #byte PLUSW2 = 0xFDB 
.................... #word FSR2 = 0xFDA 
.................... #byte STATUS = 0xFD8 
.................... #bit    C = STATUS.0 
.................... #bit    DC = STATUS.1 
.................... #bit    Z = STATUS.2 
.................... #bit    OV = STATUS.3 
.................... #bit    N = STATUS.4 
.................... #word TMR0 = 0xFD7 
.................... #byte T0CON = 0xFD5 
.................... #bit    T0PS0 = T0CON.0 
.................... #bit    T0PS1 = T0CON.1 
.................... #bit    T0PS2 = T0CON.2 
.................... #bit    PSA = T0CON.3 
.................... #bit    T0SE = T0CON.4 
.................... #bit    T0CS = T0CON.5 
.................... #bit    T016BIT = T0CON.6 
.................... #bit    TMR0ON = T0CON.7 
.................... #byte OSCCON = 0xFD3 
.................... #bit    FLTS = OSCCON.2 
.................... #byte OSCCON = 0xFD3 
.................... #bit    SCS0 = OSCCON.0 
.................... #bit    SCS1 = OSCCON.1 
.................... #bit    IOFS = OSCCON.2 
.................... #bit    OSTS = OSCCON.3 
.................... #bit    IRCF0 = OSCCON.4 
.................... #bit    IRCF1 = OSCCON.5 
.................... #bit    IRCF2 = OSCCON.6 
.................... #bit    IDLEN = OSCCON.7 
.................... #byte LVDCON = 0xFD2 
.................... #bit    IVRST = LVDCON.5 
.................... #byte LVDCON = 0xFD2 
.................... #bit    LVDL0 = LVDCON.0 
.................... #bit    LVDL1 = LVDCON.1 
.................... #bit    LVDL2 = LVDCON.2 
.................... #bit    LVDL3 = LVDCON.3 
.................... #bit    LVDEN = LVDCON.4 
.................... #bit    IRVST = LVDCON.5 
.................... #byte WDTCON = 0xFD1 
.................... #bit    SWDTEN = WDTCON.0 
.................... #bit    WDTW = WDTCON.7 
.................... #byte RCON = 0xFD0 
.................... #bit    BOR = RCON.0 
.................... #bit    POR = RCON.1 
.................... #bit    PD = RCON.2 
.................... #bit    TO = RCON.3 
.................... #bit    RI = RCON.4 
.................... #bit    IPEN = RCON.7 
.................... #word TMR1 = 0xFCF 
.................... #byte T1CON = 0xFCD 
.................... #bit    T1INSYNC = T1CON.2 
.................... #byte T1CON = 0xFCD 
.................... #bit    TMR1ON = T1CON.0 
.................... #bit    TMR1CS = T1CON.1 
.................... #bit    T1SYNC = T1CON.2 
.................... #bit    T1OSCEN = T1CON.3 
.................... #bit    T1CKPS0 = T1CON.4 
.................... #bit    T1CKPS1 = T1CON.5 
.................... #bit    T1RUN = T1CON.6 
.................... #bit    RD16 = T1CON.7 
.................... #byte TMR2 = 0xFCC 
.................... #byte PR2 = 0xFCB 
.................... #byte T2CON = 0xFCA 
.................... #bit    T2OUTPS0 = T2CON.3 
.................... #bit    T2OUTPS1 = T2CON.4 
.................... #bit    T2OUTPS2 = T2CON.5 
.................... #bit    T2OUTPS3 = T2CON.6 
.................... #byte T2CON = 0xFCA 
.................... #bit    T2CKPS0 = T2CON.0 
.................... #bit    T2CKPS1 = T2CON.1 
.................... #bit    TMR2ON = T2CON.2 
.................... #bit    TOUTPS0 = T2CON.3 
.................... #bit    TOUTPS1 = T2CON.4 
.................... #bit    TOUTPS2 = T2CON.5 
.................... #bit    TOUTPS3 = T2CON.6 
.................... #byte SSPBUF = 0xFC9 
.................... #byte SSPADD = 0xFC8 
.................... #byte SSPSTAT = 0xFC7 
.................... #bit    READ_WRITE = SSPSTAT.2 
.................... #bit    DATA_ADDRESS = SSPSTAT.5 
.................... #byte SSPSTAT = 0xFC7 
.................... #bit    WRITE = SSPSTAT.2 
.................... #bit    ADDRESS = SSPSTAT.5 
.................... #byte SSPSTAT = 0xFC7 
.................... #bit    BF = SSPSTAT.0 
.................... #bit    UA = SSPSTAT.1 
.................... #bit    R = SSPSTAT.2 
.................... #bit    S = SSPSTAT.3 
.................... #bit    P = SSPSTAT.4 
.................... #bit    D = SSPSTAT.5 
.................... #bit    CKE = SSPSTAT.6 
.................... #bit    SMP = SSPSTAT.7 
.................... #byte SSPSTAT = 0xFC7 
.................... #bit    R_W = SSPSTAT.2 
.................... #bit    D_A = SSPSTAT.5 
.................... #byte SSPSTAT = 0xFC7 
.................... #bit    W = SSPSTAT.2 
.................... #bit    A = SSPSTAT.5 
.................... #byte SSPCON = 0xFC6 
.................... #bit    SSPM0 = SSPCON.0 
.................... #bit    SSPM1 = SSPCON.1 
.................... #bit    SSPM2 = SSPCON.2 
.................... #bit    SSPM3 = SSPCON.3 
.................... #bit    CKP = SSPCON.4 
.................... #bit    SSPEN = SSPCON.5 
.................... #bit    SSPOV = SSPCON.6 
.................... #bit    WCOL = SSPCON.7 
.................... #word ADRES = 0xFC4 
.................... #byte ADCON0 = 0xFC2 
.................... #bit    GO_DONE = ADCON0.1 
.................... #byte ADCON0 = 0xFC2 
.................... #bit    ADON = ADCON0.0 
.................... #bit    GO = ADCON0.1 
.................... #bit    ACMOD0 = ADCON0.2 
.................... #bit    ACMOD1 = ADCON0.3 
.................... #bit    ACSCH = ADCON0.4 
.................... #bit    ACONV = ADCON0.5 
.................... #byte ADCON0 = 0xFC2 
.................... #bit    GODONE = ADCON0.1 
.................... #byte ADCON0 = 0xFC2 
.................... #bit    DONE = ADCON0.1 
.................... #byte ADCON1 = 0xFC1 
.................... #bit    FFOVFL = ADCON1.2 
.................... #byte ADCON1 = 0xFC1 
.................... #bit    ADPNT0 = ADCON1.0 
.................... #bit    ADPNT1 = ADCON1.1 
.................... #bit    BFOVFL = ADCON1.2 
.................... #bit    BFEMT = ADCON1.3 
.................... #bit    FIFOEN = ADCON1.4 
.................... #bit    VCFG0 = ADCON1.6 
.................... #bit    VCFG1 = ADCON1.7 
.................... #byte ADCON2 = 0xFC0 
.................... #bit    ADCS0 = ADCON2.0 
.................... #bit    ADCS1 = ADCON2.1 
.................... #bit    ADCS2 = ADCON2.2 
.................... #bit    ACQT0 = ADCON2.3 
.................... #bit    ACQT1 = ADCON2.4 
.................... #bit    ACQT2 = ADCON2.5 
.................... #bit    ACQT3 = ADCON2.6 
.................... #bit    ADFM = ADCON2.7 
.................... #word CCPR1 = 0xFBF 
.................... #byte CCP1CON = 0xFBD 
.................... #bit    CCP1Y = CCP1CON.4 
.................... #bit    CCP1X = CCP1CON.5 
.................... #byte CCP1CON = 0xFBD 
.................... #bit    CCP1M0 = CCP1CON.0 
.................... #bit    CCP1M1 = CCP1CON.1 
.................... #bit    CCP1M2 = CCP1CON.2 
.................... #bit    CCP1M3 = CCP1CON.3 
.................... #bit    DC1B0 = CCP1CON.4 
.................... #bit    DC1B1 = CCP1CON.5 
.................... #word CCPR2 = 0xFBC 
.................... #byte CCP2CON = 0xFBA 
.................... #bit    CCP2Y = CCP2CON.4 
.................... #bit    CCP2X = CCP2CON.5 
.................... #byte CCP2CON = 0xFBA 
.................... #bit    CCP2M0 = CCP2CON.0 
.................... #bit    CCP2M1 = CCP2CON.1 
.................... #bit    CCP2M2 = CCP2CON.2 
.................... #bit    CCP2M3 = CCP2CON.3 
.................... #bit    DC2B0 = CCP2CON.4 
.................... #bit    DC2B1 = CCP2CON.5 
.................... #byte ANSEL1 = 0xFB9 
.................... #bit    ANS8 = ANSEL1.0 
.................... #byte ANSEL0 = 0xFB8 
.................... #byte T5CON = 0xFB7 
.................... #bit    TMR5ON = T5CON.0 
.................... #bit    TMR5CS = T5CON.1 
.................... #bit    T5SYNC = T5CON.2 
.................... #bit    T5PS0 = T5CON.3 
.................... #bit    T5PS1 = T5CON.4 
.................... #bit    T5MOD = T5CON.5 
.................... #bit    RESEN = T5CON.6 
.................... #bit    T5SEN = T5CON.7 
.................... #byte QEICON = 0xFB6 
.................... #bit    UP_DOWN = QEICON.5 
.................... #byte QEICON = 0xFB6 
.................... #bit    PDEC0 = QEICON.0 
.................... #bit    PDEC1 = QEICON.1 
.................... #bit    QEIM0 = QEICON.2 
.................... #bit    QEIM1 = QEICON.3 
.................... #bit    QEIM2 = QEICON.4 
.................... #bit    UP = QEICON.5 
.................... #bit    QERR = QEICON.6 
.................... #bit    VELM = QEICON.7 
.................... #byte QEICON = 0xFB6 
.................... #bit    UPDOWN = QEICON.5 
.................... #byte QEICON = 0xFB6 
.................... #bit    DOWN = QEICON.5 
.................... #byte SPBRGH = 0xFB0 
.................... #byte SPBRG = 0xFAF 
.................... #byte RCREG = 0xFAE 
.................... #byte TXREG = 0xFAD 
.................... #byte TXSTA = 0xFAC 
.................... #bit    TX9D = TXSTA.0 
.................... #bit    TRMT = TXSTA.1 
.................... #bit    BRGH = TXSTA.2 
.................... #bit    SENDB = TXSTA.3 
.................... #bit    SYNC = TXSTA.4 
.................... #bit    TXEN = TXSTA.5 
.................... #bit    TX9 = TXSTA.6 
.................... #bit    CSRC = TXSTA.7 
.................... #byte RCSTA = 0xFAB 
.................... #bit    ADEN = RCSTA.3 
.................... #byte RCSTA = 0xFAB 
.................... #bit    RX9D = RCSTA.0 
.................... #bit    OERR = RCSTA.1 
.................... #bit    FERR = RCSTA.2 
.................... #bit    ADDEN = RCSTA.3 
.................... #bit    CREN = RCSTA.4 
.................... #bit    SREN = RCSTA.5 
.................... #bit    RX9 = RCSTA.6 
.................... #bit    SPEN = RCSTA.7 
.................... #byte BAUDCON = 0xFAA 
.................... #bit    SCKP = BAUDCON.4 
.................... #bit    RCMT = BAUDCON.6 
.................... #byte BAUDCON = 0xFAA 
.................... #bit    ABDEN = BAUDCON.0 
.................... #bit    WUE = BAUDCON.1 
.................... #bit    BRG16 = BAUDCON.3 
.................... #bit    TXCKP = BAUDCON.4 
.................... #bit    RXDTP = BAUDCON.5 
.................... #bit    RCIDL = BAUDCON.6 
.................... #bit    ABDOVF = BAUDCON.7 
.................... #byte EEADR = 0xFA9 
.................... #byte EEDATA = 0xFA8 
.................... #byte EECON2 = 0xFA7 
.................... #byte EECON1 = 0xFA6 
.................... #bit    RD = EECON1.0 
.................... #bit    WR = EECON1.1 
.................... #bit    WREN = EECON1.2 
.................... #bit    WRERR = EECON1.3 
.................... #bit    FREE = EECON1.4 
.................... #bit    CFGS = EECON1.6 
.................... #bit    EEPGD = EECON1.7 
.................... #byte IPR3 = 0xFA5 
.................... #bit    TMR5IP = IPR3.0 
.................... #bit    IC1IP = IPR3.1 
.................... #bit    IC2QEIP = IPR3.2 
.................... #bit    IC3DRIP = IPR3.3 
.................... #bit    PTIP = IPR3.4 
.................... #byte PIR3 = 0xFA4 
.................... #bit    TMR5IF = PIR3.0 
.................... #bit    IC1IF = PIR3.1 
.................... #bit    IC2QEIF = PIR3.2 
.................... #bit    IC3DRIF = PIR3.3 
.................... #bit    PTIF = PIR3.4 
.................... #byte PIE3 = 0xFA3 
.................... #bit    TMR5IE = PIE3.0 
.................... #bit    IC1IE = PIE3.1 
.................... #bit    IC2QEIE = PIE3.2 
.................... #bit    IC3DRIE = PIE3.3 
.................... #bit    PTIE = PIE3.4 
.................... #byte IPR2 = 0xFA2 
.................... #bit    CCP2IP = IPR2.0 
.................... #bit    LVDIP = IPR2.2 
.................... #bit    EEIP = IPR2.4 
.................... #bit    OSFIP = IPR2.7 
.................... #byte PIR2 = 0xFA1 
.................... #bit    CCP2IF = PIR2.0 
.................... #bit    LVDIF = PIR2.2 
.................... #bit    EEIF = PIR2.4 
.................... #bit    OSFIF = PIR2.7 
.................... #byte PIE2 = 0xFA0 
.................... #bit    CCP2IE = PIE2.0 
.................... #bit    LVDIE = PIE2.2 
.................... #bit    EEIE = PIE2.4 
.................... #bit    OSFIE = PIE2.7 
.................... #byte IPR1 = 0xF9F 
.................... #bit    TBIP = IPR1.4 
.................... #byte IPR1 = 0xF9F 
.................... #bit    TMR1IP = IPR1.0 
.................... #bit    TMR2IP = IPR1.1 
.................... #bit    CCP1IP = IPR1.2 
.................... #bit    SSPIP = IPR1.3 
.................... #bit    TXIP = IPR1.4 
.................... #bit    RCIP = IPR1.5 
.................... #bit    ADIP = IPR1.6 
.................... #byte PIR1 = 0xF9E 
.................... #bit    TBIF = PIR1.4 
.................... #byte PIR1 = 0xF9E 
.................... #bit    TMR1IF = PIR1.0 
.................... #bit    TMR2IF = PIR1.1 
.................... #bit    CCP1IF = PIR1.2 
.................... #bit    SSPIF = PIR1.3 
.................... #bit    TXIF = PIR1.4 
.................... #bit    RCIF = PIR1.5 
.................... #bit    ADIF = PIR1.6 
.................... #byte PIE1 = 0xF9D 
.................... #bit    TBIE = PIE1.4 
.................... #byte PIE1 = 0xF9D 
.................... #bit    TMR1IE = PIE1.0 
.................... #bit    TMR2IE = PIE1.1 
.................... #bit    CCP1IE = PIE1.2 
.................... #bit    SSPIE = PIE1.3 
.................... #bit    TXIE = PIE1.4 
.................... #bit    RCIE = PIE1.5 
.................... #bit    ADIE = PIE1.6 
.................... #byte OSCTUNE = 0xF9B 
.................... #byte ADCON3 = 0xF9A 
.................... #bit    SSRC0 = ADCON3.0 
.................... #bit    SSRC1 = ADCON3.1 
.................... #bit    SSRC2 = ADCON3.2 
.................... #bit    SSRC3 = ADCON3.3 
.................... #bit    SSRC4 = ADCON3.4 
.................... #bit    ADRS0 = ADCON3.6 
.................... #bit    ADRS1 = ADCON3.7 
.................... #byte ADCHS = 0xF99 
.................... #bit    GASEL0 = ADCHS.0 
.................... #bit    GASEL1 = ADCHS.1 
.................... #bit    GCSEL0 = ADCHS.2 
.................... #bit    GCSEL1 = ADCHS.3 
.................... #bit    GBSEL0 = ADCHS.4 
.................... #bit    GBSEL1 = ADCHS.5 
.................... #bit    GDSEL0 = ADCHS.6 
.................... #bit    GDSEL1 = ADCHS.7 
.................... #byte ADCHS = 0xF99 
.................... #bit    SASEL0 = ADCHS.0 
.................... #bit    SASEL1 = ADCHS.1 
.................... #bit    SCSEL0 = ADCHS.2 
.................... #bit    SCSEL1 = ADCHS.3 
.................... #bit    SBSEL0 = ADCHS.4 
.................... #bit    SBSEL1 = ADCHS.5 
.................... #bit    SDSEL0 = ADCHS.6 
.................... #bit    SDSEL1 = ADCHS.7 
.................... #byte TRISE = 0xF96 
.................... #byte TRISD = 0xF95 
.................... #byte TRISC = 0xF94 
.................... #byte TRISB = 0xF93 
.................... #byte TRISA = 0xF92 
.................... #word PR5 = 0xF91 
.................... #byte LATE = 0xF8D 
.................... #byte LATD = 0xF8C 
.................... #byte LATC = 0xF8B 
.................... #byte LATB = 0xF8A 
.................... #byte LATA = 0xF89 
.................... #word TMR5 = 0xF88 
.................... #byte PORTE = 0xF84 
.................... #byte PORTD = 0xF83 
.................... #byte PORTC = 0xF82 
.................... #byte PORTB = 0xF81 
.................... #byte PORTA = 0xF80 
.................... #byte PTCON0 = 0xF7F 
.................... #bit    PTMOD0 = PTCON0.0 
.................... #bit    PTMOD1 = PTCON0.1 
.................... #bit    PTCKPS0 = PTCON0.2 
.................... #bit    PTCKPS1 = PTCON0.3 
.................... #bit    PTOPS0 = PTCON0.4 
.................... #bit    PTOPS1 = PTCON0.5 
.................... #bit    PTOPS2 = PTCON0.6 
.................... #bit    PTOPS3 = PTCON0.7 
.................... #byte PTCON1 = 0xF7E 
.................... #bit    PTDIR = PTCON1.6 
.................... #bit    PTEN = PTCON1.7 
.................... #byte PTMRL = 0xF7D 
.................... #byte PTMRH = 0xF7C 
.................... #byte PTPERL = 0xF7B 
.................... #byte PTPERH = 0xF7A 
.................... #byte PDC0L = 0xF79 
.................... #byte PDC0H = 0xF78 
.................... #byte PDC1L = 0xF77 
.................... #byte PDC1H = 0xF76 
.................... #byte PDC2L = 0xF75 
.................... #byte PDC2H = 0xF74 
.................... #byte PDC3L = 0xF73 
.................... #byte PDC3H = 0xF72 
.................... #byte SEVTCMPL = 0xF71 
.................... #byte SEVTCMPH = 0xF70 
.................... #byte PWMCON0 = 0xF6F 
.................... #bit    PMOD0 = PWMCON0.0 
.................... #bit    PMOD1 = PWMCON0.1 
.................... #bit    PMOD2 = PWMCON0.2 
.................... #bit    PMOD3 = PWMCON0.3 
.................... #bit    PWMEN0 = PWMCON0.4 
.................... #bit    PWMEN1 = PWMCON0.5 
.................... #bit    PWMEN2 = PWMCON0.6 
.................... #byte PWMCON1 = 0xF6E 
.................... #bit    OSYNC = PWMCON1.0 
.................... #bit    UDIS = PWMCON1.1 
.................... #bit    SEVTDIR = PWMCON1.3 
.................... #bit    SEVOPS0 = PWMCON1.4 
.................... #bit    SEVOPS1 = PWMCON1.5 
.................... #bit    SEVOPS2 = PWMCON1.6 
.................... #bit    SEVOPS3 = PWMCON1.7 
.................... #byte DTCON = 0xF6D 
.................... #bit    DT0 = DTCON.0 
.................... #bit    DT1 = DTCON.1 
.................... #bit    DT2 = DTCON.2 
.................... #bit    DT3 = DTCON.3 
.................... #bit    DT4 = DTCON.4 
.................... #bit    DT5 = DTCON.5 
.................... #bit    DTPS0 = DTCON.6 
.................... #bit    DTPS1 = DTCON.7 
.................... #byte DTCON = 0xF6D 
.................... #bit    DTA0 = DTCON.0 
.................... #bit    DTA1 = DTCON.1 
.................... #bit    DTA2 = DTCON.2 
.................... #bit    DTA3 = DTCON.3 
.................... #bit    DTA4 = DTCON.4 
.................... #bit    DTA5 = DTCON.5 
.................... #bit    DTAPS0 = DTCON.6 
.................... #bit    DTAPS1 = DTCON.7 
.................... #byte FLTCONFIG = 0xF6C 
.................... #bit    FLTAEN = FLTCONFIG.0 
.................... #bit    FLTAMOD = FLTCONFIG.1 
.................... #bit    FLTAS = FLTCONFIG.2 
.................... #bit    FLTCON = FLTCONFIG.3 
.................... #bit    FLTBEN = FLTCONFIG.4 
.................... #bit    FLTBMOD = FLTCONFIG.5 
.................... #bit    FLTBS = FLTCONFIG.6 
.................... #bit    BRFEN = FLTCONFIG.7 
.................... #byte OVDCOND = 0xF6B 
.................... #byte OVDCONS = 0xF6A 
.................... #word CAP1BUF = 0xF69 
.................... #word CAP2BUF = 0xF67 
.................... #word CAP3BUF = 0xF65 
.................... #byte CAP1CON = 0xF63 
.................... #bit    CAP1M0 = CAP1CON.0 
.................... #bit    CAP1M1 = CAP1CON.1 
.................... #bit    CAP1M2 = CAP1CON.2 
.................... #bit    CAP1M3 = CAP1CON.3 
.................... #bit    CAP1TMR = CAP1CON.5 
.................... #bit    CAP1REN = CAP1CON.6 
.................... #byte CAP2CON = 0xF62 
.................... #bit    CAP2M0 = CAP2CON.0 
.................... #bit    CAP2M1 = CAP2CON.1 
.................... #bit    CAP2M2 = CAP2CON.2 
.................... #bit    CAP2M3 = CAP2CON.3 
.................... #bit    CAP2TMR = CAP2CON.5 
.................... #bit    CAP2REN = CAP2CON.6 
.................... #byte CAP3CON = 0xF61 
.................... #bit    CAP3M0 = CAP3CON.0 
.................... #bit    CAP3M1 = CAP3CON.1 
.................... #bit    CAP3M2 = CAP3CON.2 
.................... #bit    CAP3M3 = CAP3CON.3 
.................... #bit    CAP3TMR = CAP3CON.5 
.................... #bit    CAP3REN = CAP3CON.6 
.................... #byte DFLTCON = 0xF60 
.................... #bit    FLTCK0 = DFLTCON.0 
.................... #bit    FLTCK1 = DFLTCON.1 
.................... #bit    FLTCK2 = DFLTCON.2 
.................... #bit    FLT1EN = DFLTCON.3 
.................... #bit    FLT2EN = DFLTCON.4 
.................... #bit    FLT3EN = DFLTCON.5 
.................... #bit    FLT4EN = DFLTCON.6 
....................  
.................... #include <khoidong.c> 
....................  
.................... ///// KHOI DONG PIC 
.................... /* 
.................... #include <18F4431.h> 
.................... #include <PIC18F4431_registers.h> 
.................... #include <stdlib.h> 
.................... #include <stdio.h> 
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... //#FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... //#FUSES H4 
.................... #use delay(clock=40000000,crystal=10000000) 
.................... //#use spi(MASTER ,FORCE_HW, BITS=16) 
.................... //#bit ss1 = PORTD.0 
....................  
.................... #use fast_io(a) 
.................... #use fast_io(d) 
.................... #use fast_io(c) 
.................... #use fast_io(e) 
.................... */ 
.................... void khoidong() 
.................... { 
....................    trisa=0b00011000; /// DAU VAO QEI CUNG 
*
0B76:  MOVLW  18
0B78:  MOVWF  F92
....................    porta=0b11100111; 
0B7A:  MOVLW  E7
0B7C:  MOVWF  F80
....................    trisb=0b11111111; /// DAU VAO CONG TAC HANH TRINH 
0B7E:  SETF   F93
....................    port_b_pullups(0xff); 
0B80:  BCF    FF1.7
....................    portb=0xff; 
0B82:  SETF   F81
....................    trisc=0b00110000; /// DAU VAO QEI MEM 
0B84:  MOVLW  30
0B86:  MOVWF  F94
....................    portc=0b00000000; 
0B88:  CLRF   F82
....................    trisd=0b00000000; /// DAU VAO SPI 0b00000100 
0B8A:  CLRF   F95
....................    portd=0b11110000; 
0B8C:  MOVLW  F0
0B8E:  MOVWF  F83
....................    trise=0b00000000; 
0B90:  CLRF   F96
....................    porte=0b11111111; 
0B92:  SETF   F84
....................     
....................    enable_interrupts(INT_EXT1); 
0B94:  BSF    FF0.3
....................    enable_interrupts(INT_EXT2); 
0B96:  BSF    FF0.4
....................     
....................    //enable_interrupts(int_timer0); 
....................    //enable_interrupts(int_timer1); 
....................    //enable_interrupts(int_timer5); 
....................     
....................    enable_interrupts(GLOBAL); 
0B98:  MOVLW  C0
0B9A:  IORWF  FF2,F
....................    ext_int_edge(1,L_to_H); 
0B9C:  BSF    FF1.5
....................    ext_int_edge(2,L_to_H); 
0B9E:  BSF    FF1.4
....................     
....................    clear_interrupt(INT_EXT1); 
0BA0:  BCF    FF0.0
....................    clear_interrupt(INT_EXT2); 
0BA2:  BCF    FF0.1
....................    clear_interrupt(int_timer0); 
0BA4:  BCF    FF2.2
....................    clear_interrupt(int_timer1); 
0BA6:  BCF    F9E.0
....................    clear_interrupt(int_timer5); 
0BA8:  BCF    FA4.0
....................     
....................    setup_qei(QEI_MODE_X4_RESET_WITH_INDX,qei_filter_enable_qea|qei_filter_enable_qeb|qei_filter_div_2,65535); 
0BAA:  MOVLW  14
0BAC:  MOVWF  FB6
0BAE:  MOVLW  31
0BB0:  MOVWF  F60
0BB2:  SETF   F65
0BB4:  SETF   F64
0BB6:  CLRF   F67
0BB8:  CLRF   F66
....................    qei_set_count(0); 
0BBA:  CLRF   F67
0BBC:  CLRF   F66
....................     
....................    //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1);      //6.5 ms overflow, 0.1us 
....................    //set_timer0(64535); 
....................     
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_4|RTCC_8_bit);      //102 us overflow, 0.4us 
0BBE:  MOVLW  C1
0BC0:  MOVWF  FD5
....................    set_timer0(5); 
0BC2:  CLRF   FD7
0BC4:  MOVLW  05
0BC6:  MOVWF  FD6
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);      //52.4 ms overflow, 0.8us 
0BC8:  MOVLW  B5
0BCA:  MOVWF  FCD
....................    set_timer1(59286); 
0BCC:  MOVLW  E7
0BCE:  MOVWF  FCF
0BD0:  MOVLW  96
0BD2:  MOVWF  FCE
....................    setup_timer_5(T5_INTERNAL|T5_DIV_BY_8);      //52.4 ms overflow, 0.8us 
0BD4:  MOVLW  19
0BD6:  MOVWF  FB7
....................    set_timer5(53035); 
0BD8:  MOVLW  CF
0BDA:  MOVWF  F88
0BDC:  MOVLW  2B
0BDE:  MOVWF  F87
0BE0:  GOTO   1520 (RETURN)
....................     
....................    //setup_spi(SPI_MASTER|SPI_L_TO_H|SPI_CLK_DIV_16); 
....................    //ss1=1; 
....................  
....................       
.................... } 
....................  
....................  
.................... #include <van-ctht.c> 
....................  
.................... ///// DEFINE VAN 
....................  
.................... #bit vantay1=porta.5 
.................... #bit vantay2=porte.0 
.................... #bit vancanh2=porta.0     
.................... #bit vancanh1=porta.1     
.................... #bit vanduoi=porta.2 
....................  
.................... ///// DEFINE CONG TAC HANH TRINH 
.................... #bit ctt2=portb.0 
.................... #bit ctc2=portb.1 
.................... #bit ctt1=portb.2 
.................... #bit ctc1=portb.3 
....................  
.................... #bit ctld=portb.4 
.................... #bit ctlt=portb.5 
....................  
.................... #bit ctsel=portb.7 
.................... #bit cten=portb.6 
....................  
.................... ///// CHUONG TRINH LOA TIN HIEU 
.................... #bit trisloa = trisd.7 
.................... #bit loa = portd.7 
.................... void beep(int8 solan,int8 time) 
.................... { 
.................... int8 i; 
.................... for (i=0; i<solan; i++) 
*
0AF8:  CLRF   x61
0AFA:  MOVF   5F,W
0AFC:  SUBWF  x61,W
0AFE:  BC    0B1A
....................    { 
....................    trisloa = 0; 
0B00:  BCF    F95.7
....................    loa = 0; 
0B02:  BCF    F83.7
....................    delay_ms(20); 
0B04:  MOVLW  14
0B06:  MOVWF  x63
0B08:  RCALL  0AD0
....................    loa = 1; 
0B0A:  BSF    F83.7
....................    delay_ms(time-20); 
0B0C:  MOVLW  14
0B0E:  SUBWF  x60,W
0B10:  MOVWF  x62
0B12:  MOVWF  x63
0B14:  RCALL  0AD0
0B16:  INCF   x61,F
0B18:  BRA    0AFA
....................    } 
0B1A:  RETURN 0
.................... } 
....................  
....................  
.................... #include <dongco.c> 
....................  
.................... ///// DEFINE CAC DONG CO 
....................  
.................... #bit br1=porte.2 
.................... #bit br2=porte.1 
.................... #bit trisbr1 = trise.2 
.................... #bit trisbr2 = trise.1 
.................... #bit dir1=portc.3 
.................... #bit dir2=portc.0 
.................... #bit trisdir1 = trisc.3 
.................... #bit trisdir2 = trisc.0 
.................... #bit pwm1=portc.2 
.................... #bit pwm2=portc.1 
.................... #bit trispwm1 = trisc.2 
.................... #bit trispwm2 = trisc.1 
....................  
.................... void dc1t(INT16 x) 
.................... { 
....................    trispwm1 = trisdir1 = trisbr1 = 0; 
*
0BE4:  BCF    F96.2
0BE6:  BCF    F94.3
0BE8:  BCF    F94.2
....................    dir1 = 1; 
0BEA:  BSF    F82.3
....................    br1 = 0; 
0BEC:  BCF    F84.2
....................    setup_timer_2(T2_DIV_BY_16,250,1);      //401 us overflow, 401 us interrupt 
0BEE:  MOVLW  00
0BF0:  IORLW  06
0BF2:  MOVWF  FCA
0BF4:  MOVLW  FA
0BF6:  MOVWF  FCB
....................    setup_ccp1 (ccp_pwm); 
0BF8:  BCF    F94.2
0BFA:  BCF    F8B.2
0BFC:  MOVLW  0C
0BFE:  MOVWF  FBD
....................    set_pwm1_duty (x); 
0C00:  MOVFF  5B,02
0C04:  MOVFF  5A,01
0C08:  RRCF   02,F
0C0A:  RRCF   01,F
0C0C:  RRCF   02,F
0C0E:  RRCF   01,F
0C10:  RRCF   02,F
0C12:  MOVFF  01,FBE
0C16:  RRCF   02,F
0C18:  RRCF   02,W
0C1A:  ANDLW  30
0C1C:  MOVWF  00
0C1E:  MOVF   FBD,W
0C20:  ANDLW  CF
0C22:  IORWF  00,W
0C24:  MOVWF  FBD
0C26:  RETURN 0
.................... } 
....................  
.................... void dc1n(INT16 x) 
.................... { 
....................    trispwm1 = trisdir1 = trisbr1 = 0; 
*
0EB6:  BCF    F96.2
0EB8:  BCF    F94.3
0EBA:  BCF    F94.2
....................    dir1 = 0; 
0EBC:  BCF    F82.3
....................    br1 = 0; 
0EBE:  BCF    F84.2
....................    setup_timer_2(T2_DIV_BY_16,250,1);      //401 us overflow, 401 us interrupt 
0EC0:  MOVLW  00
0EC2:  IORLW  06
0EC4:  MOVWF  FCA
0EC6:  MOVLW  FA
0EC8:  MOVWF  FCB
....................    setup_ccp1 (ccp_pwm); 
0ECA:  BCF    F94.2
0ECC:  BCF    F8B.2
0ECE:  MOVLW  0C
0ED0:  MOVWF  FBD
....................    set_pwm1_duty (x); 
0ED2:  MOVFF  5A,02
0ED6:  MOVFF  59,01
0EDA:  RRCF   02,F
0EDC:  RRCF   01,F
0EDE:  RRCF   02,F
0EE0:  RRCF   01,F
0EE2:  RRCF   02,F
0EE4:  MOVFF  01,FBE
0EE8:  RRCF   02,F
0EEA:  RRCF   02,W
0EEC:  ANDLW  30
0EEE:  MOVWF  00
0EF0:  MOVF   FBD,W
0EF2:  ANDLW  CF
0EF4:  IORWF  00,W
0EF6:  MOVWF  FBD
0EF8:  GOTO   111C (RETURN)
.................... } 
....................  
.................... void resetdc1() 
.................... { 
....................    trispwm1 = trisdir1 = trisbr1 = 0; 
*
01A0:  BCF    F96.2
01A2:  BCF    F94.3
01A4:  BCF    F94.2
....................    setup_timer_2(T2_DIV_BY_16,250,1);      //401 us overflow, 401 us interrupt 
01A6:  MOVLW  00
01A8:  IORLW  06
01AA:  MOVWF  FCA
01AC:  MOVLW  FA
01AE:  MOVWF  FCB
....................    setup_ccp1 (ccp_pwm); 
01B0:  BCF    F94.2
01B2:  BCF    F8B.2
01B4:  MOVLW  0C
01B6:  MOVWF  FBD
....................    set_pwm1_duty (0); 
01B8:  CLRF   FBE
....................    br1 = 1; 
01BA:  BSF    F84.2
....................    dir1 = 0; 
01BC:  BCF    F82.3
01BE:  RETURN 0
.................... } 
....................  
.................... void dc2n(INT16 x) 
.................... { 
....................    trispwm2 = trisdir2 = trisbr2 = 0; 
*
0E72:  BCF    F96.1
0E74:  BCF    F94.0
0E76:  BCF    F94.1
....................    dir2 = 1; 
0E78:  BSF    F82.0
....................    br2 = 0; 
0E7A:  BCF    F84.1
....................    setup_timer_2(T2_DIV_BY_16,250,1);      //401 us overflow, 401 us interrupt 
0E7C:  MOVLW  00
0E7E:  IORLW  06
0E80:  MOVWF  FCA
0E82:  MOVLW  FA
0E84:  MOVWF  FCB
....................    setup_ccp2 (ccp_pwm); 
0E86:  BCF    F94.1
0E88:  BCF    F8B.1
0E8A:  MOVLW  0C
0E8C:  MOVWF  FBA
....................    set_pwm2_duty (x); 
0E8E:  MOVFF  5A,02
0E92:  MOVFF  59,01
0E96:  RRCF   02,F
0E98:  RRCF   01,F
0E9A:  RRCF   02,F
0E9C:  RRCF   01,F
0E9E:  RRCF   02,F
0EA0:  MOVFF  01,FBB
0EA4:  RRCF   02,F
0EA6:  RRCF   02,W
0EA8:  ANDLW  30
0EAA:  MOVWF  00
0EAC:  MOVF   FBA,W
0EAE:  ANDLW  CF
0EB0:  IORWF  00,W
0EB2:  MOVWF  FBA
0EB4:  RETURN 0
.................... } 
....................  
.................... void dc2t(INT16 x) 
.................... { 
....................    trispwm2 = trisdir2 = trisbr2 = 0; 
*
0C28:  BCF    F96.1
0C2A:  BCF    F94.0
0C2C:  BCF    F94.1
....................    br2 = 0; 
0C2E:  BCF    F84.1
....................    dir2 = 0; 
0C30:  BCF    F82.0
....................    setup_timer_2(T2_DIV_BY_16,250,1);      //401 us overflow, 401 us interrupt 
0C32:  MOVLW  00
0C34:  IORLW  06
0C36:  MOVWF  FCA
0C38:  MOVLW  FA
0C3A:  MOVWF  FCB
....................    setup_ccp2 (ccp_pwm); 
0C3C:  BCF    F94.1
0C3E:  BCF    F8B.1
0C40:  MOVLW  0C
0C42:  MOVWF  FBA
....................    set_pwm2_duty (x); 
0C44:  MOVFF  5B,02
0C48:  MOVFF  5A,01
0C4C:  RRCF   02,F
0C4E:  RRCF   01,F
0C50:  RRCF   02,F
0C52:  RRCF   01,F
0C54:  RRCF   02,F
0C56:  MOVFF  01,FBB
0C5A:  RRCF   02,F
0C5C:  RRCF   02,W
0C5E:  ANDLW  30
0C60:  MOVWF  00
0C62:  MOVF   FBA,W
0C64:  ANDLW  CF
0C66:  IORWF  00,W
0C68:  MOVWF  FBA
0C6A:  RETURN 0
.................... } 
....................  
.................... void resetdc2() 
.................... { 
....................    trispwm2 = trisdir2 = trisbr2 = 0; 
*
01C0:  BCF    F96.1
01C2:  BCF    F94.0
01C4:  BCF    F94.1
....................    br2 = 1; 
01C6:  BSF    F84.1
....................    dir2 = 0; 
01C8:  BCF    F82.0
....................    setup_timer_2(T2_DIV_BY_16,250,1);      //401 us overflow, 401 us interrupt 
01CA:  MOVLW  00
01CC:  IORLW  06
01CE:  MOVWF  FCA
01D0:  MOVLW  FA
01D2:  MOVWF  FCB
....................    setup_ccp2 (ccp_pwm); 
01D4:  BCF    F94.1
01D6:  BCF    F8B.1
01D8:  MOVLW  0C
01DA:  MOVWF  FBA
....................    set_pwm2_duty (0); 
01DC:  CLRF   FBB
01DE:  RETURN 0
.................... } 
....................  
....................  
.................... #bit pwm3 = portd.6 
.................... #bit dir3 = portd.5 
.................... #bit trispwm3 = trisd.6 
.................... #bit trisdir3 = trisd.5 
.................... /* 
.................... void dc3t(INT16 x) 
.................... { 
.................... trispwm3=trisdir3=0; 
.................... pwm3=dir3=1; 
.................... setup_power_pwm(pwm_clock_div_4|pwm_free_run,1,0,625,0,1,0); 
.................... setup_power_pwm_pins(1,1,1,1);    
....................     
.................... set_power_pwm6_duty(2500-x); 
....................  
....................  
.................... } 
.................... void dc3n(INT16 x) 
.................... { 
.................... trispwm3=trisdir3=0; 
.................... pwm3=1; 
.................... dir3=0; 
.................... setup_power_pwm(pwm_clock_div_4|pwm_free_run,1,0,625,0,1,0); 
.................... setup_power_pwm_pins(1,1,1,1);    
....................     
.................... set_power_pwm6_duty(2500-x); 
....................  
....................  
.................... } 
.................... void resetdc3() 
.................... { 
.................... trispwm3=trisdir3=0; 
.................... pwm3=dir3=1; 
.................... setup_power_pwm(pwm_clock_div_4|pwm_free_run,1,0,625,0,1,0); 
.................... setup_power_pwm_pins(1,1,1,1);    
....................     
.................... set_power_pwm6_duty(2500); 
....................  
.................... } 
.................... */ 
....................  
....................  
.................... #include <qei_piddc.c> 
....................  
.................... ///// QEI MEM + DU LIEU QEI 
.................... signed int16 En2; 
.................... #define ChanelA PIN_C4 
.................... #define ChanelB PIN_C5 
.................... #INT_EXT1 
.................... void  EXT1_L2H_isr(void)  
.................... { 
.................... INTEDG1^=1; 
*
00C6:  CLRF   00
00C8:  BTFSC  FF1.5
00CA:  INCF   00,F
00CC:  MOVLW  01
00CE:  XORWF  00,F
00D0:  BCF    FF1.5
00D2:  BTFSC  00.0
00D4:  BSF    FF1.5
.................... if (INTEDG1) 
00D6:  BTFSS  FF1.5
00D8:  BRA    00F2
....................    { 
....................    if (input(ChanelB)) {En2--;}  
00DA:  BSF    F94.5
00DC:  BTFSS  F82.5
00DE:  BRA    00EA
00E0:  MOVF   17,W
00E2:  BTFSC  FD8.2
00E4:  DECF   18,F
00E6:  DECF   17,F
00E8:  BRA    00F0
....................    else {En2++;} 
00EA:  INCF   17,F
00EC:  BTFSC  FD8.2
00EE:  INCF   18,F
....................    } 
00F0:  BRA    0108
.................... else  
....................    {  
....................    if (input(ChanelB)) {En2++;} 
00F2:  BSF    F94.5
00F4:  BTFSS  F82.5
00F6:  BRA    0100
00F8:  INCF   17,F
00FA:  BTFSC  FD8.2
00FC:  INCF   18,F
00FE:  BRA    0108
....................    else {En2--;} 
0100:  MOVF   17,W
0102:  BTFSC  FD8.2
0104:  DECF   18,F
0106:  DECF   17,F
....................    } 
.................... } 
0108:  BCF    FF0.0
010A:  GOTO   0084
.................... #int_EXT2 
.................... void  EXT2_isr(void)  
.................... { 
.................... INTEDG2^=1; 
010E:  CLRF   00
0110:  BTFSC  FF1.4
0112:  INCF   00,F
0114:  MOVLW  01
0116:  XORWF  00,F
0118:  BCF    FF1.4
011A:  BTFSC  00.0
011C:  BSF    FF1.4
.................... if (INTEDG2) 
011E:  BTFSS  FF1.4
0120:  BRA    013A
....................    { 
....................    if (input(ChanelA)) {En2++;}  
0122:  BSF    F94.4
0124:  BTFSS  F82.4
0126:  BRA    0130
0128:  INCF   17,F
012A:  BTFSC  FD8.2
012C:  INCF   18,F
012E:  BRA    0138
....................    else {En2--;} 
0130:  MOVF   17,W
0132:  BTFSC  FD8.2
0134:  DECF   18,F
0136:  DECF   17,F
....................    } 
0138:  BRA    0150
.................... else  
....................    {  
....................    if (input(ChanelA)) {En2--;} 
013A:  BSF    F94.4
013C:  BTFSS  F82.4
013E:  BRA    014A
0140:  MOVF   17,W
0142:  BTFSC  FD8.2
0144:  DECF   18,F
0146:  DECF   17,F
0148:  BRA    0150
....................    else {En2++;} 
014A:  INCF   17,F
014C:  BTFSC  FD8.2
014E:  INCF   18,F
....................    } 
0150:  BCF    FF0.1
0152:  GOTO   0084
.................... } 
....................  
.................... /// PID DONG CO 1 ////////////////// 
.................... volatile float kp=2, ki=0.2,kd=0.7, pid1, pid2; 
.................... signed int16 realvt1, errs1=0, err1, delta1=0, epre1=0, duty1 ; 
.................... volatile unsigned int8 Ti1,Ti2; 
.................... volatile signed int16 setvt1,setvt2,vt1=600,vt2=630; 
....................  
.................... void piddc1(signed int16 setvt1, signed int16 vt1) 
....................      { 
....................      br1=0; 
*
05BC:  BCF    F84.2
....................      realvt1 =  qei_get_count();  
05BE:  MOVFF  F67,01
05C2:  MOVFF  F66,00
05C6:  MOVFF  F67,03
05CA:  MOVF   03,W
05CC:  SUBWF  01,W
05CE:  BZ    05D4
05D0:  MOVFF  F66,00
05D4:  MOVF   00,W
05D6:  MOVWF  2D
05D8:  MOVFF  03,2E
....................      err1 = setvt1 - realvt1; 
05DC:  MOVF   2D,W
05DE:  SUBWF  5F,W
05E0:  MOVWF  31
05E2:  MOVF   2E,W
05E4:  SUBWFB x60,W
05E6:  MOVWF  32
....................      if(Ti1>=2) 
05E8:  MOVF   39,W
05EA:  SUBLW  01
05EC:  BC    064C
....................      { 
....................        delta1 = err1-epre1; 
05EE:  MOVF   35,W
05F0:  SUBWF  31,W
05F2:  MOVWF  33
05F4:  MOVF   36,W
05F6:  SUBWFB 32,W
05F8:  MOVWF  34
....................        Ti1=0; 
05FA:  CLRF   39
....................        if(delta1>-10) errs1 += err1;//(err1>-20)&&(err1<20) 
05FC:  BTFSS  34.7
05FE:  BRA    0610
0600:  MOVF   34,W
0602:  SUBLW  FE
0604:  BC    0618
0606:  XORLW  FF
0608:  BNZ   0610
060A:  MOVF   33,W
060C:  SUBLW  F6
060E:  BC    0618
0610:  MOVF   31,W
0612:  ADDWF  2F,F
0614:  MOVF   32,W
0616:  ADDWFC 30,F
....................        if (errs1 > 200 ) errs1=200; 
0618:  BTFSC  30.7
061A:  BRA    062C
061C:  MOVF   30,F
061E:  BNZ   0626
0620:  MOVF   2F,W
0622:  SUBLW  C8
0624:  BC    062C
0626:  CLRF   30
0628:  MOVLW  C8
062A:  MOVWF  2F
....................        if (errs1 < -200 ) errs1=-200; 
062C:  BTFSS  30.7
062E:  BRA    0644
0630:  MOVF   30,W
0632:  SUBLW  FF
0634:  BNC   0644
0636:  BNZ   063E
0638:  MOVF   2F,W
063A:  SUBLW  37
063C:  BNC   0644
063E:  SETF   30
0640:  MOVLW  38
0642:  MOVWF  2F
....................        epre1=err1; 
0644:  MOVFF  32,36
0648:  MOVFF  31,35
....................      } 
....................    
....................      pid1 =kp*err1 + ki*errs1+kd*delta1;  
064C:  MOVFF  32,68
0650:  MOVFF  31,67
0654:  RCALL  01E0
0656:  MOVFF  1C,6A
065A:  MOVFF  1B,69
065E:  MOVFF  1A,68
0662:  MOVFF  19,67
0666:  MOVFF  03,6E
066A:  MOVFF  02,6D
066E:  MOVFF  01,6C
0672:  MOVFF  00,6B
0676:  RCALL  0228
0678:  MOVFF  03,66
067C:  MOVFF  02,65
0680:  MOVFF  01,64
0684:  MOVFF  00,63
0688:  MOVFF  30,68
068C:  MOVFF  2F,67
0690:  RCALL  01E0
0692:  MOVFF  20,6A
0696:  MOVFF  1F,69
069A:  MOVFF  1E,68
069E:  MOVFF  1D,67
06A2:  MOVFF  03,6E
06A6:  MOVFF  02,6D
06AA:  MOVFF  01,6C
06AE:  MOVFF  00,6B
06B2:  RCALL  0228
06B4:  BCF    FD8.1
06B6:  MOVFF  66,6A
06BA:  MOVFF  65,69
06BE:  MOVFF  64,68
06C2:  MOVFF  63,67
06C6:  MOVFF  03,6E
06CA:  MOVFF  02,6D
06CE:  MOVFF  01,6C
06D2:  MOVFF  00,6B
06D6:  RCALL  031A
06D8:  MOVFF  03,66
06DC:  MOVFF  02,65
06E0:  MOVFF  01,64
06E4:  MOVFF  00,63
06E8:  MOVFF  34,68
06EC:  MOVFF  33,67
06F0:  RCALL  01E0
06F2:  MOVFF  24,6A
06F6:  MOVFF  23,69
06FA:  MOVFF  22,68
06FE:  MOVFF  21,67
0702:  MOVFF  03,6E
0706:  MOVFF  02,6D
070A:  MOVFF  01,6C
070E:  MOVFF  00,6B
0712:  RCALL  0228
0714:  BCF    FD8.1
0716:  MOVFF  66,6A
071A:  MOVFF  65,69
071E:  MOVFF  64,68
0722:  MOVFF  63,67
0726:  MOVFF  03,6E
072A:  MOVFF  02,6D
072E:  MOVFF  01,6C
0732:  MOVFF  00,6B
0736:  RCALL  031A
0738:  MOVFF  03,28
073C:  MOVFF  02,27
0740:  MOVFF  01,26
0744:  MOVFF  00,25
....................      duty1=pid1;    
0748:  MOVFF  28,66
074C:  MOVFF  27,65
0750:  MOVFF  26,64
0754:  MOVFF  25,63
0758:  RCALL  0584
075A:  MOVFF  02,38
075E:  MOVFF  01,37
....................      if (duty1 > 0)   dir1 = 0; 
0762:  BTFSC  38.7
0764:  BRA    0772
0766:  MOVF   38,F
0768:  BNZ   0770
076A:  MOVF   37,W
076C:  SUBLW  00
076E:  BC    0772
0770:  BCF    F82.3
....................      if (duty1 <  0)    dir1 = 1; 
0772:  BTFSS  38.7
0774:  BRA    0778
0776:  BSF    F82.3
....................      duty1= abs(duty1); 
0778:  MOVFF  38,03
077C:  MOVF   37,W
077E:  BTFSS  38.7
0780:  BRA    0792
0782:  MOVLW  00
0784:  BSF    FD8.0
0786:  SUBFWB 37,W
0788:  MOVWF  00
078A:  MOVLW  00
078C:  SUBFWB 38,W
078E:  MOVWF  03
0790:  MOVF   00,W
0792:  MOVWF  37
0794:  MOVFF  03,38
....................      if(duty1>5) duty1+=200; 
0798:  BTFSC  38.7
079A:  BRA    07AE
079C:  MOVF   38,F
079E:  BNZ   07A6
07A0:  MOVF   37,W
07A2:  SUBLW  05
07A4:  BC    07AE
07A6:  MOVLW  C8
07A8:  ADDWF  37,F
07AA:  MOVLW  00
07AC:  ADDWFC 38,F
....................      if(duty1>vt1) duty1=vt1; 
07AE:  BTFSS  x62.7
07B0:  BRA    07B8
07B2:  BTFSS  38.7
07B4:  BRA    07CA
07B6:  BRA    07BC
07B8:  BTFSC  38.7
07BA:  BRA    07D2
07BC:  MOVF   x62,W
07BE:  SUBWF  38,W
07C0:  BNC   07D2
07C2:  BNZ   07CA
07C4:  MOVF   37,W
07C6:  SUBWF  x61,W
07C8:  BC    07D2
07CA:  MOVFF  62,38
07CE:  MOVFF  61,37
....................      set_pwm1_duty (duty1); 
07D2:  MOVFF  38,02
07D6:  MOVFF  37,01
07DA:  RRCF   02,F
07DC:  RRCF   01,F
07DE:  RRCF   02,F
07E0:  RRCF   01,F
07E2:  RRCF   02,F
07E4:  MOVFF  01,FBE
07E8:  RRCF   02,F
07EA:  RRCF   02,W
07EC:  ANDLW  30
07EE:  MOVWF  00
07F0:  MOVF   FBD,W
07F2:  ANDLW  CF
07F4:  IORWF  00,W
07F6:  MOVWF  FBD
07F8:  RETURN 0
....................      } 
....................       
.................... /// PID DONG CO 2 ////////////////// 
.................... signed int16 realvt2, errs2=0, err2, delta2=0, epre2=0, duty2 ; 
.................... void piddc2(signed int16 setvt2, signed int16 vt2) 
....................      { 
....................      br2=0; 
07FA:  BCF    F84.1
....................      realvt2 =  En2;  
07FC:  MOVFF  18,44
0800:  MOVFF  17,43
....................      err2 = setvt2 - realvt2; 
0804:  MOVF   43,W
0806:  SUBWF  5F,W
0808:  MOVWF  47
080A:  MOVF   44,W
080C:  SUBWFB x60,W
080E:  MOVWF  48
....................      if(Ti2>=2) 
0810:  MOVF   3A,W
0812:  SUBLW  01
0814:  BC    0882
....................      { 
....................        Ti2=0; 
0816:  CLRF   3A
....................        if((err2>-20)&&(err2<20)) errs2 += err2; 
0818:  BTFSS  48.7
081A:  BRA    082C
081C:  MOVF   48,W
081E:  SUBLW  FE
0820:  BC    0842
0822:  XORLW  FF
0824:  BNZ   082C
0826:  MOVF   47,W
0828:  SUBLW  EC
082A:  BC    0842
082C:  BTFSC  48.7
082E:  BRA    083A
0830:  MOVF   48,F
0832:  BNZ   0842
0834:  MOVF   47,W
0836:  SUBLW  13
0838:  BNC   0842
083A:  MOVF   47,W
083C:  ADDWF  45,F
083E:  MOVF   48,W
0840:  ADDWFC 46,F
....................        if (errs2 > 200 ) errs2=200; 
0842:  BTFSC  46.7
0844:  BRA    0856
0846:  MOVF   46,F
0848:  BNZ   0850
084A:  MOVF   45,W
084C:  SUBLW  C8
084E:  BC    0856
0850:  CLRF   46
0852:  MOVLW  C8
0854:  MOVWF  45
....................        if (errs2 < -200 ) errs2=-200; 
0856:  BTFSS  46.7
0858:  BRA    086E
085A:  MOVF   46,W
085C:  SUBLW  FF
085E:  BNC   086E
0860:  BNZ   0868
0862:  MOVF   45,W
0864:  SUBLW  37
0866:  BNC   086E
0868:  SETF   46
086A:  MOVLW  38
086C:  MOVWF  45
....................        delta2 = err2-epre2; 
086E:  MOVF   4B,W
0870:  SUBWF  47,W
0872:  MOVWF  49
0874:  MOVF   4C,W
0876:  SUBWFB 48,W
0878:  MOVWF  4A
....................        epre2=err2; 
087A:  MOVFF  48,4C
087E:  MOVFF  47,4B
....................      } 
....................    
....................      pid2 =kp*err2 + ki*errs2+kd*delta2;  
0882:  MOVFF  48,68
0886:  MOVFF  47,67
088A:  RCALL  01E0
088C:  MOVFF  1C,6A
0890:  MOVFF  1B,69
0894:  MOVFF  1A,68
0898:  MOVFF  19,67
089C:  MOVFF  03,6E
08A0:  MOVFF  02,6D
08A4:  MOVFF  01,6C
08A8:  MOVFF  00,6B
08AC:  RCALL  0228
08AE:  MOVFF  03,66
08B2:  MOVFF  02,65
08B6:  MOVFF  01,64
08BA:  MOVFF  00,63
08BE:  MOVFF  46,68
08C2:  MOVFF  45,67
08C6:  RCALL  01E0
08C8:  MOVFF  20,6A
08CC:  MOVFF  1F,69
08D0:  MOVFF  1E,68
08D4:  MOVFF  1D,67
08D8:  MOVFF  03,6E
08DC:  MOVFF  02,6D
08E0:  MOVFF  01,6C
08E4:  MOVFF  00,6B
08E8:  RCALL  0228
08EA:  BCF    FD8.1
08EC:  MOVFF  66,6A
08F0:  MOVFF  65,69
08F4:  MOVFF  64,68
08F8:  MOVFF  63,67
08FC:  MOVFF  03,6E
0900:  MOVFF  02,6D
0904:  MOVFF  01,6C
0908:  MOVFF  00,6B
090C:  RCALL  031A
090E:  MOVFF  03,66
0912:  MOVFF  02,65
0916:  MOVFF  01,64
091A:  MOVFF  00,63
091E:  MOVFF  4A,68
0922:  MOVFF  49,67
0926:  RCALL  01E0
0928:  MOVFF  24,6A
092C:  MOVFF  23,69
0930:  MOVFF  22,68
0934:  MOVFF  21,67
0938:  MOVFF  03,6E
093C:  MOVFF  02,6D
0940:  MOVFF  01,6C
0944:  MOVFF  00,6B
0948:  RCALL  0228
094A:  BCF    FD8.1
094C:  MOVFF  66,6A
0950:  MOVFF  65,69
0954:  MOVFF  64,68
0958:  MOVFF  63,67
095C:  MOVFF  03,6E
0960:  MOVFF  02,6D
0964:  MOVFF  01,6C
0968:  MOVFF  00,6B
096C:  RCALL  031A
096E:  MOVFF  03,2C
0972:  MOVFF  02,2B
0976:  MOVFF  01,2A
097A:  MOVFF  00,29
....................      duty2=pid2;     
097E:  MOVFF  2C,66
0982:  MOVFF  2B,65
0986:  MOVFF  2A,64
098A:  MOVFF  29,63
098E:  RCALL  0584
0990:  MOVFF  02,4E
0994:  MOVFF  01,4D
....................      if (duty2 > 0)   dir2 = 1; 
0998:  BTFSC  4E.7
099A:  BRA    09A8
099C:  MOVF   4E,F
099E:  BNZ   09A6
09A0:  MOVF   4D,W
09A2:  SUBLW  00
09A4:  BC    09A8
09A6:  BSF    F82.0
....................      if (duty2 <  0)    dir2 = 0; 
09A8:  BTFSS  4E.7
09AA:  BRA    09AE
09AC:  BCF    F82.0
....................      duty2= abs(duty2); 
09AE:  MOVFF  4E,03
09B2:  MOVF   4D,W
09B4:  BTFSS  4E.7
09B6:  BRA    09C8
09B8:  MOVLW  00
09BA:  BSF    FD8.0
09BC:  SUBFWB 4D,W
09BE:  MOVWF  00
09C0:  MOVLW  00
09C2:  SUBFWB 4E,W
09C4:  MOVWF  03
09C6:  MOVF   00,W
09C8:  MOVWF  4D
09CA:  MOVFF  03,4E
....................      if(duty2>5) duty2+=200; 
09CE:  BTFSC  4E.7
09D0:  BRA    09E4
09D2:  MOVF   4E,F
09D4:  BNZ   09DC
09D6:  MOVF   4D,W
09D8:  SUBLW  05
09DA:  BC    09E4
09DC:  MOVLW  C8
09DE:  ADDWF  4D,F
09E0:  MOVLW  00
09E2:  ADDWFC 4E,F
....................      if(duty2>vt2) duty2=vt2; 
09E4:  BTFSS  x62.7
09E6:  BRA    09EE
09E8:  BTFSS  4E.7
09EA:  BRA    0A00
09EC:  BRA    09F2
09EE:  BTFSC  4E.7
09F0:  BRA    0A08
09F2:  MOVF   x62,W
09F4:  SUBWF  4E,W
09F6:  BNC   0A08
09F8:  BNZ   0A00
09FA:  MOVF   4D,W
09FC:  SUBWF  x61,W
09FE:  BC    0A08
0A00:  MOVFF  62,4E
0A04:  MOVFF  61,4D
....................      set_pwm2_duty (duty2); 
0A08:  MOVFF  4E,02
0A0C:  MOVFF  4D,01
0A10:  RRCF   02,F
0A12:  RRCF   01,F
0A14:  RRCF   02,F
0A16:  RRCF   01,F
0A18:  RRCF   02,F
0A1A:  MOVFF  01,FBB
0A1E:  RRCF   02,F
0A20:  RRCF   02,W
0A22:  ANDLW  30
0A24:  MOVWF  00
0A26:  MOVF   FBA,W
0A28:  ANDLW  CF
0A2A:  IORWF  00,W
0A2C:  MOVWF  FBA
0A2E:  RETURN 0
....................      } 
....................       
....................  
....................  
....................  
.................... ///// CHUONG TRINH QUET PHIM 
.................... int8 demct=0; 
....................  
.................... ///// NGAT TIMER0 LEO THANG, SERVO 
.................... volatile char demservo=0, xungleo=100; 
.................... volatile int1 dclep=0 ; 
.................... int16 demvanduoi=0; 
.................... #int_timer0 
.................... void ngat_timer0(void)  
....................    { 
....................    demvanduoi++; 
*
0156:  INCF   53,F
0158:  BTFSC  FD8.2
015A:  INCF   54,F
....................    if (dclep==1) 
015C:  BTFSS  52.0
015E:  BRA    017C
....................    { 
....................       set_timer0(5); 
0160:  CLRF   FD7
0162:  MOVLW  05
0164:  MOVWF  FD6
....................       demservo++; 
0166:  INCF   50,F
....................       if (demservo>100) 
0168:  MOVF   50,W
016A:  SUBLW  64
016C:  BC    0172
....................          { 
....................          demservo=0; 
016E:  CLRF   50
....................          pwm3=0; 
0170:  BCF    F83.6
....................          } 
....................       if (demservo >=xungleo) pwm3=1; 
0172:  MOVF   51,W
0174:  SUBWF  50,W
0176:  BNC   017A
0178:  BSF    F83.6
....................    } 
017A:  BRA    019A
....................    else 
....................       { 
....................       set_timer0(5); 
017C:  CLRF   FD7
017E:  MOVLW  05
0180:  MOVWF  FD6
....................       demservo++; 
0182:  INCF   50,F
....................       if (demservo>=200) 
0184:  MOVF   50,W
0186:  SUBLW  C7
0188:  BC    0190
....................          { 
....................          demservo=0; 
018A:  CLRF   50
....................          output_high(pin_c7); 
018C:  BCF    F94.7
018E:  BSF    F8B.7
....................          } 
....................       if (demservo >=xungleo) output_low(pin_c7); 
0190:  MOVF   51,W
0192:  SUBWF  50,W
0194:  BNC   019A
0196:  BCF    F94.7
0198:  BCF    F8B.7
....................       } 
019A:  BCF    FF2.2
019C:  GOTO   0084
....................    }    
....................       
.................... ///// NGAT TIMER1 PID 
....................  volatile int8 chonpid; 
.................... #int_timer1 
.................... void ngat_timer1(void)  
....................    { 
....................       set_timer1(58286); 
*
0A30:  MOVLW  E3
0A32:  MOVWF  FCF
0A34:  MOVLW  AE
0A36:  MOVWF  FCE
....................       Ti1++; 
0A38:  INCF   39,F
....................       Ti2++; 
0A3A:  INCF   3A,F
....................       switch (chonpid)   
0A3C:  MOVF   55,W
0A3E:  ADDLW  FC
0A40:  BC    0AA8
0A42:  ADDLW  04
0A44:  GOTO   0AAE
....................          { 
....................           case 0 : disable_interrupts(int_timer1); resetdc1(); resetdc2(); break; 
0A48:  BCF    F9D.0
0A4A:  CALL   01A0
0A4E:  CALL   01C0
0A52:  BRA    0AA8
....................           case 1 : resetdc2(); piddc1(setvt1,vt1); break; 
0A54:  CALL   01C0
0A58:  MOVFF  3C,60
0A5C:  MOVFF  3B,5F
0A60:  MOVFF  40,62
0A64:  MOVFF  3F,61
0A68:  RCALL  05BC
0A6A:  BRA    0AA8
....................           case 2 : resetdc1(); piddc2(setvt2,vt2); break; 
0A6C:  CALL   01A0
0A70:  MOVFF  3E,60
0A74:  MOVFF  3D,5F
0A78:  MOVFF  42,62
0A7C:  MOVFF  41,61
0A80:  RCALL  07FA
0A82:  BRA    0AA8
....................           case 3 : {piddc1(setvt1,vt1); piddc2(setvt2,vt2);}  break; 
0A84:  MOVFF  3C,60
0A88:  MOVFF  3B,5F
0A8C:  MOVFF  40,62
0A90:  MOVFF  3F,61
0A94:  RCALL  05BC
0A96:  MOVFF  3E,60
0A9A:  MOVFF  3D,5F
0A9E:  MOVFF  42,62
0AA2:  MOVFF  41,61
0AA6:  RCALL  07FA
....................          } 
....................   
....................    } 
....................     
.................... ///// NGAT TIMER5 QUET PHIM  
0AA8:  BCF    F9E.0
0AAA:  GOTO   0084
.................... #int_timer5 
.................... void ngat_timer5(void)  
....................    { 
....................       set_timer5(53035); 
*
0B1C:  MOVLW  CF
0B1E:  MOVWF  F88
0B20:  MOVLW  2B
0B22:  MOVWF  F87
....................       demct++; 
0B24:  INCF   4F,F
....................       if (demct==2) { beep(1,50); } 
0B26:  MOVF   4F,W
0B28:  SUBLW  02
0B2A:  BNZ   0B36
0B2C:  MOVLW  01
0B2E:  MOVWF  5F
0B30:  MOVLW  32
0B32:  MOVWF  x60
0B34:  RCALL  0AF8
....................       if (demct==50) { beep(1,50); } 
0B36:  MOVF   4F,W
0B38:  SUBLW  32
0B3A:  BNZ   0B46
0B3C:  MOVLW  01
0B3E:  MOVWF  5F
0B40:  MOVLW  32
0B42:  MOVWF  x60
0B44:  RCALL  0AF8
....................       if (demct==100) { beep(1,50); } 
0B46:  MOVF   4F,W
0B48:  SUBLW  64
0B4A:  BNZ   0B56
0B4C:  MOVLW  01
0B4E:  MOVWF  5F
0B50:  MOVLW  32
0B52:  MOVWF  x60
0B54:  RCALL  0AF8
....................       if (demct==150) { beep(1,50); } 
0B56:  MOVF   4F,W
0B58:  SUBLW  96
0B5A:  BNZ   0B66
0B5C:  MOVLW  01
0B5E:  MOVWF  5F
0B60:  MOVLW  32
0B62:  MOVWF  x60
0B64:  RCALL  0AF8
....................       if (demct>200) {demct=0; disable_interrupts(int_timer5); } 
0B66:  MOVF   4F,W
0B68:  SUBLW  C8
0B6A:  BC    0B70
0B6C:  CLRF   4F
0B6E:  BCF    FA3.0
....................        
....................        
....................    }    
....................  
.................... ///// KHAI BAO NHIEM VU 
.................... //#include <resetall.c> 
0B70:  BCF    FA4.0
0B72:  GOTO   0084
.................... #include <resetvan.c> 
....................  
.................... ///// RESET TAT CA 
....................  
.................... void resetvan() 
.................... { 
....................  
.................... disable_interrupts(int_timer5); 
*
0C6C:  BCF    FA3.0
.................... disable_interrupts(int_timer1); 
0C6E:  BCF    F9D.0
.................... disable_interrupts(int_timer0); 
0C70:  BCF    FF2.5
.................... int8 ire=0; 
0C72:  CLRF   59
.................... delay_ms(1000); 
0C74:  MOVLW  04
0C76:  MOVWF  5A
0C78:  CLRF   16
0C7A:  BTFSC  FF2.7
0C7C:  BSF    16.7
0C7E:  BCF    FF2.7
0C80:  MOVLW  FA
0C82:  MOVWF  x63
0C84:  RCALL  0AD0
0C86:  BTFSC  16.7
0C88:  BSF    FF2.7
0C8A:  DECFSZ 5A,F
0C8C:  BRA    0C78
0C8E:  CLRF   16
0C90:  BTFSC  FF2.7
0C92:  BSF    16.7
0C94:  BCF    FF2.7
.................... beep(1,100); 
0C96:  MOVLW  01
0C98:  MOVWF  5F
0C9A:  MOVLW  64
0C9C:  MOVWF  x60
0C9E:  RCALL  0AF8
0CA0:  BTFSC  16.7
0CA2:  BSF    FF2.7
....................  
.................... for (ire=0; ire<80; ire++) 
0CA4:  CLRF   59
0CA6:  MOVF   59,W
0CA8:  SUBLW  4F
0CAA:  BNC   0CEC
....................    { 
....................    if (ctsel==0) {vancanh1=vancanh2=0; delay_ms(1000); vantay1=vantay2=0; ire=100; } 
0CAC:  BTFSC  F81.7
0CAE:  BRA    0CD6
0CB0:  BCF    F80.0
0CB2:  BCF    F80.1
0CB4:  MOVLW  04
0CB6:  MOVWF  5A
0CB8:  CLRF   16
0CBA:  BTFSC  FF2.7
0CBC:  BSF    16.7
0CBE:  BCF    FF2.7
0CC0:  MOVLW  FA
0CC2:  MOVWF  x63
0CC4:  RCALL  0AD0
0CC6:  BTFSC  16.7
0CC8:  BSF    FF2.7
0CCA:  DECFSZ 5A,F
0CCC:  BRA    0CB8
0CCE:  BCF    F84.0
0CD0:  BCF    F80.5
0CD2:  MOVLW  64
0CD4:  MOVWF  59
0CD6:  CLRF   16
0CD8:  BTFSC  FF2.7
0CDA:  BSF    16.7
0CDC:  BCF    FF2.7
....................    delay_ms(10); 
0CDE:  MOVLW  0A
0CE0:  MOVWF  x63
0CE2:  RCALL  0AD0
0CE4:  BTFSC  16.7
0CE6:  BSF    FF2.7
0CE8:  INCF   59,F
0CEA:  BRA    0CA6
....................    } 
.................... delay_ms(500);    
0CEC:  MOVLW  02
0CEE:  MOVWF  5A
0CF0:  CLRF   16
0CF2:  BTFSC  FF2.7
0CF4:  BSF    16.7
0CF6:  BCF    FF2.7
0CF8:  MOVLW  FA
0CFA:  MOVWF  x63
0CFC:  RCALL  0AD0
0CFE:  BTFSC  16.7
0D00:  BSF    FF2.7
0D02:  DECFSZ 5A,F
0D04:  BRA    0CF0
.................... while (ctc1==1) { dc1t(430); } 
0D06:  BTFSS  F81.3
0D08:  BRA    0D16
0D0A:  MOVLW  01
0D0C:  MOVWF  5B
0D0E:  MOVLW  AE
0D10:  MOVWF  5A
0D12:  RCALL  0BE4
0D14:  BRA    0D06
.................... resetdc1(); 
0D16:  CALL   01A0
.................... while (ctc2==1) { dc2t(450); } 
0D1A:  BTFSS  F81.1
0D1C:  BRA    0D2A
0D1E:  MOVLW  01
0D20:  MOVWF  5B
0D22:  MOVLW  C2
0D24:  MOVWF  5A
0D26:  RCALL  0C28
0D28:  BRA    0D1A
.................... resetdc2(); 
0D2A:  CALL   01C0
0D2E:  CLRF   16
0D30:  BTFSC  FF2.7
0D32:  BSF    16.7
0D34:  BCF    FF2.7
.................... beep(1,100); 
0D36:  MOVLW  01
0D38:  MOVWF  5F
0D3A:  MOVLW  64
0D3C:  MOVWF  x60
0D3E:  RCALL  0AF8
0D40:  BTFSC  16.7
0D42:  BSF    FF2.7
.................... vantay1=vantay2=vancanh1=vancanh2=vanduoi=1; 
0D44:  BSF    F80.2
0D46:  BSF    F80.0
0D48:  BSF    F80.1
0D4A:  BSF    F84.0
0D4C:  BSF    F80.5
....................  
.................... trispwm3=trisdir3=0; 
0D4E:  BCF    F95.5
0D50:  BCF    F95.6
.................... pwm3=dir3=1; 
0D52:  BSF    F83.5
0D54:  BSF    F83.6
.................... enable_interrupts(int_timer0); 
0D56:  BSF    FF2.5
.................... dclep=1; 
0D58:  BSF    52.0
.................... while (ctlt==1) 
0D5A:  BTFSS  F81.5
0D5C:  BRA    0D66
....................    { 
....................    dir3=1; 
0D5E:  BSF    F83.5
....................    xungleo=30; 
0D60:  MOVLW  1E
0D62:  MOVWF  51
0D64:  BRA    0D5A
....................    } 
....................    xungleo=0;   
0D66:  CLRF   51
....................    delay_ms(300); 
0D68:  MOVLW  02
0D6A:  MOVWF  5A
0D6C:  CLRF   16
0D6E:  BTFSC  FF2.7
0D70:  BSF    16.7
0D72:  BCF    FF2.7
0D74:  MOVLW  96
0D76:  MOVWF  x63
0D78:  RCALL  0AD0
0D7A:  BTFSC  16.7
0D7C:  BSF    FF2.7
0D7E:  DECFSZ 5A,F
0D80:  BRA    0D6C
.................... while (ctlt==0) 
0D82:  BTFSC  F81.5
0D84:  BRA    0D8E
....................    { 
....................    dir3=0;  
0D86:  BCF    F83.5
....................    xungleo=50; 
0D88:  MOVLW  32
0D8A:  MOVWF  51
0D8C:  BRA    0D82
....................    } 
....................    xungleo=0; 
0D8E:  CLRF   51
0D90:  CLRF   16
0D92:  BTFSC  FF2.7
0D94:  BSF    16.7
0D96:  BCF    FF2.7
....................    beep(1,100);    
0D98:  MOVLW  01
0D9A:  MOVWF  5F
0D9C:  MOVLW  64
0D9E:  MOVWF  x60
0DA0:  RCALL  0AF8
0DA2:  BTFSC  16.7
0DA4:  BSF    FF2.7
.................... disable_interrupts(int_timer0); 
0DA6:  BCF    FF2.5
.................... pwm3=1; 
0DA8:  BSF    F83.6
.................... dir3=1; 
0DAA:  BSF    F83.5
0DAC:  CLRF   16
0DAE:  BTFSC  FF2.7
0DB0:  BSF    16.7
0DB2:  BCF    FF2.7
.................... beep(1,100); 
0DB4:  MOVLW  01
0DB6:  MOVWF  5F
0DB8:  MOVLW  64
0DBA:  MOVWF  x60
0DBC:  RCALL  0AF8
0DBE:  BTFSC  16.7
0DC0:  BSF    FF2.7
....................  
.................... qei_set_count(0); 
0DC2:  CLRF   F67
0DC4:  CLRF   F66
.................... En2=0; 
0DC6:  CLRF   18
0DC8:  CLRF   17
.................... Ti1=0; 
0DCA:  CLRF   39
.................... Ti2=0; 
0DCC:  CLRF   3A
.................... setvt1=0; 
0DCE:  CLRF   3C
0DD0:  CLRF   3B
.................... setvt2=0; 
0DD2:  CLRF   3E
0DD4:  CLRF   3D
.................... chonpid=0; 
0DD6:  CLRF   55
....................  
.................... demct=200; 
0DD8:  MOVLW  C8
0DDA:  MOVWF  4F
.................... enable_interrupts(int_timer5); 
0DDC:  BSF    FA3.0
0DDE:  RETURN 0
....................  
.................... } 
....................  
....................  
....................  
.................... #include <nhiemvu2.c> 
....................  
.................... ///// NHIEM VU 2 
....................  
.................... void nhiemvu2() 
.................... { 
....................  
.................... disable_interrupts(int_timer5); 
0DE0:  BCF    FA3.0
....................  
.................... delay_ms(1000); 
0DE2:  MOVLW  04
0DE4:  MOVWF  58
0DE6:  CLRF   16
0DE8:  BTFSC  FF2.7
0DEA:  BSF    16.7
0DEC:  BCF    FF2.7
0DEE:  MOVLW  FA
0DF0:  MOVWF  x63
0DF2:  RCALL  0AD0
0DF4:  BTFSC  16.7
0DF6:  BSF    FF2.7
0DF8:  DECFSZ 58,F
0DFA:  BRA    0DE6
0DFC:  CLRF   16
0DFE:  BTFSC  FF2.7
0E00:  BSF    16.7
0E02:  BCF    FF2.7
.................... beep(2,100); 
0E04:  MOVLW  02
0E06:  MOVWF  5F
0E08:  MOVLW  64
0E0A:  MOVWF  x60
0E0C:  RCALL  0AF8
0E0E:  BTFSC  16.7
0E10:  BSF    FF2.7
....................  
.................... while(cten==1){} 
0E12:  BTFSC  F81.6
0E14:  BRA    0E12
0E16:  CLRF   16
0E18:  BTFSC  FF2.7
0E1A:  BSF    16.7
0E1C:  BCF    FF2.7
.................... delay_ms(100); 
0E1E:  MOVLW  64
0E20:  MOVWF  x63
0E22:  RCALL  0AD0
0E24:  BTFSC  16.7
0E26:  BSF    FF2.7
....................  
.................... if(cten==0) { vanduoi=0; } 
0E28:  BTFSC  F81.6
0E2A:  BRA    0E2E
0E2C:  BCF    F80.2
0E2E:  CLRF   16
0E30:  BTFSC  FF2.7
0E32:  BSF    16.7
0E34:  BCF    FF2.7
.................... delay_ms(100); 
0E36:  MOVLW  64
0E38:  MOVWF  x63
0E3A:  RCALL  0AD0
0E3C:  BTFSC  16.7
0E3E:  BSF    FF2.7
....................  
.................... while(cten==0) {} 
0E40:  BTFSS  F81.6
0E42:  BRA    0E40
....................  
.................... delay_ms(2000); 
0E44:  MOVLW  08
0E46:  MOVWF  58
0E48:  CLRF   16
0E4A:  BTFSC  FF2.7
0E4C:  BSF    16.7
0E4E:  BCF    FF2.7
0E50:  MOVLW  FA
0E52:  MOVWF  x63
0E54:  RCALL  0AD0
0E56:  BTFSC  16.7
0E58:  BSF    FF2.7
0E5A:  DECFSZ 58,F
0E5C:  BRA    0E48
....................  
.................... while(cten==1) {} 
0E5E:  BTFSC  F81.6
0E60:  BRA    0E5E
....................  
.................... if(cten==0) { vanduoi=1; } 
0E62:  BTFSC  F81.6
0E64:  BRA    0E68
0E66:  BSF    F80.2
....................  
.................... demct=200; 
0E68:  MOVLW  C8
0E6A:  MOVWF  4F
.................... enable_interrupts(int_timer5); 
0E6C:  BSF    FA3.0
0E6E:  GOTO   15A6 (RETURN)
....................  
.................... } 
....................  
....................  
.................... #include <nhiemvu3.c> 
....................  
.................... ///// NHIEM VU 3X 
....................  
.................... void nhiemvu3xnew() 
.................... { 
.................... signed int16 temp1, temp2; 
.................... disable_interrupts(int_timer5); 
.................... demct=0;  
.................... delay_ms(2000); 
.................... beep(3,100); 
.................... setup_timer_2 (t2_div_by_1, 249, 1); 
.................... setup_ccp1 (ccp_pwm); 
.................... setup_ccp2 (ccp_pwm); 
.................... enable_interrupts(int_timer1); 
.................... vantay1=vantay2=vancanh1=vancanh2=vanduoi=1; 
.................... vancanh1=vancanh2=0; 
.................... setvt1=280; 
.................... setvt2=230; 
.................... vantay1=vantay2=0; 
....................  
.................... while (ctsel==1) {} 
....................  
.................... if (ctsel==0) { vantay2=1; beep(1,100); } 
.................... disable_interrupts(int_timer1); 
.................... resetdc1(); 
.................... resetdc2(); 
....................  
.................... while (cten==1) {} 
....................  
.................... if (cten==0) { dc2n(700); } 
....................  
.................... while (ctt1==1) { if ( En2>285 ) {resetdc2(); beep(10,100);} } 
....................  
.................... if (ctt1==0) {vantay1=1; resetdc2(); beep(1,100); } 
....................  
.................... delay_ms(1000); 
.................... temp2=En2; 
.................... vantay2=0; 
.................... enable_interrupts(int_timer1); 
.................... setvt2=temp2; 
.................... setvt1=250; 
.................... while ( qei_get_count() >252) {} 
....................  
.................... setvt1=50; 
.................... setvt2=0; 
.................... while ( qei_get_count() >50) {} 
....................  
.................... disable_interrupts(int_timer1); 
.................... resetdc1(); 
.................... resetdc2(); 
.................... dc1t(700); 
.................... while (ctt2==1) { if ( qei_get_count() <-5 ) {resetdc1(); beep(10,100);} } 
....................  
.................... if (ctt2==0) {vantay2=1;resetdc1(); beep(1,100); } 
....................  
.................... delay_ms(1000); 
.................... temp1=qei_get_count(); 
.................... vantay1=0; 
.................... enable_interrupts(int_timer1); 
.................... setvt1=temp1; 
.................... setvt2=30; 
.................... while (En2 <30) {} 
....................  
.................... setvt1=280; 
.................... setvt2=250; 
....................  
.................... while (En2<250) {} 
.................... disable_interrupts(int_timer1); 
.................... resetdc1(); 
.................... resetdc2(); 
.................... dc2n(700); 
....................  
.................... while (ctt1==1) { if ( En2>295 ) {resetdc2(); beep(10,100);}} 
....................  
.................... if (ctt1==0) {vantay1=1;resetdc2(); beep(1,100); }  
....................  
.................... delay_ms(1000); 
.................... temp2=En2; 
.................... vantay2=0; 
.................... enable_interrupts(int_timer1); 
.................... setvt2=temp2; 
.................... setvt1=240; 
.................... while ( qei_get_count() > 242) {} 
.................... disable_interrupts(int_timer1); 
.................... resetdc1(); 
.................... resetdc2(); 
....................  
.................... while (cten==1) {} 
....................  
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... ///// NHIEM VU 3 
.................... /* 
.................... void nhiemvu3() 
.................... { 
.................... int8 inv3=0;  
.................... disable_interrupts(int_timer5); 
.................... disable_interrupts(int_timer0); 
.................... demct=0;  
.................... delay_ms(1000); 
.................... beep(3,100); 
.................... setup_timer_2(T2_DIV_BY_16,250,1);      //401 us overflow, 401 us interrupt 
.................... setup_ccp1 (ccp_pwm); 
.................... setup_ccp2 (ccp_pwm); 
....................  
.................... vantay1=vantay2=vancanh1=vancanh2=vanduoi=1; 
.................... vancanh1=vancanh2=0; 
....................  
.................... chonpid=3; 
.................... enable_interrupts(int_timer1); 
.................... setvt2=280; 
.................... setvt1=220; 
.................... vantay1=vantay2=0; 
....................  
.................... while (ctsel==1) {} 
.................... if (ctsel==0) { vantay2=1; beep(1,100); } 
.................... while (cten==1) {} 
.................... chonpid=1;  
.................... if (cten==0) { setvt1=270; } 
.................... while (qei_get_count() <270) {}; 
.................... chonpid=0; 
....................  
.................... dc1n(700); 
.................... for ( inv3=0; inv3 < 4 ; inv3++) 
.................... { 
.................... while (ctt2==1) { if ( qei_get_count()>285 ) {resetdc1(); beep(10,100);} } 
.................... if (ctt2==0) {vantay2=1; resetdc1(); beep(1,100); } 
.................... if (ctt2==1) {vantay2=0; dc1t(500); delay_ms(800); dc1n(900); } 
.................... } 
.................... vantay2=1; resetdc1(); 
....................  
....................  
.................... delay_ms(1000); 
.................... vantay1=0; 
.................... chonpid=2; 
.................... setvt2=250; 
.................... enable_interrupts(int_timer1); 
.................... while ( En2 >250) {} 
....................  
.................... setvt2=10; 
.................... setvt1=0; 
.................... chonpid=3; 
.................... while ( En2 >11) {} 
.................... chonpid=0; 
....................  
.................... dc2t(700); 
.................... for (inv3=0; inv3 < 4; inv3++) 
....................    { 
....................    while (ctt1==1) { if ( En2 <-5 ) {resetdc2(); beep(10,100);} } 
....................    if (ctt1==0) {vantay1=1;resetdc2(); beep(1,100); } 
....................    if (ctt1==1) {vantay1=0; dc2n(500); delay_ms(800); dc2t(900); } 
....................    } 
.................... vantay1=1;resetdc1();  
....................  
....................  
.................... delay_ms(1000); 
.................... vantay2=0; 
.................... chonpid=1; 
.................... setvt1=30; 
.................... enable_interrupts(int_timer1); 
.................... while (qei_get_count() < 30) {} 
....................  
.................... setvt1=270; 
.................... setvt2=280; 
.................... chonpid=3; 
.................... while (qei_get_count() < 270) {} 
.................... chonpid=0; 
....................  
.................... dc1n(700); 
.................... for ( inv3=0; inv3 < 4 ; inv3++) 
.................... { 
.................... while (ctt1==1) { if ( qei_get_count() >285 ) {resetdc1(); beep(10,100);} } 
.................... if (ctt1==0) {vantay2=1; resetdc1(); beep(1,100); } 
.................... if (ctt1==1) {vantay2=0; dc1t(500); delay_ms(1000); dc1n(900); } 
.................... } 
.................... vantay2=1; resetdc2(); 
....................  
....................  
.................... delay_ms(1000); 
.................... vantay2=0; 
.................... chonpid=2; 
.................... setvt2=220; 
.................... enable_interrupts(int_timer1); 
.................... while ( En2 > 220) {} 
.................... chonpid=0; 
....................  
.................... while (cten==1) {} 
.................... if (cten==0) {delay_ms(100);} 
.................... while (cten==1) {} 
.................... while (ctsel==1) {} 
....................  
.................... if (ctsel==0) { vantay1=0; delay_ms(400); } 
.................... while (ctsel==1) {} 
.................... if (ctsel==0) { delay_ms(400);  resetvan(); } 
....................  
.................... enable_interrupts(int_timer5); 
....................  
.................... } 
.................... */ 
....................  
.................... #include <nhiemvu3x.c> 
....................  
.................... ///// NHIEM VU 3X 
....................  
.................... void nhiemvu3x() 
*
0EFC:  CLRF   58
.................... { 
.................... int8 inv3x=0; 
....................  
.................... disable_interrupts(int_timer5); 
0EFE:  BCF    FA3.0
.................... disable_interrupts(int_timer0); 
0F00:  BCF    FF2.5
....................  
.................... delay_ms(1000); 
0F02:  MOVLW  04
0F04:  MOVWF  59
0F06:  CLRF   16
0F08:  BTFSC  FF2.7
0F0A:  BSF    16.7
0F0C:  BCF    FF2.7
0F0E:  MOVLW  FA
0F10:  MOVWF  x63
0F12:  RCALL  0AD0
0F14:  BTFSC  16.7
0F16:  BSF    FF2.7
0F18:  DECFSZ 59,F
0F1A:  BRA    0F06
0F1C:  CLRF   16
0F1E:  BTFSC  FF2.7
0F20:  BSF    16.7
0F22:  BCF    FF2.7
.................... beep(3,100); 
0F24:  MOVLW  03
0F26:  MOVWF  5F
0F28:  MOVLW  64
0F2A:  MOVWF  x60
0F2C:  RCALL  0AF8
0F2E:  BTFSC  16.7
0F30:  BSF    FF2.7
.................... setup_timer_2(T2_DIV_BY_16,250,1);      //401 us overflow, 401 us interrupt 
0F32:  MOVLW  00
0F34:  IORLW  06
0F36:  MOVWF  FCA
0F38:  MOVLW  FA
0F3A:  MOVWF  FCB
.................... setup_ccp1 (ccp_pwm); 
0F3C:  BCF    F94.2
0F3E:  BCF    F8B.2
0F40:  MOVLW  0C
0F42:  MOVWF  FBD
.................... setup_ccp2 (ccp_pwm); 
0F44:  BCF    F94.1
0F46:  BCF    F8B.1
0F48:  MOVWF  FBA
....................  
.................... vantay1=vantay2=vancanh1=vancanh2=vanduoi=1; 
0F4A:  BSF    F80.2
0F4C:  BSF    F80.0
0F4E:  BSF    F80.1
0F50:  BSF    F84.0
0F52:  BSF    F80.5
.................... vancanh1=vancanh2=0; 
0F54:  BCF    F80.0
0F56:  BCF    F80.1
....................  
.................... chonpid=3; 
0F58:  MOVLW  03
0F5A:  MOVWF  55
.................... enable_interrupts(int_timer1); 
0F5C:  BSF    F9D.0
....................  
.................... setvt2=240; 
0F5E:  CLRF   3E
0F60:  MOVLW  F0
0F62:  MOVWF  3D
.................... setvt1=280; 
0F64:  MOVLW  01
0F66:  MOVWF  3C
0F68:  MOVLW  18
0F6A:  MOVWF  3B
....................  
.................... vantay1=vantay2=0; 
0F6C:  BCF    F84.0
0F6E:  BCF    F80.5
....................  
.................... while (ctsel==1) {} 
0F70:  BTFSC  F81.7
0F72:  BRA    0F70
....................  
.................... vantay2=1; beep(1,100);  
0F74:  BSF    F84.0
0F76:  CLRF   16
0F78:  BTFSC  FF2.7
0F7A:  BSF    16.7
0F7C:  BCF    FF2.7
0F7E:  MOVLW  01
0F80:  MOVWF  5F
0F82:  MOVLW  64
0F84:  MOVWF  x60
0F86:  RCALL  0AF8
0F88:  BTFSC  16.7
0F8A:  BSF    FF2.7
....................  
.................... while (cten==1) {} 
0F8C:  BTFSC  F81.6
0F8E:  BRA    0F8C
.................... chonpid=2;  
0F90:  MOVLW  02
0F92:  MOVWF  55
.................... setvt2=270; 
0F94:  MOVLW  01
0F96:  MOVWF  3E
0F98:  MOVLW  0E
0F9A:  MOVWF  3D
.................... while (En2 <270) {}; 
0F9C:  BTFSC  18.7
0F9E:  BRA    0FAE
0FA0:  MOVF   18,W
0FA2:  SUBLW  01
0FA4:  BNC   0FB0
0FA6:  BNZ   0FAE
0FA8:  MOVF   17,W
0FAA:  SUBLW  0D
0FAC:  BTFSC  FD8.0
0FAE:  BRA    0F9C
.................... chonpid=0; 
0FB0:  CLRF   55
....................  
.................... dc2n(700); 
0FB2:  MOVLW  02
0FB4:  MOVWF  5A
0FB6:  MOVLW  BC
0FB8:  MOVWF  59
0FBA:  RCALL  0E72
.................... for ( inv3x=0; inv3x < 4 ; inv3x++) 
0FBC:  CLRF   58
0FBE:  MOVF   58,W
0FC0:  SUBLW  03
0FC2:  BNC   1032
.................... { 
.................... while (ctt1==1) { /*if ( En2>285 ) {resetdc2(); beep(10,100);}*/ } 
0FC4:  BTFSC  F81.2
0FC6:  BRA    0FC4
.................... if (ctt1==0) {vantay1=1; resetdc2(); beep(1,100); } 
0FC8:  BTFSC  F81.2
0FCA:  BRA    0FE8
0FCC:  BSF    F80.5
0FCE:  CALL   01C0
0FD2:  CLRF   16
0FD4:  BTFSC  FF2.7
0FD6:  BSF    16.7
0FD8:  BCF    FF2.7
0FDA:  MOVLW  01
0FDC:  MOVWF  5F
0FDE:  MOVLW  64
0FE0:  MOVWF  x60
0FE2:  RCALL  0AF8
0FE4:  BTFSC  16.7
0FE6:  BSF    FF2.7
0FE8:  CLRF   16
0FEA:  BTFSC  FF2.7
0FEC:  BSF    16.7
0FEE:  BCF    FF2.7
.................... delay_ms(30); 
0FF0:  MOVLW  1E
0FF2:  MOVWF  x63
0FF4:  RCALL  0AD0
0FF6:  BTFSC  16.7
0FF8:  BSF    FF2.7
.................... if (ctt1==1) {vantay1=0; dc2t(500); delay_ms(800); dc2n(900); } 
0FFA:  BTFSS  F81.2
0FFC:  BRA    102E
0FFE:  BCF    F80.5
1000:  MOVLW  01
1002:  MOVWF  5B
1004:  MOVLW  F4
1006:  MOVWF  5A
1008:  RCALL  0C28
100A:  MOVLW  04
100C:  MOVWF  59
100E:  CLRF   16
1010:  BTFSC  FF2.7
1012:  BSF    16.7
1014:  BCF    FF2.7
1016:  MOVLW  C8
1018:  MOVWF  x63
101A:  RCALL  0AD0
101C:  BTFSC  16.7
101E:  BSF    FF2.7
1020:  DECFSZ 59,F
1022:  BRA    100E
1024:  MOVLW  03
1026:  MOVWF  5A
1028:  MOVLW  84
102A:  MOVWF  59
102C:  RCALL  0E72
102E:  INCF   58,F
1030:  BRA    0FBE
.................... } 
.................... vantay1=1; resetdc2(); 
1032:  BSF    F80.5
1034:  CALL   01C0
....................  
....................  
.................... delay_ms(1000); 
1038:  MOVLW  04
103A:  MOVWF  59
103C:  CLRF   16
103E:  BTFSC  FF2.7
1040:  BSF    16.7
1042:  BCF    FF2.7
1044:  MOVLW  FA
1046:  MOVWF  x63
1048:  RCALL  0AD0
104A:  BTFSC  16.7
104C:  BSF    FF2.7
104E:  DECFSZ 59,F
1050:  BRA    103C
.................... vantay2=0; 
1052:  BCF    F84.0
.................... chonpid=1; 
1054:  MOVLW  01
1056:  MOVWF  55
.................... setvt1=250; 
1058:  CLRF   3C
105A:  MOVLW  FA
105C:  MOVWF  3B
.................... enable_interrupts(int_timer1); 
105E:  BSF    F9D.0
.................... while ( qei_get_count() >250) {} 
1060:  MOVFF  F67,01
1064:  MOVFF  F66,00
1068:  MOVFF  F67,03
106C:  MOVF   03,W
106E:  SUBWF  01,W
1070:  BZ    1076
1072:  MOVFF  F66,00
1076:  MOVF   00,W
1078:  MOVWF  59
107A:  MOVFF  03,5A
107E:  MOVF   5A,F
1080:  BNZ   1088
1082:  MOVF   59,W
1084:  SUBLW  FA
1086:  BC    108A
1088:  BRA    1060
....................  
.................... setvt1=10; 
108A:  CLRF   3C
108C:  MOVLW  0A
108E:  MOVWF  3B
.................... setvt2=0; 
1090:  CLRF   3E
1092:  CLRF   3D
.................... chonpid=3; 
1094:  MOVLW  03
1096:  MOVWF  55
.................... while ( qei_get_count() >10) {} 
1098:  MOVFF  F67,01
109C:  MOVFF  F66,00
10A0:  MOVFF  F67,03
10A4:  MOVF   03,W
10A6:  SUBWF  01,W
10A8:  BZ    10AE
10AA:  MOVFF  F66,00
10AE:  MOVF   00,W
10B0:  MOVWF  59
10B2:  MOVFF  03,5A
10B6:  MOVF   5A,F
10B8:  BNZ   10C0
10BA:  MOVF   59,W
10BC:  SUBLW  0A
10BE:  BC    10C2
10C0:  BRA    1098
.................... chonpid=0; 
10C2:  CLRF   55
....................  
.................... dc1t(700); 
10C4:  MOVLW  02
10C6:  MOVWF  5B
10C8:  MOVLW  BC
10CA:  MOVWF  5A
10CC:  RCALL  0BE4
.................... for (inv3x=0; inv3x <4; inv3x++) 
10CE:  CLRF   58
10D0:  MOVF   58,W
10D2:  SUBLW  03
10D4:  BNC   1144
....................    { 
....................    while (ctt2==1) {/* if ( qei_get_count() <-5 ) {resetdc1(); beep(10,100);} */} 
10D6:  BTFSC  F81.0
10D8:  BRA    10D6
....................    if (ctt2==0) {vantay2=1;resetdc1(); beep(1,100); } 
10DA:  BTFSC  F81.0
10DC:  BRA    10FA
10DE:  BSF    F84.0
10E0:  CALL   01A0
10E4:  CLRF   16
10E6:  BTFSC  FF2.7
10E8:  BSF    16.7
10EA:  BCF    FF2.7
10EC:  MOVLW  01
10EE:  MOVWF  5F
10F0:  MOVLW  64
10F2:  MOVWF  x60
10F4:  RCALL  0AF8
10F6:  BTFSC  16.7
10F8:  BSF    FF2.7
10FA:  CLRF   16
10FC:  BTFSC  FF2.7
10FE:  BSF    16.7
1100:  BCF    FF2.7
....................    delay_ms(30); 
1102:  MOVLW  1E
1104:  MOVWF  x63
1106:  RCALL  0AD0
1108:  BTFSC  16.7
110A:  BSF    FF2.7
....................    if (ctt2==1) {vantay2=0; dc1n(500); delay_ms(800); dc1t(900); } 
110C:  BTFSS  F81.0
110E:  BRA    1140
1110:  BCF    F84.0
1112:  MOVLW  01
1114:  MOVWF  5A
1116:  MOVLW  F4
1118:  MOVWF  59
111A:  BRA    0EB6
111C:  MOVLW  04
111E:  MOVWF  59
1120:  CLRF   16
1122:  BTFSC  FF2.7
1124:  BSF    16.7
1126:  BCF    FF2.7
1128:  MOVLW  C8
112A:  MOVWF  x63
112C:  RCALL  0AD0
112E:  BTFSC  16.7
1130:  BSF    FF2.7
1132:  DECFSZ 59,F
1134:  BRA    1120
1136:  MOVLW  03
1138:  MOVWF  5B
113A:  MOVLW  84
113C:  MOVWF  5A
113E:  RCALL  0BE4
1140:  INCF   58,F
1142:  BRA    10D0
....................    } 
.................... vantay2=1;resetdc1();  
1144:  BSF    F84.0
1146:  CALL   01A0
....................  
....................  
.................... delay_ms(1000); 
114A:  MOVLW  04
114C:  MOVWF  59
114E:  CLRF   16
1150:  BTFSC  FF2.7
1152:  BSF    16.7
1154:  BCF    FF2.7
1156:  MOVLW  FA
1158:  MOVWF  x63
115A:  RCALL  0AD0
115C:  BTFSC  16.7
115E:  BSF    FF2.7
1160:  DECFSZ 59,F
1162:  BRA    114E
.................... vantay1=0; 
1164:  BCF    F80.5
.................... chonpid=2; 
1166:  MOVLW  02
1168:  MOVWF  55
.................... setvt2=30; 
116A:  CLRF   3E
116C:  MOVLW  1E
116E:  MOVWF  3D
.................... enable_interrupts(int_timer1); 
1170:  BSF    F9D.0
.................... while (En2 < 30) {} 
1172:  BTFSC  18.7
1174:  BRA    1180
1176:  MOVF   18,F
1178:  BNZ   1182
117A:  MOVF   17,W
117C:  SUBLW  1D
117E:  BTFSC  FD8.0
1180:  BRA    1172
.................... setvt1=280; 
1182:  MOVLW  01
1184:  MOVWF  3C
1186:  MOVLW  18
1188:  MOVWF  3B
.................... setvt2=270; 
118A:  MOVLW  01
118C:  MOVWF  3E
118E:  MOVLW  0E
1190:  MOVWF  3D
.................... chonpid=3; 
1192:  MOVLW  03
1194:  MOVWF  55
.................... while (En2<270) {} 
1196:  BTFSC  18.7
1198:  BRA    11A8
119A:  MOVF   18,W
119C:  SUBLW  01
119E:  BNC   11AA
11A0:  BNZ   11A8
11A2:  MOVF   17,W
11A4:  SUBLW  0D
11A6:  BTFSC  FD8.0
11A8:  BRA    1196
.................... chonpid=0; 
11AA:  CLRF   55
....................  
.................... dc2n(700); 
11AC:  MOVLW  02
11AE:  MOVWF  5A
11B0:  MOVLW  BC
11B2:  MOVWF  59
11B4:  RCALL  0E72
.................... for ( inv3x=0; inv3x < 4 ; inv3x++) 
11B6:  CLRF   58
11B8:  MOVF   58,W
11BA:  SUBLW  03
11BC:  BNC   122C
.................... { 
.................... while (ctt1==1) { /*if ( En2>285 ) {resetdc2(); beep(10,100);}*/ } 
11BE:  BTFSC  F81.2
11C0:  BRA    11BE
.................... if (ctt1==0) {vantay1=1; resetdc2(); beep(1,100); } 
11C2:  BTFSC  F81.2
11C4:  BRA    11E2
11C6:  BSF    F80.5
11C8:  CALL   01C0
11CC:  CLRF   16
11CE:  BTFSC  FF2.7
11D0:  BSF    16.7
11D2:  BCF    FF2.7
11D4:  MOVLW  01
11D6:  MOVWF  5F
11D8:  MOVLW  64
11DA:  MOVWF  x60
11DC:  RCALL  0AF8
11DE:  BTFSC  16.7
11E0:  BSF    FF2.7
11E2:  CLRF   16
11E4:  BTFSC  FF2.7
11E6:  BSF    16.7
11E8:  BCF    FF2.7
.................... delay_ms(30); 
11EA:  MOVLW  1E
11EC:  MOVWF  x63
11EE:  RCALL  0AD0
11F0:  BTFSC  16.7
11F2:  BSF    FF2.7
.................... if (ctt1==1) {vantay1=0; dc2t(500); delay_ms(800); dc2n(900); } 
11F4:  BTFSS  F81.2
11F6:  BRA    1228
11F8:  BCF    F80.5
11FA:  MOVLW  01
11FC:  MOVWF  5B
11FE:  MOVLW  F4
1200:  MOVWF  5A
1202:  RCALL  0C28
1204:  MOVLW  04
1206:  MOVWF  59
1208:  CLRF   16
120A:  BTFSC  FF2.7
120C:  BSF    16.7
120E:  BCF    FF2.7
1210:  MOVLW  C8
1212:  MOVWF  x63
1214:  RCALL  0AD0
1216:  BTFSC  16.7
1218:  BSF    FF2.7
121A:  DECFSZ 59,F
121C:  BRA    1208
121E:  MOVLW  03
1220:  MOVWF  5A
1222:  MOVLW  84
1224:  MOVWF  59
1226:  RCALL  0E72
1228:  INCF   58,F
122A:  BRA    11B8
.................... } 
.................... vantay1=1; resetdc2(); 
122C:  BSF    F80.5
122E:  CALL   01C0
....................  
....................  
.................... delay_ms(1000); 
1232:  MOVLW  04
1234:  MOVWF  59
1236:  CLRF   16
1238:  BTFSC  FF2.7
123A:  BSF    16.7
123C:  BCF    FF2.7
123E:  MOVLW  FA
1240:  MOVWF  x63
1242:  RCALL  0AD0
1244:  BTFSC  16.7
1246:  BSF    FF2.7
1248:  DECFSZ 59,F
124A:  BRA    1236
.................... vantay2=0; 
124C:  BCF    F84.0
.................... chonpid=1; 
124E:  MOVLW  01
1250:  MOVWF  55
.................... setvt1=250; 
1252:  CLRF   3C
1254:  MOVLW  FA
1256:  MOVWF  3B
.................... enable_interrupts(int_timer1); 
1258:  BSF    F9D.0
.................... while ( qei_get_count() > 250) {} 
125A:  MOVFF  F67,01
125E:  MOVFF  F66,00
1262:  MOVFF  F67,03
1266:  MOVF   03,W
1268:  SUBWF  01,W
126A:  BZ    1270
126C:  MOVFF  F66,00
1270:  MOVF   00,W
1272:  MOVWF  59
1274:  MOVFF  03,5A
1278:  MOVF   5A,F
127A:  BNZ   1282
127C:  MOVF   59,W
127E:  SUBLW  FA
1280:  BC    1284
1282:  BRA    125A
.................... chonpid=0; 
1284:  CLRF   55
....................  
.................... while (cten==1) {} 
1286:  BTFSC  F81.6
1288:  BRA    1286
....................  
.................... while (ctsel==1) {} 
128A:  BTFSC  F81.7
128C:  BRA    128A
....................  
.................... if (ctsel==0) { vantay1=0; delay_ms(400); } 
128E:  BTFSC  F81.7
1290:  BRA    12AE
1292:  BCF    F80.5
1294:  MOVLW  02
1296:  MOVWF  59
1298:  CLRF   16
129A:  BTFSC  FF2.7
129C:  BSF    16.7
129E:  BCF    FF2.7
12A0:  MOVLW  C8
12A2:  MOVWF  x63
12A4:  RCALL  0AD0
12A6:  BTFSC  16.7
12A8:  BSF    FF2.7
12AA:  DECFSZ 59,F
12AC:  BRA    1298
.................... while (ctsel==1) {} 
12AE:  BTFSC  F81.7
12B0:  BRA    12AE
.................... if (ctsel==0) { delay_ms(400);  resetvan(); } 
12B2:  BTFSC  F81.7
12B4:  BRA    12D2
12B6:  MOVLW  02
12B8:  MOVWF  59
12BA:  CLRF   16
12BC:  BTFSC  FF2.7
12BE:  BSF    16.7
12C0:  BCF    FF2.7
12C2:  MOVLW  C8
12C4:  MOVWF  x63
12C6:  RCALL  0AD0
12C8:  BTFSC  16.7
12CA:  BSF    FF2.7
12CC:  DECFSZ 59,F
12CE:  BRA    12BA
12D0:  RCALL  0C6C
....................  
.................... demct=200; 
12D2:  MOVLW  C8
12D4:  MOVWF  4F
.................... enable_interrupts(int_timer5); 
12D6:  BSF    FA3.0
12D8:  GOTO   15CC (RETURN)
....................  
.................... } 
....................  
....................  
.................... #include <nhiemvu4.c> 
....................  
.................... ///// NHIEM VU 4 
....................  
.................... int8 deml=0; 
.................... void nhiemvu4() 
.................... { 
....................  
....................  
.................... disable_interrupts(int_timer5); 
12DC:  BCF    FA3.0
.................... disable_interrupts(int_timer1); 
12DE:  BCF    F9D.0
.................... int8 inv4; 
.................... delay_ms(1000); 
12E0:  MOVLW  04
12E2:  MOVWF  59
12E4:  CLRF   16
12E6:  BTFSC  FF2.7
12E8:  BSF    16.7
12EA:  BCF    FF2.7
12EC:  MOVLW  FA
12EE:  MOVWF  x63
12F0:  CALL   0AD0
12F4:  BTFSC  16.7
12F6:  BSF    FF2.7
12F8:  DECFSZ 59,F
12FA:  BRA    12E4
12FC:  CLRF   16
12FE:  BTFSC  FF2.7
1300:  BSF    16.7
1302:  BCF    FF2.7
.................... beep(4,100); 
1304:  MOVLW  04
1306:  MOVWF  5F
1308:  MOVLW  64
130A:  MOVWF  x60
130C:  CALL   0AF8
1310:  BTFSC  16.7
1312:  BSF    FF2.7
....................  
.................... trispwm3=trisdir3=0; 
1314:  BCF    F95.5
1316:  BCF    F95.6
.................... pwm3=dir3=1; 
1318:  BSF    F83.5
131A:  BSF    F83.6
.................... while (cten==1) {} 
131C:  BTFSC  F81.6
131E:  BRA    131C
1320:  CLRF   16
1322:  BTFSC  FF2.7
1324:  BSF    16.7
1326:  BCF    FF2.7
.................... delay_ms(100); 
1328:  MOVLW  64
132A:  MOVWF  x63
132C:  CALL   0AD0
1330:  BTFSC  16.7
1332:  BSF    FF2.7
....................  
.................... dclep=1; 
1334:  BSF    52.0
.................... enable_interrupts(int_timer0); 
1336:  BSF    FF2.5
.................... vanduoi=0;    
1338:  BCF    F80.2
.................... while (ctld==1) 
133A:  BTFSS  F81.4
133C:  BRA    1346
....................    { 
....................    dir3=0; 
133E:  BCF    F83.5
....................    xungleo=80; 
1340:  MOVLW  50
1342:  MOVWF  51
1344:  BRA    133A
....................     
....................    }  
.................... dir3=1; 
1346:  BSF    F83.5
.................... xungleo=0; 
1348:  CLRF   51
134A:  CLRF   16
134C:  BTFSC  FF2.7
134E:  BSF    16.7
1350:  BCF    FF2.7
.................... beep(1,100); 
1352:  MOVLW  01
1354:  MOVWF  5F
1356:  MOVLW  64
1358:  MOVWF  x60
135A:  CALL   0AF8
135E:  BTFSC  16.7
1360:  BSF    FF2.7
....................  
.................... for (inv4=0; inv4 < 3; inv4++)    /// 4 lan la ok 
1362:  CLRF   58
1364:  MOVF   58,W
1366:  SUBLW  02
1368:  BNC   13BE
....................  { 
....................    while (ctlt==1) 
136A:  BTFSS  F81.5
136C:  BRA    1376
....................       { 
....................       dir3=1; 
136E:  BSF    F83.5
....................       xungleo=80; 
1370:  MOVLW  50
1372:  MOVWF  51
1374:  BRA    136A
....................       } 
....................    dir3=0;    
1376:  BCF    F83.5
....................    xungleo=0; 
1378:  CLRF   51
137A:  CLRF   16
137C:  BTFSC  FF2.7
137E:  BSF    16.7
1380:  BCF    FF2.7
....................    beep(1,100); 
1382:  MOVLW  01
1384:  MOVWF  5F
1386:  MOVLW  64
1388:  MOVWF  x60
138A:  CALL   0AF8
138E:  BTFSC  16.7
1390:  BSF    FF2.7
....................  
....................    while (ctld==1) 
1392:  BTFSS  F81.4
1394:  BRA    139E
....................       { 
....................       dir3=0; 
1396:  BCF    F83.5
....................       xungleo=85; 
1398:  MOVLW  55
139A:  MOVWF  51
139C:  BRA    1392
....................       } 
....................    dir3=1;    
139E:  BSF    F83.5
....................    xungleo=0; 
13A0:  CLRF   51
13A2:  CLRF   16
13A4:  BTFSC  FF2.7
13A6:  BSF    16.7
13A8:  BCF    FF2.7
....................    beep(1,100); 
13AA:  MOVLW  01
13AC:  MOVWF  5F
13AE:  MOVLW  64
13B0:  MOVWF  x60
13B2:  CALL   0AF8
13B6:  BTFSC  16.7
13B8:  BSF    FF2.7
13BA:  INCF   58,F
13BC:  BRA    1364
....................  } 
....................   
....................  delay_ms(800); 
13BE:  MOVLW  04
13C0:  MOVWF  59
13C2:  CLRF   16
13C4:  BTFSC  FF2.7
13C6:  BSF    16.7
13C8:  BCF    FF2.7
13CA:  MOVLW  C8
13CC:  MOVWF  x63
13CE:  CALL   0AD0
13D2:  BTFSC  16.7
13D4:  BSF    FF2.7
13D6:  DECFSZ 59,F
13D8:  BRA    13C2
....................  /////////////////////delay nga robot 
....................  while (ctlt==1) 
13DA:  BTFSS  F81.5
13DC:  BRA    13E6
....................       { 
....................       dir3=1; 
13DE:  BSF    F83.5
....................       xungleo=80; 
13E0:  MOVLW  50
13E2:  MOVWF  51
13E4:  BRA    13DA
....................       } 
....................    dir3=0;    
13E6:  BCF    F83.5
....................    xungleo=0; 
13E8:  CLRF   51
13EA:  CLRF   16
13EC:  BTFSC  FF2.7
13EE:  BSF    16.7
13F0:  BCF    FF2.7
....................    beep(1,100); 
13F2:  MOVLW  01
13F4:  MOVWF  5F
13F6:  MOVLW  64
13F8:  MOVWF  x60
13FA:  CALL   0AF8
13FE:  BTFSC  16.7
1400:  BSF    FF2.7
....................  
....................    while (ctld==1) 
1402:  BTFSS  F81.4
1404:  BRA    140E
....................       { 
....................       dir3=0; 
1406:  BCF    F83.5
....................       xungleo=85; 
1408:  MOVLW  55
140A:  MOVWF  51
140C:  BRA    1402
....................       } 
....................    dir3=1;    
140E:  BSF    F83.5
....................    xungleo=0; 
1410:  CLRF   51
1412:  CLRF   16
1414:  BTFSC  FF2.7
1416:  BSF    16.7
1418:  BCF    FF2.7
....................    beep(1,100); 
141A:  MOVLW  01
141C:  MOVWF  5F
141E:  MOVLW  64
1420:  MOVWF  x60
1422:  CALL   0AF8
1426:  BTFSC  16.7
1428:  BSF    FF2.7
....................   
....................   
....................  
.................... while (ctlt==1) 
142A:  BTFSS  F81.5
142C:  BRA    1436
....................       { 
....................       dir3=1; 
142E:  BSF    F83.5
....................       xungleo=80; 
1430:  MOVLW  50
1432:  MOVWF  51
1434:  BRA    142A
....................       } 
....................    dir3=0;    
1436:  BCF    F83.5
....................    xungleo=0; 
1438:  CLRF   51
143A:  CLRF   16
143C:  BTFSC  FF2.7
143E:  BSF    16.7
1440:  BCF    FF2.7
....................    beep(1,100); 
1442:  MOVLW  01
1444:  MOVWF  5F
1446:  MOVLW  64
1448:  MOVWF  x60
144A:  CALL   0AF8
144E:  BTFSC  16.7
1450:  BSF    FF2.7
....................     
.................... while (ctlt==0) 
1452:  BTFSC  F81.5
1454:  BRA    145E
....................    { 
....................    dir3=0;  
1456:  BCF    F83.5
....................    xungleo=60; 
1458:  MOVLW  3C
145A:  MOVWF  51
145C:  BRA    1452
....................    } 
....................    xungleo=0; 
145E:  CLRF   51
1460:  CLRF   16
1462:  BTFSC  FF2.7
1464:  BSF    16.7
1466:  BCF    FF2.7
....................    beep(1,100); 
1468:  MOVLW  01
146A:  MOVWF  5F
146C:  MOVLW  64
146E:  MOVWF  x60
1470:  CALL   0AF8
1474:  BTFSC  16.7
1476:  BSF    FF2.7
....................   
.................... vanduoi=1; 
1478:  BSF    F80.2
.................... pwm3=1; 
147A:  BSF    F83.6
.................... dir3=1; 
147C:  BSF    F83.5
.................... dclep=0; 
147E:  BCF    52.0
.................... xungleo=10; 
1480:  MOVLW  0A
1482:  MOVWF  51
1484:  CLRF   16
1486:  BTFSC  FF2.7
1488:  BSF    16.7
148A:  BCF    FF2.7
.................... beep(3,100); 
148C:  MOVLW  03
148E:  MOVWF  5F
1490:  MOVLW  64
1492:  MOVWF  x60
1494:  CALL   0AF8
1498:  BTFSC  16.7
149A:  BSF    FF2.7
.................... while (cten==1) { } 
149C:  BTFSC  F81.6
149E:  BRA    149C
.................... disable_interrupts(int_timer0); 
14A0:  BCF    FF2.5
....................  
.................... demct=200; 
14A2:  MOVLW  C8
14A4:  MOVWF  4F
.................... enable_interrupts(int_timer5); 
14A6:  BSF    FA3.0
14A8:  GOTO   15F2 (RETURN)
.................... } 
....................  
....................  
....................  
.................... ///// MAIN ///// 
.................... int8 i=0; 
....................  
.................... void main() 
14AC:  CLRF   FF8
14AE:  BCF    FD0.7
14B0:  BSF    07.7
14B2:  CLRF   1C
14B4:  CLRF   1B
14B6:  CLRF   1A
14B8:  MOVLW  80
14BA:  MOVWF  19
14BC:  MOVLW  CD
14BE:  MOVWF  20
14C0:  MOVLW  CC
14C2:  MOVWF  1F
14C4:  MOVLW  4C
14C6:  MOVWF  1E
14C8:  MOVLW  7C
14CA:  MOVWF  1D
14CC:  MOVLW  33
14CE:  MOVWF  24
14D0:  MOVWF  23
14D2:  MOVWF  22
14D4:  MOVLW  7E
14D6:  MOVWF  21
14D8:  CLRF   30
14DA:  CLRF   2F
14DC:  CLRF   34
14DE:  CLRF   33
14E0:  CLRF   36
14E2:  CLRF   35
14E4:  MOVLW  02
14E6:  MOVWF  40
14E8:  MOVLW  58
14EA:  MOVWF  3F
14EC:  MOVLW  02
14EE:  MOVWF  42
14F0:  MOVLW  76
14F2:  MOVWF  41
14F4:  CLRF   46
14F6:  CLRF   45
14F8:  CLRF   4A
14FA:  CLRF   49
14FC:  CLRF   4C
14FE:  CLRF   4B
1500:  CLRF   4F
1502:  CLRF   50
1504:  MOVLW  64
1506:  MOVWF  51
1508:  BCF    52.0
150A:  CLRF   54
150C:  CLRF   53
150E:  CLRF   56
1510:  CLRF   57
1512:  BCF    FB9.0
1514:  BCF    FC1.6
1516:  BCF    FC1.7
1518:  MOVLW  00
151A:  MOVWF  FB8
.................... { 
....................    khoidong();  
151C:  GOTO   0B76
....................    En2=0; 
1520:  CLRF   18
1522:  CLRF   17
....................    Ti1=0; 
1524:  CLRF   39
....................    Ti2=0; 
1526:  CLRF   3A
....................    setvt1=0; 
1528:  CLRF   3C
152A:  CLRF   3B
....................    setvt2=0; 
152C:  CLRF   3E
152E:  CLRF   3D
1530:  CLRF   16
1532:  BTFSC  FF2.7
1534:  BSF    16.7
1536:  BCF    FF2.7
....................    beep(2,100);  
1538:  MOVLW  02
153A:  MOVWF  5F
153C:  MOVLW  64
153E:  MOVWF  x60
1540:  CALL   0AF8
1544:  BTFSC  16.7
1546:  BSF    FF2.7
....................    
.................... while(true) 
....................    { 
....................     
....................    if (ctsel==0)  
1548:  BTFSC  F81.7
154A:  BRA    156C
....................       { 
....................       enable_interrupts(int_timer5); 
154C:  BSF    FA3.0
....................       demct=0; i=1; delay_ms(10);  
154E:  CLRF   4F
1550:  MOVLW  01
1552:  MOVWF  57
1554:  CLRF   16
1556:  BTFSC  FF2.7
1558:  BSF    16.7
155A:  BCF    FF2.7
155C:  MOVLW  0A
155E:  MOVWF  x63
1560:  CALL   0AD0
1564:  BTFSC  16.7
1566:  BSF    FF2.7
....................       while (ctsel==0) {} 
1568:  BTFSS  F81.7
156A:  BRA    1568
....................       } 
....................        
....................    while (i==1)  
156C:  DECFSZ 57,W
156E:  BRA    15F4
....................       { 
....................       if ( demct<50 ) {disable_interrupts(int_timer5); i=0; demct=0;  resetvan(); } 
1570:  MOVF   4F,W
1572:  SUBLW  31
1574:  BNC   1580
1576:  BCF    FA3.0
1578:  CLRF   57
157A:  CLRF   4F
157C:  CALL   0C6C
....................       if ((50<demct)&(demct<100)) {disable_interrupts(int_timer5); i=0; demct=0; nhiemvu2(); }  
1580:  MOVF   4F,W
1582:  SUBLW  32
1584:  BNC   158A
1586:  MOVLW  00
1588:  BRA    158C
158A:  MOVLW  01
158C:  MOVWF  58
158E:  MOVF   4F,W
1590:  SUBLW  63
1592:  BC    1598
1594:  MOVLW  00
1596:  BRA    159A
1598:  MOVLW  01
159A:  ANDWF  58,W
159C:  BZ    15A6
159E:  BCF    FA3.0
15A0:  CLRF   57
15A2:  CLRF   4F
15A4:  BRA    0DE0
....................       if ((100<demct)&(demct<150)) {disable_interrupts(int_timer5); i=0; demct=0; nhiemvu3x(); } 
15A6:  MOVF   4F,W
15A8:  SUBLW  64
15AA:  BNC   15B0
15AC:  MOVLW  00
15AE:  BRA    15B2
15B0:  MOVLW  01
15B2:  MOVWF  58
15B4:  MOVF   4F,W
15B6:  SUBLW  95
15B8:  BC    15BE
15BA:  MOVLW  00
15BC:  BRA    15C0
15BE:  MOVLW  01
15C0:  ANDWF  58,W
15C2:  BZ    15CC
15C4:  BCF    FA3.0
15C6:  CLRF   57
15C8:  CLRF   4F
15CA:  BRA    0EFC
....................       if ((150<demct)&(demct<200)) {disable_interrupts(int_timer5); i=0; demct=0; nhiemvu4(); } 
15CC:  MOVF   4F,W
15CE:  SUBLW  96
15D0:  BNC   15D6
15D2:  MOVLW  00
15D4:  BRA    15D8
15D6:  MOVLW  01
15D8:  MOVWF  58
15DA:  MOVF   4F,W
15DC:  SUBLW  C7
15DE:  BC    15E4
15E0:  MOVLW  00
15E2:  BRA    15E6
15E4:  MOVLW  01
15E6:  ANDWF  58,W
15E8:  BZ    15F2
15EA:  BCF    FA3.0
15EC:  CLRF   57
15EE:  CLRF   4F
15F0:  BRA    12DC
15F2:  BRA    156C
....................       } 
15F4:  BRA    1548
....................      
....................    } 
....................  
....................  
.................... } 
....................  
15F6:  SLEEP 
....................  
....................  
....................  
....................  

Configuration Fuses:
   Word  1: C600   H4 FCMEN IESO
   Word  2: 3E0D   NOPUT NOBROWNOUT BORV20 NOWDT WDT32768 NOWINEN
   Word  3: 9D3C   NOPWMPIN LPOL_HIGH HPOL_HIGH T1LOWPOWER FLTAC1 SSP_RC PWM4B5 EXCLKC3 MCLR
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
