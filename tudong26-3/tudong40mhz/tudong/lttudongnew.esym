D G "__PCH__" 0 133 ""5.015""
D G "__DEVICE__" 0 133 "4431"
D G "__DATE__" 0 133 ""26-Mar-14""
D G "__TIME__" 0 133 ""20:24:30"" "Standard Header file for the PIC18F4431 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
v L "value" 2 44 "int8" `54 
f B "set_tris_a" 2 44 "void(int8 value)" `53 
v L "value" 2 45 "int8" `56 
f B "set_tris_b" 2 45 "void(int8 value)" `55 
v L "value" 2 46 "int8" `58 
f B "set_tris_c" 2 46 "void(int8 value)" `57 
v L "value" 2 47 "int8" `60 
f B "set_tris_d" 2 47 "void(int8 value)" `59 
v L "value" 2 48 "int8" `62 
f B "set_tris_e" 2 48 "void(int8 value)" `61 
f B "get_tris_a" 2 49 "int8()" `63 
f B "get_tris_b" 2 50 "int8()" `64 
f B "get_tris_c" 2 51 "int8()" `65 
f B "get_tris_d" 2 52 "int8()" `66 
f B "get_tris_e" 2 53 "int8()" `67 
v L "value" 2 54 "int8" `69 
f B "output_a" 2 54 "void(int8 value)" `68 
v L "value" 2 55 "int8" `71 
f B "output_b" 2 55 "void(int8 value)" `70 
v L "value" 2 56 "int8" `73 
f B "output_c" 2 56 "void(int8 value)" `72 
v L "value" 2 57 "int8" `75 
f B "output_d" 2 57 "void(int8 value)" `74 
v L "value" 2 58 "int8" `77 
f B "output_e" 2 58 "void(int8 value)" `76 
f B "input_a" 2 59 "int8()" `78 
f B "input_b" 2 60 "int8()" `79 
f B "input_c" 2 61 "int8()" `80 
f B "input_d" 2 62 "int8()" `81 
f B "input_e" 2 63 "int8()" `82 
f B "input_change_a" 2 64 "int8()" `83 
f B "input_change_b" 2 65 "int8()" `84 
f B "input_change_c" 2 66 "int8()" `85 
f B "input_change_d" 2 67 "int8()" `86 
f B "input_change_e" 2 68 "int8()" `87 
v L "pin" 2 69 "int16" `89 
f B "input" 2 69 "int8(int16 pin)" `88 
v L "pin" 2 70 "int16" `91 
f B "input_state" 2 70 "int8(int16 pin)" `90 
v L "pin" 2 71 "int16" `93 
f B "output_low" 2 71 "void(int16 pin)" `92 
v L "pin" 2 72 "int16" `95 
f B "output_high" 2 72 "void(int16 pin)" `94 
v L "pin" 2 73 "int16" `97 
f B "output_toggle" 2 73 "void(int16 pin)" `96 
v L "pin" 2 74 "int16" `99 
v L "level" 2 74 "int8" `100 
f B "output_bit" 2 74 "void(int16 pin,int8 level)" `98 
v L "pin" 2 75 "int16" `102 
f B "output_float" 2 75 "void(int16 pin)" `101 
v L "pin" 2 76 "int16" `104 
f B "output_drive" 2 76 "void(int16 pin)" `103  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 80 "31744"
d G "PIN_A1" 2 81 "31745"
d G "PIN_A2" 2 82 "31746"
d G "PIN_A3" 2 83 "31747"
d G "PIN_A4" 2 84 "31748"
d G "PIN_A5" 2 85 "31749"
d G "PIN_A6" 2 86 "31750"
d G "PIN_A7" 2 87 "31751"
d G "PIN_B0" 2 89 "31752"
d G "PIN_B1" 2 90 "31753"
d G "PIN_B2" 2 91 "31754"
d G "PIN_B3" 2 92 "31755"
d G "PIN_B4" 2 93 "31756"
d G "PIN_B5" 2 94 "31757"
d G "PIN_B6" 2 95 "31758"
d G "PIN_B7" 2 96 "31759"
d G "PIN_C0" 2 98 "31760"
d G "PIN_C1" 2 99 "31761"
d G "PIN_C2" 2 100 "31762"
d G "PIN_C3" 2 101 "31763"
d G "PIN_C4" 2 102 "31764"
d G "PIN_C5" 2 103 "31765"
d G "PIN_C6" 2 104 "31766"
d G "PIN_C7" 2 105 "31767"
d G "PIN_D0" 2 107 "31768"
d G "PIN_D1" 2 108 "31769"
d G "PIN_D2" 2 109 "31770"
d G "PIN_D3" 2 110 "31771"
d G "PIN_D4" 2 111 "31772"
d G "PIN_D5" 2 112 "31773"
d G "PIN_D6" 2 113 "31774"
d G "PIN_D7" 2 114 "31775"
d G "PIN_E0" 2 116 "31776"
d G "PIN_E1" 2 117 "31777"
d G "PIN_E2" 2 118 "31778"
d G "PIN_E3" 2 119 "31779"
d G "FALSE" 2 122 "0"
d G "TRUE" 2 123 "1"
d G "BYTE" 2 125 "int8"
d G "BOOLEAN" 2 126 "int1"
d G "getc" 2 128 "getch"
d G "fgetc" 2 129 "getch"
d G "getchar" 2 130 "getch"
d G "putc" 2 131 "putchar"
d G "fputc" 2 132 "putchar"
d G "fgets" 2 133 "gets"
d G "fputs" 2 134 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f B "restart_cause" 2 139 "int8()" `105 
f B "reset_cpu" 2 140 "void()" `106 
f B "sleep" 2 141 "void()" `107 
v L "type" 2 142 "int8" `109 
f G "sleep" 2 142 "void(int8 type)" `108  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 2 144 "7"
d G "MCLR_FROM_SLEEP" 2 145 "11"
d G "MCLR_FROM_RUN" 2 146 "15"
d G "NORMAL_POWER_UP" 2 147 "12"
d G "BROWNOUT_RESTART" 2 148 "14"
d G "WDT_FROM_SLEEP" 2 149 "3"
d G "RESET_INSTRUCTION" 2 150 "0"
d G "SLEEP_FULL" 2 153 "0" "Default"
d G "SLEEP_IDLE" 2 154 "1" "Clock and peripherals don't stop"
c L "sleep" 2 3 5 "FUNCTION"
v L "mode" 2 161 "int8" `111 
f B "setup_timer_0" 2 161 "void(int8 mode)" `110 
v L "value" 2 162 "int16" `113 
f B "set_timer0" 2 162 "void(int16 value)" `112 
f B "get_timer0" 2 163 "int16()" `114 
v L "mode" 2 164 "int8" `116 
v L "prescaler" 2 164 "int8" `117 
f B "setup_counters" 2 164 "void(int8 mode,int8 prescaler)" `115 
v L "value" 2 165 "int16" `119 
f B "set_rtcc" 2 165 "void(int16 value)" `118 
f B "get_rtcc" 2 166 "int16()" `120  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 168 "0"
d G "T0_EXT_L_TO_H" 2 169 "32"
d G "T0_EXT_H_TO_L" 2 170 "48"
d G "T0_DIV_1" 2 172 "8"
d G "T0_DIV_2" 2 173 "0"
d G "T0_DIV_4" 2 174 "1"
d G "T0_DIV_8" 2 175 "2"
d G "T0_DIV_16" 2 176 "3"
d G "T0_DIV_32" 2 177 "4"
d G "T0_DIV_64" 2 178 "5"
d G "T0_DIV_128" 2 179 "6"
d G "T0_DIV_256" 2 180 "7"
d G "T0_OFF" 2 182 "0x80"
d G "T0_8_BIT" 2 184 "0x40"
d G "RTCC_INTERNAL" 2 186 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 2 187 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 2 188 "48"
d G "RTCC_DIV_1" 2 189 "8"
d G "RTCC_DIV_2" 2 190 "0"
d G "RTCC_DIV_4" 2 191 "1"
d G "RTCC_DIV_8" 2 192 "2"
d G "RTCC_DIV_16" 2 193 "3"
d G "RTCC_DIV_32" 2 194 "4"
d G "RTCC_DIV_64" 2 195 "5"
d G "RTCC_DIV_128" 2 196 "6"
d G "RTCC_DIV_256" 2 197 "7"
d G "RTCC_OFF" 2 198 "0x80"
d G "RTCC_8_BIT" 2 199 "0x40"
c L "get_rtcc" 2 3 8 "FUNCTION"
v L "mode" 2 210 "int16" `122 
f B "setup_wdt" 2 210 "void(int16 mode)" `121 
f B "restart_wdt" 2 211 "void()" `123  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 213 "0x100"
d G "WDT_OFF" 2 214 "0"
d G "WDT_4MS" 2 216 "0x300"
d G "WDT_8MS" 2 217 "0x500"
d G "WDT_16MS" 2 218 "0x700"
d G "WDT_32MS" 2 219 "0x900"
d G "WDT_64MS" 2 220 "0xB00"
d G "WDT_128MS" 2 221 "0xD00"
d G "WDT_256MS" 2 222 "0xF00"
d G "WDT_512MS" 2 223 "0x1100"
d G "WDT_1S" 2 224 "0x1300"
d G "WDT_2S" 2 225 "0x1500"
d G "WDT_4S" 2 226 "0x1700"
d G "WDT_8S" 2 227 "0x1900"
d G "WDT_16" 2 228 "0x1B00"
d G "WDT_32S" 2 229 "0x1D00"
d G "WDT_64S" 2 230 "0x1F00"
d G "WDT_128S" 2 231 "0x2100"
c L "restart_wdt" 2 3 3 "FUNCTION"
v L "mode" 2 237 "int16" `125 
f B "setup_timer_1" 2 237 "void(int16 mode)" `124 
f B "get_timer1" 2 238 "int16()" `126 
v L "value" 2 239 "int16" `128 
f B "set_timer1" 2 239 "void(int16 value)" `127  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 242 "0"
d G "T1_INTERNAL" 2 243 "0x85"
d G "T1_EXTERNAL" 2 244 "0x87"
d G "T1_EXTERNAL_SYNC" 2 245 "0x83"
d G "T1_CLK_OUT" 2 247 "8"
d G "T1_DIV_BY_1" 2 249 "0"
d G "T1_DIV_BY_2" 2 250 "0x10"
d G "T1_DIV_BY_4" 2 251 "0x20"
d G "T1_DIV_BY_8" 2 252 "0x30"
c L "set_timer1" 2 3 3 "FUNCTION"
v L "mode" 2 257 "int8" `130 
v L "period" 2 257 "int8" `131 
v L "postscale" 2 257 "int8" `132 
f B "setup_timer_2" 2 257 "void(int8 mode,int8 period,int8 postscale)" `129 
f B "get_timer2" 2 258 "int8()" `133 
v L "value" 2 259 "int8" `135 
f B "set_timer2" 2 259 "void(int8 value)" `134  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 261 "0"
d G "T2_DIV_BY_1" 2 262 "4"
d G "T2_DIV_BY_4" 2 263 "5"
d G "T2_DIV_BY_16" 2 264 "6"
c L "set_timer2" 2 3 3 "FUNCTION"
v L "mode" 2 269 "int8" `137 
f B "setup_timer_5" 2 269 "void(int8 mode)" `136 
f B "get_timer5" 2 270 "int16()" `138 
v L "value" 2 271 "int16" `140 
f B "set_timer5" 2 271 "void(int16 value)" `139  "Constants used for SETUP_TIMER_5() are:"
d G "T5_DISABLED" 2 274 "0"
d G "T5_INTERNAL" 2 275 "0x01"
d G "T5_EXTERNAL" 2 276 "0x07"
d G "T5_EXTERNAL_SYNC" 2 277 "0x03"
d G "T5_DIV_BY_1" 2 279 "0"
d G "T5_DIV_BY_2" 2 280 "0x08"
d G "T5_DIV_BY_4" 2 281 "0x10"
d G "T5_DIV_BY_8" 2 282 "0x18"
d G "T5_ONE_SHOT" 2 284 "0x20"
d G "T5_DISABLE_SE_RESET" 2 286 "0x40"
d G "T5_ENABLE_DURING_SLEEP" 2 288 "0x80"
c L "set_timer5" 2 3 4 "FUNCTION"
v L "mode" 2 294 "int32" `142 
f B "setup_ccp1" 2 294 "void(int32 mode)" `141 
v L "mode" 2 295 "int32" `144 
v L "pwm" 2 295 "int8" `145 
f G "setup_ccp1" 2 295 "void(int32 mode,int8 pwm)" `143 
v L "value" 2 296 "int16" `147 
f B "set_pwm1_duty" 2 296 "void(int16 value)" `146  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 298 "0"
d G "CCP_CAPTURE_FE" 2 299 "4"
d G "CCP_CAPTURE_RE" 2 300 "5"
d G "CCP_CAPTURE_DIV_4" 2 301 "6"
d G "CCP_CAPTURE_DIV_16" 2 302 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 2 303 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 304 "9"
d G "CCP_COMPARE_INT" 2 305 "0xA"
d G "CCP_COMPARE_INT_AND_TOGGLE" 2 306 "0x2"
d G "CCP_COMPARE_RESET_TIMER" 2 307 "0xB"
d G "CCP_PWM" 2 308 "0xC"
d G "CCP_PWM_PLUS_1" 2 309 "0x1c"
d G "CCP_PWM_PLUS_2" 2 310 "0x2c"
d G "CCP_PWM_PLUS_3" 2 311 "0x3c"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
v L "mode" 2 318 "int32" `152 
f B "setup_ccp2" 2 318 "void(int32 mode)" `151 
v L "mode" 2 319 "int32" `154 
v L "pwm" 2 319 "int8" `155 
f G "setup_ccp2" 2 319 "void(int32 mode,int8 pwm)" `153 
v L "value" 2 320 "int16" `157 
f B "set_pwm2_duty" 2 320 "void(int16 value)" `156 
c L "set_pwm2_duty" 2 3 3 "FUNCTION"
v L "mode" 2 327 "int32" `162 
f B "setup_spi" 2 327 "void(int32 mode)" `161 
v L "value" 2 328 "int8" `164 
f B "spi_write" 2 328 "void(int8 value)" `163 
f B "spi_read" 2 329 "int8()" `165 
v L "value" 2 330 "int8" `167 
f G "spi_read" 2 330 "int8(int8 value)" `166 
f B "spi_data_in" 2 331 "int8()" `168  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 333 "0x00"
d G "SPI_MASTER" 2 334 "0x20"
d G "SPI_SLAVE" 2 335 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 336 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 337 "0x00"
d G "SPI_CLK_DIV_4" 2 338 "0x00"
d G "SPI_CLK_DIV_16" 2 339 "0x01"
d G "SPI_CLK_DIV_64" 2 340 "0x02"
d G "SPI_CLK_T2" 2 341 "0x03"
d G "SPI_SS_DISABLED" 2 342 "0x01"
d G "SPI_XMIT_L_TO_H" 2 344 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 345 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 347 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 348 "0x8000"
d G "SPI_L_TO_H" 2 351 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 352 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 2 3 2 "FUNCTION"
v L "baud" 2 356 "int32" `170 
f B "setup_uart" 2 356 "void(int32 baud)" `169 
v L "baud" 2 357 "int32" `172 
v L "stream" 2 357 "int8" `173 
f G "setup_uart" 2 357 "void(int32 baud,int8 stream)" `171 
v L "baud" 2 358 "int32" `175 
v L "stream" 2 358 "int8" `176 
v L "clock" 2 358 "int32" `177 
f G "setup_uart" 2 358 "void(int32 baud,int8 stream,int32 clock)" `174 
v L "baud" 2 359 "int32" `179 
f B "set_uart_speed" 2 359 "void(int32 baud)" `178 
v L "baud" 2 360 "int32" `181 
v L "stream" 2 360 "int8" `182 
f G "set_uart_speed" 2 360 "void(int32 baud,int8 stream)" `180 
v L "baud" 2 361 "int32" `184 
v L "stream" 2 361 "int8" `185 
v L "clock" 2 361 "int32" `186 
f G "set_uart_speed" 2 361 "void(int32 baud,int8 stream,int32 clock)" `183  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 365 "2"
d G "UART_DATA" 2 366 "4"
d G "UART_AUTODETECT" 2 367 "8"
d G "UART_AUTODETECT_NOWAIT" 2 368 "9"
d G "UART_WAKEUP_ON_RDA" 2 369 "10"
d G "UART_SEND_BREAK" 2 370 "13"
c L "set_uart_speed" 2 3 2 "FUNCTION"
v L "mode" 2 373 "int8" `188 
f B "setup_low_volt_detect" 2 373 "void(int8 mode)" `187  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 2 375 "0x1F"
d G "LVD_42" 2 376 "0x1E"
d G "LVD_39" 2 377 "0x1D"
d G "LVD_38" 2 378 "0x1C"
d G "LVD_36" 2 379 "0x1B"
d G "LVD_34" 2 380 "0x1A"
d G "LVD_33" 2 381 "0x19"
d G "LVD_31" 2 382 "0x18"
d G "LVD_28" 2 383 "0x17"
d G "LVD_27" 2 384 "0x16"
d G "LVD_26" 2 385 "0x15"
d G "LVD_24" 2 386 "0x14"
d G "LVD_23" 2 387 "0x13"
d G "LVD_21" 2 388 "0x12"
c L "setup_low_volt_detect" 2 3 4 "FUNCTION"
v L "mode" 2 394 "int8" `190 
f B "setup_qei" 2 394 "void(int8 mode)" `189 
v L "mode" 2 395 "int8" `192 
v L "filter" 2 395 "int8" `193 
f G "setup_qei" 2 395 "void(int8 mode,int8 filter)" `191 
v L "mode" 2 396 "int8" `195 
v L "filter" 2 396 "int8" `196 
v L "max_count" 2 396 "int16" `197 
f G "setup_qei" 2 396 "void(int8 mode,int8 filter,int16 max_count)" `194 
v L "value" 2 397 "int16" `199 
f B "qei_set_count" 2 397 "void(int16 value)" `198 
f B "qei_get_count" 2 398 "int16()" `200 
v L "which" 2 399 "int8" `202 
f G "qei_get_count" 2 399 "int16(int8 which)" `201 
f B "qei_status" 2 400 "int8()" `203  "Constants used in setup_qei() first param are:"
d G "QEI_DISABLED" 2 402 "0x00"
d G "QEI_MODE_X2_RESET_WITH_INDX" 2 403 "0x04"
d G "QEI_MODE_X2_RESET_ON_MATCH" 2 404 "0x08"
d G "QEI_MODE_X4_RESET_WITH_INDX" 2 405 "0x14"
d G "QEI_MODE_X4_RESET_ON_MATCH" 2 406 "0x18"
d G "QEI_VELOCITY_MODE_ENABLED" 2 407 "0x00"
d G "QEI_VELOCITY_MODE_DISABLED" 2 408 "0x80"
d G "QEI_VELOCITY_PULSE_DIV_1" 2 409 "0x00"
d G "QEI_VELOCITY_PULSE_DIV_4" 2 410 "0x01"
d G "QEI_VELOCITY_PULSE_DIV_16" 2 411 "0x02"
d G "QEI_VELOCITY_PULSE_DIV_64" 2 412 "0x03"
d G "QEI_FILTER_DISABLED" 2 415 "0x00"
d G "QEI_FILTER_ENABLE_T5CKI" 2 416 "0x40"
d G "QEI_FILTER_ENABLE_QEB" 2 417 "0x20"
d G "QEI_FILTER_ENABLE_QEA" 2 418 "0x10"
d G "QEI_FILTER_ENABLE_INDX" 2 419 "0x08"
d G "QEI_FILTER_DIV_1" 2 420 "0x00"
d G "QEI_FILTER_DIV_2" 2 421 "0x01"
d G "QEI_FILTER_DIV_4" 2 422 "0x02"
d G "QEI_FILTER_DIV_16" 2 423 "0x03"
d G "QEI_FILTER_DIV_32" 2 424 "0x04"
d G "QEI_FILTER_DIV_64" 2 425 "0x05"
d G "QEI_FILTER_DIV_128" 2 426 "0x06"
d G "QEI_GET_POSITION_COUNT" 2 429 "0"
d G "QEI_GET_VELOCITY_COUNT" 2 430 "1"
d G "QEI_ERROR" 2 433 "0x40"
d G "QEI_FORWARD" 2 434 "0x20"
c L "qei_status" 2 3 2 "FUNCTION"
v L "mode" 2 439 "int8" `205 
f B "setup_oscillator" 2 439 "int8(int8 mode)" `204 
v L "mode" 2 440 "int8" `207 
v L "tune" 2 440 "sint8" `208 
f G "setup_oscillator" 2 440 "int8(int8 mode,sint8 tune)" `206  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 2 442 "0"
d G "OSC_125KHZ" 2 443 "0x10"
d G "OSC_250KHZ" 2 444 "0x20"
d G "OSC_500KHZ" 2 445 "0x30"
d G "OSC_1MHZ" 2 446 "0x40"
d G "OSC_2MHZ" 2 447 "0x50"
d G "OSC_4MHZ" 2 448 "0x60"
d G "OSC_8MHZ" 2 449 "0x70"
d G "OSC_TIMER1" 2 451 "1"
d G "OSC_INTRC" 2 452 "2"
d G "OSC_NORMAL" 2 453 "0"
d G "OSC_IDLE_MODE" 2 455 "0x80"
d G "OSC_STATE_STABLE" 2 459 "4"
d G "OSC_STATE_EXT_RUNNING" 2 460 "8"
c L "setup_oscillator" 2 3 4 "FUNCTION"
v L "mode" 2 466 "int32" `210 
v L "postscale" 2 466 "int8" `211 
v L "time_base" 2 466 "int16" `212 
v L "period" 2 466 "int16" `213 
v L "compare" 2 466 "int8" `214 
v L "compare_postscale" 2 466 "int8" `215 
v L "dead_time" 2 466 "int8" `216 
f B "setup_power_pwm" 2 466 "void(int32 mode,int8 postscale,int16 time_base,int16 period,int8 compare,int8 compare_postscale,int8 dead_time)" `209 
v L "duty" 2 467 "int16" `218 
f B "set_power_pwm0_duty" 2 467 "void(int16 duty)" `217 
v L "duty" 2 468 "int16" `220 
f B "set_power_pwm2_duty" 2 468 "void(int16 duty)" `219 
v L "duty" 2 469 "int16" `222 
f B "set_power_pwm4_duty" 2 469 "void(int16 duty)" `221 
v L "duty" 2 470 "int16" `224 
f B "set_power_pwm6_duty" 2 470 "void(int16 duty)" `223 
v L "module0" 2 471 "int8" `226 
v L "module1" 2 471 "int8" `227 
v L "module2" 2 471 "int8" `228 
v L "module3" 2 471 "int8" `229 
f B "setup_power_pwm_pins" 2 471 "void(int8 module0,int8 module1,int8 module2,int8 module3)" `225 
v L "mode" 2 472 "int8" `231 
f B "setup_power_pwm_faults" 2 472 "void(int8 mode)" `230  "Constants used for SETUP_POWER_PWM() are:"
d G "PWM_CLOCK_DIV_4" 2 474 "0x00"
d G "PWM_CLOCK_DIV_16" 2 475 "0x04"
d G "PWM_CLOCK_DIV_64" 2 476 "0x08"
d G "PWM_CLOCK_DIV_128" 2 477 "0x0C"
d G "PWM_DISABLED" 2 479 "0x0000"
d G "PWM_FREE_RUN" 2 480 "0x8000"
d G "PWM_SINGLE_SHOT" 2 481 "0x8001"
d G "PWM_UP_DOWN" 2 482 "0x8002"
d G "PWM_UP_DOWN_INT" 2 483 "0x8003"
d G "PWM_OVERRIDE_SYNC" 2 485 "0x10000"
d G "PWM_UP_TRIGGER" 2 487 "0x00000"
d G "PWM_DOWN_TRIGGER" 2 488 "0x80000"
d G "PWM_DEAD_CLOCK_DIV_2" 2 490 "0x000000"
d G "PWM_DEAD_CLOCK_DIV_4" 2 491 "0x100000"
d G "PWM_DEAD_CLOCK_DIV_8" 2 492 "0x200000"
d G "PWM_DEAD_CLOCK_DIV_16" 2 493 "0x300000"
d G "PWM_UPDATE_DISABLE" 2 496 "0x20000"
d G "PWM_UPDATE_ENABLE" 2 497 "0x00000"
d G "PWM_PINS_DISABLED" 2 500 "0"
d G "PWM_ODD_ON" 2 501 "1"
d G "PWM_BOTH_ON" 2 502 "2"
d G "PWM_COMPLEMENTARY" 2 503 "3"
d G "PWM_ENABLE_FLTA" 2 506 "0x01"
d G "PWM_AUTO_CLEAR_FLTA" 2 507 "0x02"
d G "PWM_FLTA_FLTB_ALL" 2 508 "0x08"
d G "PWM_ENABLE_FLTB" 2 509 "0x10"
d G "PWM_AUTO_CLEAR_FLTB" 2 510 "0x20"
d G "PWM_FAULT_ON_BREAKPOINT" 2 511 "0x80"
c L "setup_power_pwm_faults" 2 3 4 "FUNCTION"
v L "mode" 2 521 "int32" `235 
f B "setup_adc" 2 521 "void(int32 mode)" `234 
f B "read_adc" 2 522 "int8()" `236 
v L "mode" 2 523 "int8" `238 
f G "read_adc" 2 523 "int8(int8 mode)" `237 
f G "read_adc" 2 524 "int16()" `239 
v L "mode" 2 525 "int8" `241 
f G "read_adc" 2 525 "int16(int8 mode)" `240 
f B "adc_done" 2 526 "int8()" `242  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 528 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 529 "0x1000000"
d G "ADC_CLOCK_DIV_4" 2 530 "0x0400"
d G "ADC_CLOCK_DIV_8" 2 531 "0x0100"
d G "ADC_CLOCK_DIV_16" 2 532 "0x0500"
d G "ADC_CLOCK_DIV_32" 2 533 "0x0200"
d G "ADC_CLOCK_DIV_64" 2 534 "0x0600"
d G "ADC_CLOCK_INTERNAL" 2 535 "0x0700" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 2 538 "0x0000"
d G "ADC_TAD_MUL_2" 2 539 "0x0800"
d G "ADC_TAD_MUL_4" 2 540 "0x1000"
d G "ADC_TAD_MUL_6" 2 541 "0x1800"
d G "ADC_TAD_MUL_8" 2 542 "0x2000"
d G "ADC_TAD_MUL_10" 2 543 "0x2800"
d G "ADC_TAD_MUL_12" 2 544 "0x3000"
d G "ADC_TAD_MUL_16" 2 545 "0x3800"
d G "ADC_TAD_MUL_20" 2 546 "0x4000"
d G "ADC_TAD_MUL_24" 2 547 "0x4800"
d G "ADC_TAD_MUL_28" 2 548 "0x5000"
d G "ADC_TAD_MUL_32" 2 549 "0x5800"
d G "ADC_TAD_MUL_36" 2 550 "0x6000"
d G "ADC_TAD_MUL_40" 2 551 "0x6800"
d G "ADC_TAD_MUL_48" 2 552 "0x7000"
d G "ADC_TAD_MUL_64" 2 553 "0x7800"
d G "ADC_SINGLE_SHOT_A" 2 556 "0x00" "Single conversion of Channels A"
d G "ADC_SINGLE_SHOT_B" 2 557 "0x04" "Single conversion of Channels B"
d G "ADC_SINGLE_SHOT_C" 2 558 "0x08" "Single conversion of Channels C"
d G "ADC_SINGLE_SHOT_D" 2 559 "0x0C" "Single conversion of Channels D"
d G "ADC_SINGLE_SHOT_A_B" 2 561 "0x10" "Single conversion of Channels A and B, sampling done sequentially"
d G "ADC_SINGLE_SHOT_A_B_C_D" 2 562 "0x14" "Single conversion of Channels A, B, C and D, sampling done sequentially"
d G "ADC_SINGLE_SHOT_AB" 2 563 "0x18" "Single conversion of Channels A and B, sampling done simultaneously"
d G "ADC_SINGLE_SHOT_AB_CD" 2 564 "0x1C" "Single conversion of Channels A, B, C and D, sampling A and B simultaneously then C and D simultaneously"
d G "ADC_CONT_A" 2 566 "0x20" "Channel A converted continuously"
d G "ADC_CONT_B" 2 567 "0x24" "Channel A converted continuously"
d G "ADC_CONT_C" 2 568 "0x28" "Channel A converted continuously"
d G "ADC_CONT_D" 2 569 "0x2C" "Channel A converted continuously"
d G "ADC_CONT_A_B" 2 571 "0x30" "Channels A and B converted continuously, sampling done sequentially"
d G "ADC_CONT_A_B_C_D" 2 572 "0x34" "Channels A, B, C and D converted continuously, sampling done sequentially"
d G "ADC_CONT_AB" 2 573 "0x38" "Channels A and B converted continuously, sampling done simultaneously"
d G "ADC_CONT_AB_CD" 2 574 "0x3C" "Channels A, B, C and D converted continuously, sampling A and B simultaneously then C and D simultaneously"
d G "ADC_FIFO_DISABLED" 2 577 "0x00000000" "ADC FIFO Buffer not used"
d G "ADC_FIFO_ENABLED" 2 578 "0x80000000" "ADC FIFO Buffer used, should be used if converting more then one channel or if continuous conversion"
d G "ADC_WHEN_INT0" 2 582 "0x010000"
d G "ADC_WHEN_TIMER5" 2 583 "0x020000"
d G "ADC_WHEN_IC1" 2 584 "0x040000"
d G "ADC_WHEN_CCP2" 2 585 "0x080000"
d G "ADC_WHEN_PPWM" 2 586 "0x100000"
d G "ADC_INT_EVERY_TIME" 2 589 "0x000000" "These options are"
d G "ADC_INT_EVERY_OTHER" 2 590 "0x400000" "ignored in single"
d G "ADC_INT_EVERY_FOUR" 2 591 "0x800000" "shot mode."
c L "adc_done" 2 3 3 "FUNCTION"
v L "pins" 2 597 "int32" `244 
f B "setup_adc_ports" 2 597 "void(int32 pins)" `243 
v L "pins" 2 598 "int32" `246 
v L "reference" 2 598 "int32" `247 
f G "setup_adc_ports" 2 598 "void(int32 pins,int32 reference)" `245 
v L "channel" 2 599 "int8" `249 
f B "set_adc_channel" 2 599 "void(int8 channel)" `248  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 2 603 "1" "| A0"
d G "sAN1" 2 604 "2" "| A1"
d G "sAN2" 2 605 "4" "| A2"
d G "sAN3" 2 606 "8" "| A3"
d G "sAN4" 2 607 "16" "| A4"
d G "sAN5" 2 608 "32" "| A5"
d G "sAN6" 2 609 "64" "| E0"
d G "sAN7" 2 610 "128" "| E1"
d G "sAN8" 2 611 "0x10000" "| E2"
d G "NO_ANALOGS" 2 612 "0" "None"
d G "ALL_ANALOG" 2 613 "0x100FF" "A0 A1 A2 A3 A4 A5 E0 E1 E2"
d G "VSS_VDD" 2 616 "0x0000" "| Range 0-Vdd"
d G "VREF_VREF" 2 617 "0xC000" "| Range VrefL-VrefH"
d G "VSS_VREF" 2 618 "0x4000" "| Range 0-VrefH"
d G "VREF_VDD" 2 619 "0x8000" "| Range VrefL-Vdd"
d G "ADC_START_AND_READ" 2 622 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 623 "1"
d G "ADC_READ_ONLY" 2 624 "6"
d G "ADC_READ_ONLY_FROM_INT" 2 625 "4"
c L "set_adc_channel" 2 3 3 "FUNCTION"
v L "x" 2 631 "sint8" `251 
f B "abs" 2 631 "sint8(sint8 x)" `250 
v L "x" 2 632 "sint16" `253 
f G "abs" 2 632 "sint16(sint16 x)" `252 
v L "x" 2 633 "sint32" `255 
f G "abs" 2 633 "sint32(sint32 x)" `254 
v L "x" 2 634 "float" `257 
f G "abs" 2 634 "float(float x)" `256 
v L "??65535" 2 635 "int8" `259 
v L "??65535" 2 635 "int8" `260 
f B "_mul" 2 635 "int16(int8 ,int8 )" `258 
v L "??65535" 2 636 "sint8" `259 
v L "??65535" 2 636 "sint8" `263 
f G "_mul" 2 636 "sint16(sint8 ,sint8 )" `261 
v L "??65535" 2 637 "int16" `259 
v L "??65535" 2 637 "int16" `266 
f G "_mul" 2 637 "int32(int16 ,int16 )" `264 
v L "??65535" 2 638 "sint16" `259 
v L "??65535" 2 638 "sint16" `269 
f G "_mul" 2 638 "sint32(sint16 ,sint16 )" `267  "Memory Manipulation Prototypes:"
v L "bank" 2 641 "int8" `271 
v L "offset" 2 641 "int8" `272 
f B "read_bank" 2 641 "int8(int8 bank,int8 offset)" `270 
v L "bank" 2 642 "int8" `274 
v L "offset" 2 642 "int8" `275 
v L "value" 2 642 "int8" `276 
f B "write_bank" 2 642 "void(int8 bank,int8 offset,int8 value)" `273 
v L "dest" 2 643 "*int8" `278 
v L "src" 2 643 "*int8" `279 
f B "strcpy" 2 643 "void(*int8 dest,*int8 src)" `277 
v L "dest" 2 644 "*int8" `281 
v L "src" 2 644 "*int8" `282 
f B "strcopy" 2 644 "void(*int8 dest,*int8 src)" `280 
v L "destination" 2 645 "*int8" `284 
v L "value" 2 645 "int8" `285 
v L "num" 2 645 "int16" `286 
f B "memset" 2 645 "void(*int8 destination,int8 value,int16 num)" `283 
v L "destination" 2 646 "*int8" `288 
v L "source" 2 646 "*int8" `289 
v L "num" 2 646 "int16" `290 
f B "memcpy" 2 646 "void(*int8 destination,*int8 source,int16 num)" `287  "String Prototypes:"
v L "cvalue" 2 649 "int8" `292 
f B "toupper" 2 649 "int8(int8 cvalue)" `291 
v L "cvalue" 2 650 "int8" `294 
f B "tolower" 2 650 "int8(int8 cvalue)" `293 
v L "string" 2 651 "*int8" `296 
v L "cstring" 2 651 "*int8" `297 
f B "sprintf" 2 651 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `295  "Data Manipulators Prototypes:"
v L "address" 2 654 "*int8" `300 
v L "bytes" 2 654 "int8" `301 
v L "value" 2 654 "int8" `302 
f B "shift_left" 2 654 "int8(*int8 address,int8 bytes,int8 value)" `299 
v L "address" 2 655 "*int8" `304 
v L "bytes" 2 655 "int8" `305 
v L "value" 2 655 "int8" `306 
f B "shift_right" 2 655 "int8(*int8 address,int8 bytes,int8 value)" `303 
v L "address" 2 656 "*int8" `308 
v L "bytes" 2 656 "int8" `309 
f B "rotate_left" 2 656 "void(*int8 address,int8 bytes)" `307 
v L "address" 2 657 "*int8" `311 
v L "bytes" 2 657 "int8" `312 
f B "rotate_right" 2 657 "void(*int8 address,int8 bytes)" `310 
v L "value" 2 658 "int8" `314 
f B "swap" 2 658 "void(int8 value)" `313 
v L "var" 2 659 "int16" `316 
v L "offset" 2 659 "int8" `317 
f B "make8" 2 659 "int8(int16 var,int8 offset)" `315 
v L "var" 2 660 "int32" `316 
v L "offset" 2 660 "int8" `320 
f G "make8" 2 660 "int8(int32 var,int8 offset)" `318 
v L "varhigh" 2 661 "int8" `322 
v L "varlow" 2 661 "int8" `323 
f B "make16" 2 661 "int16(int8 varhigh,int8 varlow)" `321 
v L "var1" 2 662 "int16" `325 
f B "make32" 2 662 "int32(int16 var1)" `324 
v L "var1" 2 663 "int16" `327 
v L "var2" 2 663 "int16" `328 
f G "make32" 2 663 "int32(int16 var1,int16 var2)" `326 
v L "var1" 2 664 "int16" `327 
v L "var2" 2 664 "int8" `331 
f G "make32" 2 664 "int32(int16 var1,int8 var2)" `329 
v L "var1" 2 665 "int16" `333 
v L "var2" 2 665 "int8" `334 
v L "var3" 2 665 "int8" `335 
f G "make32" 2 665 "int32(int16 var1,int8 var2,int8 var3)" `332 
v L "var1" 2 666 "int8" `337 
f G "make32" 2 666 "int32(int8 var1)" `336 
v L "var1" 2 667 "int8" `327 
v L "var2" 2 667 "int8" `340 
f G "make32" 2 667 "int32(int8 var1,int8 var2)" `338 
v L "var1" 2 668 "int8" `333 
v L "var2" 2 668 "int8" `334 
v L "var3" 2 668 "int8" `344 
f G "make32" 2 668 "int32(int8 var1,int8 var2,int8 var3)" `341 
v L "var1" 2 669 "int8" `346 
v L "var2" 2 669 "int8" `347 
v L "var3" 2 669 "int8" `348 
v L "var4" 2 669 "int8" `349 
f G "make32" 2 669 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `345 
v L "var1" 2 670 "int8" `327 
v L "var2" 2 670 "int16" `352 
f G "make32" 2 670 "int32(int8 var1,int16 var2)" `350 
v L "var1" 2 671 "int8" `333 
v L "var2" 2 671 "int16" `334 
v L "var3" 2 671 "int8" `356 
f G "make32" 2 671 "int32(int8 var1,int16 var2,int8 var3)" `353 
v L "var1" 2 672 "int8" `333 
v L "var2" 2 672 "int8" `334 
v L "var3" 2 672 "int16" `360 
f G "make32" 2 672 "int32(int8 var1,int8 var2,int16 var3)" `357 
v L "var" 2 673 "int8" `362 
v L "bit" 2 673 "int8" `363 
f B "bit_set" 2 673 "void(int8 var,int8 bit)" `361 
v L "var" 2 674 "int16" `362 
v L "bit" 2 674 "int8" `366 
f G "bit_set" 2 674 "void(int16 var,int8 bit)" `364 
v L "var" 2 675 "int32" `362 
v L "bit" 2 675 "int8" `369 
f G "bit_set" 2 675 "void(int32 var,int8 bit)" `367 
v L "var" 2 676 "int8" `371 
v L "bit" 2 676 "int8" `372 
f B "bit_clear" 2 676 "void(int8 var,int8 bit)" `370 
v L "var" 2 677 "int16" `371 
v L "bit" 2 677 "int8" `375 
f G "bit_clear" 2 677 "void(int16 var,int8 bit)" `373 
v L "var" 2 678 "int32" `371 
v L "bit" 2 678 "int8" `378 
f G "bit_clear" 2 678 "void(int32 var,int8 bit)" `376 
v L "var" 2 679 "int8" `380 
v L "bit" 2 679 "int8" `381 
f B "bit_test" 2 679 "int8(int8 var,int8 bit)" `379 
v L "var" 2 680 "int16" `380 
v L "bit" 2 680 "int8" `384 
f G "bit_test" 2 680 "int8(int16 var,int8 bit)" `382 
v L "var" 2 681 "int32" `380 
v L "bit" 2 681 "int8" `387 
f G "bit_test" 2 681 "int8(int32 var,int8 bit)" `385  "#use delay() Prototypes:"
v L "count" 2 684 "int8" `389 
f B "delay_cycles" 2 684 "void(int8 count)" `388 
v L "time" 2 685 "int16" `391 
f B "delay_ms" 2 685 "void(int16 time)" `390 
v L "time" 2 686 "int16" `393 
f B "delay_us" 2 686 "void(int16 time)" `392  "#use rs232() Prototypes:"
v L "cdata" 2 689 "int8" `395 
f B "putchar" 2 689 "void(int8 cdata)" `394 
v L "cdata" 2 690 "int8" `397 
v L "stream" 2 690 "int8" `398 
f G "putchar" 2 690 "void(int8 cdata,int8 stream)" `396 
v L "string" 2 691 "*int8" `400 
f B "puts" 2 691 "void(*int8 string)" `399 
v L "string" 2 692 "*int8" `402 
v L "stream" 2 692 "int8" `403 
f G "puts" 2 692 "void(*int8 string,int8 stream)" `401 
f B "getch" 2 693 "int8()" `404 
v L "stream" 2 694 "int8" `406 
f G "getch" 2 694 "int8(int8 stream)" `405 
v L "string" 2 695 "*int8" `408 
f B "gets" 2 695 "void(*int8 string)" `407 
v L "string" 2 696 "*int8" `410 
v L "stream" 2 696 "int8" `411 
f G "gets" 2 696 "void(*int8 string,int8 stream)" `409 
f B "kbhit" 2 697 "int8()" `412 
v L "stream" 2 698 "int8" `414 
f G "kbhit" 2 698 "int8(int8 stream)" `413 
v L "string" 2 699 "*int8" `416 
f B "printf" 2 699 "void(*int8 string,*int8 _VA_LIST)" `415 
v L "stream" 2 700 "int8" `419 
v L "string" 2 700 "*int8" `420 
f B "fprintf" 2 700 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `418 
f B "putc_send" 2 701 "void()" `422 
v L "stream" 2 702 "int8" `424 
f B "fputc_send" 2 702 "void(int8 stream)" `423 
f B "rcv_buffer_full" 2 703 "int8()" `425 
v L "stream" 2 704 "int8" `427 
f G "rcv_buffer_full" 2 704 "int8(int8 stream)" `426 
f B "rcv_buffer_bytes" 2 705 "int16()" `428 
v L "stream" 2 706 "int8" `430 
f G "rcv_buffer_bytes" 2 706 "int16(int8 stream)" `429 
f B "tx_buffer_full" 2 707 "int8()" `431 
v L "stream" 2 708 "int8" `433 
f G "tx_buffer_full" 2 708 "int8(int8 stream)" `432 
f B "tx_buffer_bytes" 2 709 "int16()" `434 
v L "stream" 2 710 "int8" `436 
f G "tx_buffer_bytes" 2 710 "int16(int8 stream)" `435  "#use i2c() Prototypes:"
f B "i2c_read" 2 713 "int8()" `437 
v L "stream" 2 714 "int8" `439 
f G "i2c_read" 2 714 "int8(int8 stream)" `438 
v L "stream" 2 715 "int8" `441 
v L "ack" 2 715 "int8" `442 
f G "i2c_read" 2 715 "int8(int8 stream,int8 ack)" `440 
v L "data" 2 716 "int8" `444 
f B "i2c_write" 2 716 "int8(int8 data)" `443 
v L "stream" 2 717 "int8" `446 
v L "data" 2 717 "int8" `447 
f G "i2c_write" 2 717 "int8(int8 stream,int8 data)" `445 
f B "i2c_start" 2 718 "void()" `448 
v L "stream" 2 719 "int8" `450 
f G "i2c_start" 2 719 "void(int8 stream)" `449 
v L "stream" 2 720 "int8" `452 
v L "restart" 2 720 "int8" `453 
f G "i2c_start" 2 720 "void(int8 stream,int8 restart)" `451 
f B "i2c_stop" 2 721 "void()" `454 
v L "stream" 2 722 "int8" `456 
f G "i2c_stop" 2 722 "void(int8 stream)" `455 
f B "i2c_isr_state" 2 723 "int8()" `457 
v L "addr" 2 724 "int8" `459 
f B "i2c_slaveaddr" 2 724 "void(int8 addr)" `458 
v L "stream" 2 725 "int8" `461 
v L "addr" 2 725 "int8" `462 
f G "i2c_slaveaddr" 2 725 "void(int8 stream,int8 addr)" `460 
f B "i2c_poll" 2 726 "int8()" `463 
v L "stream" 2 727 "int8" `465 
f G "i2c_poll" 2 727 "int8(int8 stream)" `464 
v L "baud" 2 728 "int32" `467 
f B "i2c_init" 2 728 "void(int32 baud)" `466 
v L "stream" 2 729 "int8" `469 
v L "baud" 2 729 "int32" `470 
f G "i2c_init" 2 729 "void(int8 stream,int32 baud)" `468  "#use spi() Prototypes:"
f B "spi_xfer" 2 732 "int8()" `471 
f G "spi_xfer" 2 733 "int16()" `472 
f G "spi_xfer" 2 734 "int32()" `473 
v L "data" 2 735 "int8" `475 
f G "spi_xfer" 2 735 "int8(int8 data)" `474 
v L "data" 2 736 "int16" `477 
f G "spi_xfer" 2 736 "int16(int16 data)" `476 
v L "data" 2 737 "int32" `479 
f G "spi_xfer" 2 737 "int32(int32 data)" `478 
v L "stream" 2 738 "int8" `481 
v L "data" 2 738 "int8" `482 
f G "spi_xfer" 2 738 "int8(int8 stream,int8 data)" `480 
v L "stream" 2 739 "int8" `481 
v L "data" 2 739 "int16" `485 
f G "spi_xfer" 2 739 "int16(int8 stream,int16 data)" `483 
v L "stream" 2 740 "int8" `481 
v L "data" 2 740 "int32" `488 
f G "spi_xfer" 2 740 "int32(int8 stream,int32 data)" `486 
v L "stream" 2 741 "int8" `490 
v L "data" 2 741 "int8" `491 
v L "bits" 2 741 "int8" `492 
f G "spi_xfer" 2 741 "int8(int8 stream,int8 data,int8 bits)" `489 
v L "stream" 2 742 "int8" `490 
v L "data" 2 742 "int16" `491 
v L "bits" 2 742 "int8" `496 
f G "spi_xfer" 2 742 "int16(int8 stream,int16 data,int8 bits)" `493 
v L "stream" 2 743 "int8" `490 
v L "data" 2 743 "int32" `491 
v L "bits" 2 743 "int8" `500 
f G "spi_xfer" 2 743 "int32(int8 stream,int32 data,int8 bits)" `497 
v L "baud" 2 744 "int32" `502 
f B "spi_init" 2 744 "void(int32 baud)" `501 
v L "stream" 2 745 "int8" `504 
v L "baud" 2 745 "int32" `505 
f G "spi_init" 2 745 "void(int8 stream,int32 baud)" `503 
v L "baud" 2 746 "int32" `507 
f B "spi_speed" 2 746 "void(int32 baud)" `506 
v L "stream" 2 747 "int8" `509 
v L "baud" 2 747 "int32" `510 
f G "spi_speed" 2 747 "void(int8 stream,int32 baud)" `508 
v L "stream" 2 748 "int8" `512 
v L "baud" 2 748 "int32" `513 
v L "clock" 2 748 "int32" `514 
f G "spi_speed" 2 748 "void(int8 stream,int32 baud,int32 clock)" `511 
v L "data" 2 749 "int8" `516 
f B "spi_prewrite" 2 749 "void(int8 data)" `515 
v L "data" 2 750 "int16" `518 
f G "spi_prewrite" 2 750 "void(int16 data)" `517 
v L "data" 2 751 "int32" `520 
f G "spi_prewrite" 2 751 "void(int32 data)" `519 
v L "??65535" 2 752 "int8" `522 
v L "data" 2 752 "int8" `523 
f G "spi_prewrite" 2 752 "void(int8 ,int8 data)" `521 
v L "??65535" 2 753 "int8" `522 
v L "data" 2 753 "int16" `526 
f G "spi_prewrite" 2 753 "void(int8 ,int16 data)" `524 
v L "??65535" 2 754 "int8" `522 
v L "data" 2 754 "int32" `529 
f G "spi_prewrite" 2 754 "void(int8 ,int32 data)" `527 
f B "spi_xfer_in" 2 755 "int8()" `530 
f G "spi_xfer_in" 2 756 "int16()" `531 
f G "spi_xfer_in" 2 757 "int32()" `532 
v L "bits" 2 758 "int8" `534 
f G "spi_xfer_in" 2 758 "int8(int8 bits)" `533 
v L "bits" 2 759 "int8" `536 
f G "spi_xfer_in" 2 759 "int16(int8 bits)" `535 
v L "bits" 2 760 "int8" `538 
f G "spi_xfer_in" 2 760 "int32(int8 bits)" `537 
v L "stream" 2 761 "int8" `540 
v L "bits" 2 761 "int8" `541 
f G "spi_xfer_in" 2 761 "int8(int8 stream,int8 bits)" `539 
v L "stream" 2 762 "int8" `540 
v L "bits" 2 762 "int8" `544 
f G "spi_xfer_in" 2 762 "int16(int8 stream,int8 bits)" `542 
v L "stream" 2 763 "int8" `540 
v L "bits" 2 763 "int8" `547 
f G "spi_xfer_in" 2 763 "int32(int8 stream,int8 bits)" `545  "#use rtos() Prototypes:"
f B "rtos_run" 2 766 "void()" `548 
f B "rtos_yield" 2 767 "void()" `549 
v L "task" 2 768 "int8" `551 
f B "rtos_enable" 2 768 "void(int8 task)" `550 
v L "task" 2 769 "int8" `553 
f B "rtos_disable" 2 769 "void(int8 task)" `552 
f B "rtos_terminate" 2 770 "void()" `554 
v L "flag" 2 771 "int8" `556 
f B "rtos_await" 2 771 "void(int8 flag)" `555 
v L "sem" 2 772 "int8" `558 
f B "rtos_wait" 2 772 "void(int8 sem)" `557 
v L "sem" 2 773 "int8" `560 
f B "rtos_signal" 2 773 "void(int8 sem)" `559 
v L "task" 2 774 "int8" `562 
v L "msg" 2 774 "int8" `563 
f B "rtos_msg_send" 2 774 "void(int8 task,int8 msg)" `561 
f B "rtos_msg_read" 2 775 "int8()" `564 
f B "rtos_msg_poll" 2 776 "int8()" `565 
v L "task" 2 777 "int8" `567 
f B "rtos_overrun" 2 777 "int8(int8 task)" `566 
v L "task" 2 778 "int8" `569 
v L "stat" 2 778 "*int8" `570 
f B "rtos_stats" 2 778 "void(int8 task,*int8 stat)" `568  "#use timer() Prototypes:"
f B "get_ticks" 2 781 "int8()" `571 
f G "get_ticks" 2 782 "int16()" `572 
f G "get_ticks" 2 783 "int32()" `573 
v L "stream" 2 784 "int8" `575 
f G "get_ticks" 2 784 "int8(int8 stream)" `574 
v L "stream" 2 785 "int8" `577 
f G "get_ticks" 2 785 "int16(int8 stream)" `576 
v L "stream" 2 786 "int8" `579 
f G "get_ticks" 2 786 "int32(int8 stream)" `578 
v L "value" 2 787 "int8" `581 
f B "set_ticks" 2 787 "void(int8 value)" `580 
v L "value" 2 788 "int16" `583 
f G "set_ticks" 2 788 "void(int16 value)" `582 
v L "value" 2 789 "int32" `585 
f G "set_ticks" 2 789 "void(int32 value)" `584 
v L "stream" 2 790 "int8" `587 
v L "value" 2 790 "int8" `588 
f G "set_ticks" 2 790 "void(int8 stream,int8 value)" `586 
v L "stream" 2 791 "int8" `587 
v L "value" 2 791 "int16" `591 
f G "set_ticks" 2 791 "void(int8 stream,int16 value)" `589 
v L "stream" 2 792 "int8" `587 
v L "value" 2 792 "int32" `594 
f G "set_ticks" 2 792 "void(int8 stream,int32 value)" `592  "#use pwm() Prototypes:"
f B "pwm_on" 2 795 "void()" `595 
v L "stream" 2 796 "int8" `597 
f G "pwm_on" 2 796 "void(int8 stream)" `596 
f B "pwm_off" 2 797 "void()" `598 
v L "stream" 2 798 "int8" `600 
f G "pwm_off" 2 798 "void(int8 stream)" `599 
v L "duty" 2 799 "int16" `602 
f B "pwm_set_duty" 2 799 "void(int16 duty)" `601 
v L "stream" 2 800 "int8" `604 
v L "duty" 2 800 "int16" `605 
f G "pwm_set_duty" 2 800 "void(int8 stream,int16 duty)" `603 
v L "percent" 2 801 "int16" `607 
f B "pwm_set_duty_percent" 2 801 "void(int16 percent)" `606 
v L "stream" 2 802 "int8" `609 
v L "percent" 2 802 "int16" `610 
f G "pwm_set_duty_percent" 2 802 "void(int8 stream,int16 percent)" `608 
v L "frequency" 2 803 "int32" `612 
f B "pwm_set_frequency" 2 803 "void(int32 frequency)" `611 
v L "stream" 2 804 "int8" `614 
v L "frequency" 2 804 "int32" `615 
f G "pwm_set_frequency" 2 804 "void(int8 stream,int32 frequency)" `613  "#use capture() Prototypes:"
f B "get_capture_time" 2 807 "int16()" `616 
v L "stream" 2 808 "int8" `618 
f G "get_capture_time" 2 808 "int16(int8 stream)" `617 
f B "get_capture_event" 2 809 "int8()" `619 
v L "stream" 2 810 "int8" `621 
f G "get_capture_event" 2 810 "int8(int8 stream)" `620  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
v L "address" 2 823 "int16" `623 
f B "goto_address" 2 823 "void(int16 address)" `622 
v L "label" 2 824 "int16" `625 
f B "label_address" 2 824 "int16(int16 label)" `624  "Program Memory Prototypes:"
v L "address" 2 827 "int16" `627 
v L "dataptr" 2 827 "*int8" `628 
v L "count" 2 827 "int16" `629 
f B "read_program_memory" 2 827 "void(int16 address,*int8 dataptr,int16 count)" `626 
v L "address" 2 828 "int16" `631 
f B "read_program_eeprom" 2 828 "int16(int16 address)" `630 
v L "address" 2 829 "int16" `633 
f B "erase_program_eeprom" 2 829 "void(int16 address)" `632 
v L "address" 2 830 "int16" `635 
v L "dataptr" 2 830 "*int8" `636 
v L "count" 2 830 "int16" `637 
f B "write_program_memory" 2 830 "void(int16 address,*int8 dataptr,int16 count)" `634 
v L "address" 2 831 "int16" `639 
v L "data" 2 831 "int16" `640 
f B "write_program_eeprom" 2 831 "void(int16 address,int16 data)" `638  "EEPROM Prototypes:"
t G "__EEADDRESS__" 2 836 "int16" `641 
v L "address" 2 841 "__EEADDRESS__" `643 
f B "read_eeprom" 2 841 "int8(__EEADDRESS__ address)" `642 
v L "address" 2 842 "__EEADDRESS__" `645 
v L "value" 2 842 "int8" `646 
f B "write_eeprom" 2 842 "void(__EEADDRESS__ address,int8 value)" `644  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
v L "interrupt" 2 849 "int32" `648 
f B "enable_interrupts" 2 849 "void(int32 interrupt)" `647 
v L "interrupt" 2 850 "int32" `650 
f B "disable_interrupts" 2 850 "void(int32 interrupt)" `649 
v L "interrupt" 2 851 "int32" `652 
f B "clear_interrupt" 2 851 "void(int32 interrupt)" `651 
v L "interrupt" 2 852 "int32" `654 
f B "interrupt_active" 2 852 "int8(int32 interrupt)" `653 
v L "interrupt" 2 853 "int32" `656 
f B "interrupt_enabled" 2 853 "int8(int32 interrupt)" `655 
v L "source" 2 854 "int8" `658 
v L "edge" 2 854 "int8" `659 
f B "ext_int_edge" 2 854 "void(int8 source,int8 edge)" `657 
v L "address" 2 855 "int16" `661 
f B "jump_to_irs" 2 855 "void(int16 address)" `660  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 857 "0x40"
d G "H_TO_L" 2 858 "0"
d G "GLOBAL" 2 860 "0xF2C0"
d G "PERIPH" 2 861 "0xF240"
d G "INT_RTCC" 2 862 "0x00F220"
d G "INT_TIMER0" 2 863 "0x00F220"
d G "INT_TIMER1" 2 864 "0x009D01"
d G "INT_TIMER2" 2 865 "0x009D02"
d G "INT_EXT_L2H" 2 866 "0x5000F210"
d G "INT_EXT_H2L" 2 867 "0x6000F210"
d G "INT_EXT" 2 868 "0x00F210"
d G "INT_EXT1_L2H" 2 869 "0x5001F008"
d G "INT_EXT1_H2L" 2 870 "0x6001F008"
d G "INT_EXT1" 2 871 "0x00F008"
d G "INT_EXT2_L2H" 2 872 "0x5002F010"
d G "INT_EXT2_H2L" 2 873 "0x6002F010"
d G "INT_EXT2" 2 874 "0x00F010"
d G "INT_RB" 2 875 "0x00FFF208"
d G "INT_AD" 2 876 "0x009D40"
d G "INT_RDA" 2 877 "0x009D20"
d G "INT_TBE" 2 878 "0x009D10"
d G "INT_SSP" 2 879 "0x009D08"
d G "INT_CCP1" 2 880 "0x009D04"
d G "INT_CCP2" 2 881 "0x00A001"
d G "INT_LOWVOLT" 2 882 "0x00A004"
d G "INT_EEPROM" 2 883 "0x00A010"
d G "INT_OSCF" 2 884 "0x00A080"
d G "INT_PWMTB" 2 885 "0x00A310"
d G "INT_IC3DR" 2 886 "0x00A308"
d G "INT_IC2QEI" 2 887 "0x00A304"
d G "INT_IC1" 2 888 "0x00A302"
d G "INT_TIMER5" 2 889 "0x00A301"
C L "jump_to_irs" 1 5 1 "FUNCTION"
C L "jump_to_irs" 0 3 1 "FUNCTION"
C L "jump_to_irs" 4 2 18 "FUNCTION"
F G "khoidong" 4 25 "void()" `1167 
C L "khoidong" 4 2 1 "FUNCTION"
C L "khoidong" 4 2 1 "FUNCTION"
C L "khoidong" 4 2 1 "FUNCTION"
C L "khoidong" 4 2 1 "FUNCTION"
C L "khoidong" 4 2 3 "FUNCTION"
C L "khoidong" 4 2 2 "FUNCTION"
C L "khoidong" 4 2 1 "FUNCTION"
C L "khoidong" 4 2 1 "FUNCTION"
C L "khoidong" 4 2 1 "FUNCTION"
C L "khoidong" 4 2 2 "FUNCTION"
V L "solan" 5 25 "int8" `1184 
V L "time" 5 25 "int8" `1185 
F G "beep" 5 26 "void(int8 solan,int8 time)" `1183 
V L "i" 5 27 "int8" `1186 
V L "x" 6 17 "int16" `1200 
F G "dc1t" 6 18 "void(int16 x)" `1199 
V L "x" 6 27 "int16" `1202 
F G "dc1n" 6 28 "void(int16 x)" `1201 
C L "dc1n" 6 2 1 "FUNCTION"
F G "resetdc1" 6 38 "void()" `1203 
V L "x" 6 47 "int16" `1205 
F G "dc2n" 6 48 "void(int16 x)" `1204 
V L "x" 6 57 "int16" `1207 
F G "dc2t" 6 58 "void(int16 x)" `1206 
F G "resetdc2" 6 68 "void()" `1208 
V G "En2" 7 3 "sint16" `1213 
D G "ChanelA" 7 4 "PIN_C4"
D G "ChanelB" 7 5 "PIN_C5"
F G "EXT1_L2H_isr" 7 8 "void()" `1214 
F G "EXT2_isr" 7 23 "void()" `1215 
V G "kp" 7 38 "float" `1216 
V G "ki" 7 38 "float" `1217 
V G "kd" 7 38 "float" `1218 
V G "pid1" 7 38 "float" `1219 
V G "pid2" 7 38 "float" `1220 
V G "realvt1" 7 39 "sint16" `1221 
V G "errs1" 7 39 "sint16" `1222 
V G "err1" 7 39 "sint16" `1223 
V G "delta1" 7 39 "sint16" `1224 
V G "epre1" 7 39 "sint16" `1225 
V G "duty1" 7 39 "sint16" `1226 
V G "Ti1" 7 40 "int8" `1227 
V G "Ti2" 7 40 "int8" `1228 
V G "setvt1" 7 41 "sint16" `1229 
V G "setvt2" 7 41 "sint16" `1230 
V G "vt1" 7 41 "sint16" `1231 
V G "vt2" 7 41 "sint16" `1232 
V L "setvt1" 7 43 "sint16" `1234 
V L "vt1" 7 43 "sint16" `1235 
F G "piddc1" 7 44 "void(sint16 setvt1,sint16 vt1)" `1233 
C L "piddc1" 7 2 1 "FUNCTION"
V G "realvt2" 7 69 "sint16" `1246 
V G "errs2" 7 69 "sint16" `1247 
V G "err2" 7 69 "sint16" `1248 
V G "delta2" 7 69 "sint16" `1249 
V G "epre2" 7 69 "sint16" `1250 
V G "duty2" 7 69 "sint16" `1251 
V L "setvt2" 7 70 "sint16" `1253 
V L "vt2" 7 70 "sint16" `1254 
F G "piddc2" 7 71 "void(sint16 setvt2,sint16 vt2)" `1252 
V G "demct" 0 10 "int8" `1255 
V G "chonct" 0 10 "int8" `1256 
V G "demservo" 0 13 "int8" `1257 
V G "xungleo" 0 13 "int8" `1258 
V G "dclep" 0 14 "int1" `1259 
F G "ngat_timer0" 0 17 "void()" `1260 
C L "ngat_timer1" 0 9 1 "FUNCTION"
F G "ngat_timer1" 0 45 "void()" `1261 
C L "ngat_timer5" 0 9 10 "FUNCTION"
F G "ngat_timer5" 0 71 "void()" `1262 
C L "resetvan" 0 9 2 "FUNCTION"
F G "resetvan" 8 5 "void()" `1263 
C L "nhiemvu2" 9 2 1 "FUNCTION"
F G "nhiemvu2" 9 5 "void()" `1264 
C L "nhiemvu2" 9 2 12 "FUNCTION"
C L "nhiemvu3" 10 2 1 "FUNCTION"
F G "nhiemvu3" 10 5 "void()" `1265 
C L "nhiemvu3x" 11 1 1 "FUNCTION"
F G "nhiemvu3x" 11 4 "void()" `1266 
V L "temp1" 11 5 "sint16" `1267 
V L "temp2" 11 5 "sint16" `1268 
V G "deml" 12 3 "int8" `1269 
F G "nhiemvu4" 12 5 "void()" `1270 
C L "nhiemvu4" 12 2 1 "FUNCTION"
V G "i" 0 92 "int8" `1271 
F G "MAIN" 0 95 "void()" `1272 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 4
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_5" 1 0
F B "get_timer5" 0 0
F B "set_timer5" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_power_pwm" 7 0
F B "set_power_pwm0_duty" 1 0
F B "set_power_pwm2_duty" 1 0
F B "set_power_pwm4_duty" 1 0
F B "set_power_pwm6_duty" 1 0
F B "set_power_pwm_override" 3 0
F B "setup_power_pwm_pins" 4 0
F B "setup_power_pwm_faults" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_qei" 1 3
F B "qei_set_count" 1 0
F B "qei_get_count" 0 1
F B "qei_status" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
