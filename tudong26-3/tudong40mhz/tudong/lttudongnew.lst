CCS PCH C Compiler, Version 5.015, 41519               26-Mar-14 20:24

               Filename:   F:\Robocon 2014\Lap trinh design\LAP TRINH ROBOT TU DONG\tudong26-3\tudong40mhz\tudong\lttudongnew.lst

               ROM used:   5080 bytes (31%)
                           Largest free fragment is 11300
               RAM used:   87 (11%) at main() level
                           119 (15%) worst case
               Stack used: 6 locations (3 in main + 3 for interrupts)
               Stack size: 31

*
0000:  GOTO   12A6
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF2.5
004A:  GOTO   0054
004E:  BTFSC  FF2.2
0050:  GOTO   0156
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   09EE
0060:  BTFSS  FF0.3
0062:  GOTO   006C
0066:  BTFSC  FF0.0
0068:  GOTO   00C6
006C:  BTFSS  FF0.4
006E:  GOTO   0078
0072:  BTFSC  FF0.1
0074:  GOTO   010E
0078:  BTFSS  FA3.0
007A:  GOTO   0084
007E:  BTFSC  FA4.0
0080:  GOTO   0A70
0084:  MOVFF  0E,00
0088:  MOVFF  0F,01
008C:  MOVFF  10,02
0090:  MOVFF  11,03
0094:  MOVFF  0C,FE9
0098:  MOVFF  07,FEA
009C:  BSF    07.7
009E:  MOVFF  08,FE1
00A2:  MOVFF  09,FE2
00A6:  MOVFF  0A,FD9
00AA:  MOVFF  0B,FDA
00AE:  MOVFF  12,FF3
00B2:  MOVFF  13,FF4
00B6:  MOVFF  14,FFA
00BA:  MOVF   04,W
00BC:  MOVFF  06,FE0
00C0:  MOVFF  05,FD8
00C4:  RETFIE 0
.................... #include <lttudongnew.h> 
.................... #include <18F4431.h> 
.................... //////////// Standard Header file for the PIC18F4431 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4431 
*
019A:  MOVLW  8E
019C:  MOVWF  00
019E:  MOVFF  68,01
01A2:  MOVFF  67,02
01A6:  CLRF   03
01A8:  BTFSS  x68.7
01AA:  BRA    01B6
01AC:  COMF   01,F
01AE:  COMF   02,F
01B0:  INCF   02,F
01B2:  BNZ   01B6
01B4:  INCF   01,F
01B6:  MOVF   01,F
01B8:  BNZ   01CC
01BA:  MOVFF  02,01
01BE:  CLRF   02
01C0:  MOVLW  08
01C2:  SUBWF  00,F
01C4:  MOVF   01,F
01C6:  BNZ   01CC
01C8:  CLRF   00
01CA:  BRA    01E0
01CC:  BCF    FD8.0
01CE:  BTFSC  01.7
01D0:  BRA    01DA
01D2:  RLCF   02,F
01D4:  RLCF   01,F
01D6:  DECF   00,F
01D8:  BRA    01CC
01DA:  BTFSC  x68.7
01DC:  BRA    01E0
01DE:  BCF    01.7
01E0:  RETURN 0
01E2:  MOVF   x67,W
01E4:  BTFSC  FD8.2
01E6:  BRA    02CA
01E8:  MOVWF  00
01EA:  MOVF   x6B,W
01EC:  BTFSC  FD8.2
01EE:  BRA    02CA
01F0:  ADDWF  00,F
01F2:  BNC   01FC
01F4:  MOVLW  81
01F6:  ADDWF  00,F
01F8:  BC    02CA
01FA:  BRA    0204
01FC:  MOVLW  7F
01FE:  SUBWF  00,F
0200:  BNC   02CA
0202:  BZ    02CA
0204:  MOVFF  68,6F
0208:  MOVF   x6C,W
020A:  XORWF  x6F,F
020C:  BSF    x68.7
020E:  BSF    x6C.7
0210:  MOVF   x6A,W
0212:  MULWF  x6E
0214:  MOVFF  FF4,71
0218:  MOVF   x69,W
021A:  MULWF  x6D
021C:  MOVFF  FF4,03
0220:  MOVFF  FF3,70
0224:  MULWF  x6E
0226:  MOVF   FF3,W
0228:  ADDWF  x71,F
022A:  MOVF   FF4,W
022C:  ADDWFC x70,F
022E:  MOVLW  00
0230:  ADDWFC 03,F
0232:  MOVF   x6A,W
0234:  MULWF  x6D
0236:  MOVF   FF3,W
0238:  ADDWF  x71,F
023A:  MOVF   FF4,W
023C:  ADDWFC x70,F
023E:  MOVLW  00
0240:  CLRF   02
0242:  ADDWFC 03,F
0244:  ADDWFC 02,F
0246:  MOVF   x68,W
0248:  MULWF  x6E
024A:  MOVF   FF3,W
024C:  ADDWF  x70,F
024E:  MOVF   FF4,W
0250:  ADDWFC 03,F
0252:  MOVLW  00
0254:  ADDWFC 02,F
0256:  MOVF   x68,W
0258:  MULWF  x6D
025A:  MOVF   FF3,W
025C:  ADDWF  03,F
025E:  MOVF   FF4,W
0260:  ADDWFC 02,F
0262:  MOVLW  00
0264:  CLRF   01
0266:  ADDWFC 01,F
0268:  MOVF   x6A,W
026A:  MULWF  x6C
026C:  MOVF   FF3,W
026E:  ADDWF  x70,F
0270:  MOVF   FF4,W
0272:  ADDWFC 03,F
0274:  MOVLW  00
0276:  ADDWFC 02,F
0278:  ADDWFC 01,F
027A:  MOVF   x69,W
027C:  MULWF  x6C
027E:  MOVF   FF3,W
0280:  ADDWF  03,F
0282:  MOVF   FF4,W
0284:  ADDWFC 02,F
0286:  MOVLW  00
0288:  ADDWFC 01,F
028A:  MOVF   x68,W
028C:  MULWF  x6C
028E:  MOVF   FF3,W
0290:  ADDWF  02,F
0292:  MOVF   FF4,W
0294:  ADDWFC 01,F
0296:  INCF   00,F
0298:  BTFSC  01.7
029A:  BRA    02A6
029C:  RLCF   x70,F
029E:  RLCF   03,F
02A0:  RLCF   02,F
02A2:  RLCF   01,F
02A4:  DECF   00,F
02A6:  MOVLW  00
02A8:  BTFSS  x70.7
02AA:  BRA    02C0
02AC:  INCF   03,F
02AE:  ADDWFC 02,F
02B0:  ADDWFC 01,F
02B2:  MOVF   01,W
02B4:  BNZ   02C0
02B6:  MOVF   02,W
02B8:  BNZ   02C0
02BA:  MOVF   03,W
02BC:  BNZ   02C0
02BE:  INCF   00,F
02C0:  BTFSC  x6F.7
02C2:  BSF    01.7
02C4:  BTFSS  x6F.7
02C6:  BCF    01.7
02C8:  BRA    02D2
02CA:  CLRF   00
02CC:  CLRF   01
02CE:  CLRF   02
02D0:  CLRF   03
02D2:  RETURN 0
02D4:  MOVLW  80
02D6:  BTFSC  FD8.1
02D8:  XORWF  x6C,F
02DA:  CLRF   x71
02DC:  CLRF   x72
02DE:  MOVFF  68,70
02E2:  MOVF   x6C,W
02E4:  XORWF  x70,F
02E6:  MOVF   x67,W
02E8:  BTFSC  FD8.2
02EA:  BRA    04A4
02EC:  MOVWF  x6F
02EE:  MOVWF  00
02F0:  MOVF   x6B,W
02F2:  BTFSC  FD8.2
02F4:  BRA    04B6
02F6:  SUBWF  x6F,F
02F8:  BTFSC  FD8.2
02FA:  BRA    03FE
02FC:  BNC   0378
02FE:  MOVFF  6C,75
0302:  BSF    x75.7
0304:  MOVFF  6D,74
0308:  MOVFF  6E,73
030C:  CLRF   x72
030E:  BCF    FD8.0
0310:  RRCF   x75,F
0312:  RRCF   x74,F
0314:  RRCF   x73,F
0316:  RRCF   x72,F
0318:  DECFSZ x6F,F
031A:  BRA    030C
031C:  BTFSS  x70.7
031E:  BRA    0326
0320:  BSF    x71.0
0322:  BRA    04DE
0324:  BCF    x71.0
0326:  BCF    x6F.0
0328:  BSF    x71.4
032A:  CLRF   FEA
032C:  MOVLW  6A
032E:  MOVWF  FE9
0330:  BRA    0504
0332:  BCF    x71.4
0334:  BTFSC  x70.7
0336:  BRA    034C
0338:  BTFSS  x6F.0
033A:  BRA    0362
033C:  RRCF   x75,F
033E:  RRCF   x74,F
0340:  RRCF   x73,F
0342:  RRCF   x72,F
0344:  INCF   00,F
0346:  BTFSC  FD8.2
0348:  BRA    04D4
034A:  BRA    0362
034C:  BTFSC  x75.7
034E:  BRA    0368
0350:  BCF    FD8.0
0352:  RLCF   x72,F
0354:  RLCF   x73,F
0356:  RLCF   x74,F
0358:  RLCF   x75,F
035A:  DECF   00,F
035C:  BTFSC  FD8.2
035E:  BRA    04D4
0360:  BRA    034C
0362:  BSF    x71.6
0364:  BRA    043C
0366:  BCF    x71.6
0368:  MOVFF  68,70
036C:  BTFSS  x68.7
036E:  BRA    0374
0370:  BSF    x75.7
0372:  BRA    04C6
0374:  BCF    x75.7
0376:  BRA    04C6
0378:  MOVFF  6B,6F
037C:  MOVFF  6B,00
0380:  MOVF   x67,W
0382:  SUBWF  x6F,F
0384:  MOVFF  68,75
0388:  BSF    x75.7
038A:  MOVFF  69,74
038E:  MOVFF  6A,73
0392:  CLRF   x72
0394:  BCF    FD8.0
0396:  RRCF   x75,F
0398:  RRCF   x74,F
039A:  RRCF   x73,F
039C:  RRCF   x72,F
039E:  DECFSZ x6F,F
03A0:  BRA    0392
03A2:  BTFSS  x70.7
03A4:  BRA    03AC
03A6:  BSF    x71.1
03A8:  BRA    04DE
03AA:  BCF    x71.1
03AC:  BCF    x6F.0
03AE:  BSF    x71.5
03B0:  CLRF   FEA
03B2:  MOVLW  6E
03B4:  MOVWF  FE9
03B6:  BRA    0504
03B8:  BCF    x71.5
03BA:  BTFSC  x70.7
03BC:  BRA    03D2
03BE:  BTFSS  x6F.0
03C0:  BRA    03E8
03C2:  RRCF   x75,F
03C4:  RRCF   x74,F
03C6:  RRCF   x73,F
03C8:  RRCF   x72,F
03CA:  INCF   00,F
03CC:  BTFSC  FD8.2
03CE:  BRA    04D4
03D0:  BRA    03E8
03D2:  BTFSC  x75.7
03D4:  BRA    03EE
03D6:  BCF    FD8.0
03D8:  RLCF   x72,F
03DA:  RLCF   x73,F
03DC:  RLCF   x74,F
03DE:  RLCF   x75,F
03E0:  DECF   00,F
03E2:  BTFSC  FD8.2
03E4:  BRA    04D4
03E6:  BRA    03D2
03E8:  BSF    x71.7
03EA:  BRA    043C
03EC:  BCF    x71.7
03EE:  MOVFF  6C,70
03F2:  BTFSS  x6C.7
03F4:  BRA    03FA
03F6:  BSF    x75.7
03F8:  BRA    04C6
03FA:  BCF    x75.7
03FC:  BRA    04C6
03FE:  MOVFF  6C,75
0402:  BSF    x75.7
0404:  MOVFF  6D,74
0408:  MOVFF  6E,73
040C:  BTFSS  x70.7
040E:  BRA    0418
0410:  BCF    x75.7
0412:  BSF    x71.2
0414:  BRA    04DE
0416:  BCF    x71.2
0418:  CLRF   x72
041A:  BCF    x6F.0
041C:  CLRF   FEA
041E:  MOVLW  6A
0420:  MOVWF  FE9
0422:  BRA    0504
0424:  BTFSC  x70.7
0426:  BRA    0460
0428:  MOVFF  68,70
042C:  BTFSS  x6F.0
042E:  BRA    043C
0430:  RRCF   x75,F
0432:  RRCF   x74,F
0434:  RRCF   x73,F
0436:  RRCF   x72,F
0438:  INCF   00,F
043A:  BZ    04D4
043C:  BTFSS  x72.7
043E:  BRA    0456
0440:  INCF   x73,F
0442:  BNZ   0456
0444:  INCF   x74,F
0446:  BNZ   0456
0448:  INCF   x75,F
044A:  BNZ   0456
044C:  RRCF   x75,F
044E:  RRCF   x74,F
0450:  RRCF   x73,F
0452:  INCF   00,F
0454:  BZ    04D4
0456:  BTFSC  x71.6
0458:  BRA    0366
045A:  BTFSC  x71.7
045C:  BRA    03EC
045E:  BRA    0498
0460:  MOVLW  80
0462:  XORWF  x75,F
0464:  BTFSS  x75.7
0466:  BRA    0470
0468:  BRA    04DE
046A:  MOVFF  6C,70
046E:  BRA    0484
0470:  MOVFF  68,70
0474:  MOVF   x75,F
0476:  BNZ   0484
0478:  MOVF   x74,F
047A:  BNZ   0484
047C:  MOVF   x73,F
047E:  BNZ   0484
0480:  CLRF   00
0482:  BRA    04C6
0484:  BTFSC  x75.7
0486:  BRA    0498
0488:  BCF    FD8.0
048A:  RLCF   x72,F
048C:  RLCF   x73,F
048E:  RLCF   x74,F
0490:  RLCF   x75,F
0492:  DECFSZ 00,F
0494:  BRA    0484
0496:  BRA    04D4
0498:  BTFSS  x70.7
049A:  BRA    04A0
049C:  BSF    x75.7
049E:  BRA    04C6
04A0:  BCF    x75.7
04A2:  BRA    04C6
04A4:  MOVFF  6B,00
04A8:  MOVFF  6C,75
04AC:  MOVFF  6D,74
04B0:  MOVFF  6E,73
04B4:  BRA    04C6
04B6:  MOVFF  67,00
04BA:  MOVFF  68,75
04BE:  MOVFF  69,74
04C2:  MOVFF  6A,73
04C6:  MOVFF  75,01
04CA:  MOVFF  74,02
04CE:  MOVFF  73,03
04D2:  BRA    053C
04D4:  CLRF   00
04D6:  CLRF   01
04D8:  CLRF   02
04DA:  CLRF   03
04DC:  BRA    053C
04DE:  CLRF   x72
04E0:  COMF   x73,F
04E2:  COMF   x74,F
04E4:  COMF   x75,F
04E6:  COMF   x72,F
04E8:  INCF   x72,F
04EA:  BNZ   04F6
04EC:  INCF   x73,F
04EE:  BNZ   04F6
04F0:  INCF   x74,F
04F2:  BNZ   04F6
04F4:  INCF   x75,F
04F6:  BTFSC  x71.0
04F8:  BRA    0324
04FA:  BTFSC  x71.1
04FC:  BRA    03AA
04FE:  BTFSC  x71.2
0500:  BRA    0416
0502:  BRA    046A
0504:  MOVF   FEF,W
0506:  ADDWF  x73,F
0508:  BNC   0514
050A:  INCF   x74,F
050C:  BNZ   0514
050E:  INCF   x75,F
0510:  BTFSC  FD8.2
0512:  BSF    x6F.0
0514:  MOVF   FED,F
0516:  MOVF   FEF,W
0518:  ADDWF  x74,F
051A:  BNC   0522
051C:  INCF   x75,F
051E:  BTFSC  FD8.2
0520:  BSF    x6F.0
0522:  MOVF   FED,F
0524:  MOVF   FEF,W
0526:  BTFSC  FEF.7
0528:  BRA    052C
052A:  XORLW  80
052C:  ADDWF  x75,F
052E:  BTFSC  FD8.0
0530:  BSF    x6F.0
0532:  BTFSC  x71.4
0534:  BRA    0332
0536:  BTFSC  x71.5
0538:  BRA    03B8
053A:  BRA    0424
053C:  RETURN 0
053E:  MOVLW  8E
0540:  MOVWF  00
0542:  MOVF   x63,W
0544:  SUBWF  00,F
0546:  MOVFF  64,02
054A:  MOVFF  65,01
054E:  BSF    02.7
0550:  MOVF   00,F
0552:  BZ    0566
0554:  BCF    FD8.0
0556:  MOVF   02,F
0558:  BNZ   055E
055A:  MOVF   01,F
055C:  BZ    0566
055E:  RRCF   02,F
0560:  RRCF   01,F
0562:  DECFSZ 00,F
0564:  BRA    0554
0566:  BTFSS  x64.7
0568:  BRA    0574
056A:  COMF   01,F
056C:  COMF   02,F
056E:  INCF   01,F
0570:  BTFSC  FD8.2
0572:  INCF   02,F
0574:  RETURN 0
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... //#FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                     //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(clock=40000000,crystal=10000000) 
*
0A24:  CLRF   FEA
0A26:  MOVLW  63
0A28:  MOVWF  FE9
0A2A:  MOVF   FEF,W
0A2C:  BZ    0A4A
0A2E:  MOVLW  0C
0A30:  MOVWF  01
0A32:  CLRF   00
0A34:  DECFSZ 00,F
0A36:  BRA    0A34
0A38:  DECFSZ 01,F
0A3A:  BRA    0A32
0A3C:  MOVLW  F7
0A3E:  MOVWF  00
0A40:  DECFSZ 00,F
0A42:  BRA    0A40
0A44:  BRA    0A46
0A46:  DECFSZ FEF,F
0A48:  BRA    0A2E
0A4A:  RETURN 0
....................  
....................  
.................... #include <PIC18F4431_registers.h> 
.................... #byte TOSU = 0xFFF 
.................... #word TOS = 0xFFE 
.................... #byte STKPTR = 0xFFC 
.................... #bit    STKOVF = STKPTR.7 
.................... #byte STKPTR = 0xFFC 
.................... #bit    STKPTR0 = STKPTR.0 
.................... #bit    STKPTR1 = STKPTR.1 
.................... #bit    STKPTR2 = STKPTR.2 
.................... #bit    STKPTR3 = STKPTR.3 
.................... #bit    STKPTR4 = STKPTR.4 
.................... #bit    STKUNF = STKPTR.6 
.................... #bit    STKFUL = STKPTR.7 
.................... #byte PCLATU = 0xFFB 
.................... #byte PCLATH = 0xFFA 
.................... #byte PCL = 0xFF9 
.................... #byte TBLPTRU = 0xFF8 
.................... #bit    TBLPTRU0 = TBLPTRU.0 
.................... #bit    TBLPTRU1 = TBLPTRU.1 
.................... #bit    TBLPTRU2 = TBLPTRU.2 
.................... #bit    TBLPTRU3 = TBLPTRU.3 
.................... #bit    TBLPTRU4 = TBLPTRU.4 
.................... #bit    ACSS = TBLPTRU.5 
.................... #word TBLPTR = 0xFF7 
.................... #byte TABLAT = 0xFF5 
.................... #word PROD = 0xFF4 
.................... #byte INTCON = 0xFF2 
.................... #bit    RBIF = INTCON.0 
.................... #bit    INT0IF = INTCON.1 
.................... #bit    TMR0IF = INTCON.2 
.................... #bit    RBIE = INTCON.3 
.................... #bit    INT0IE = INTCON.4 
.................... #bit    TMR0IE = INTCON.5 
.................... #bit    PEIE_GIEL = INTCON.6 
.................... #bit    GIE_GIEH = INTCON.7 
.................... #byte INTCON = 0xFF2 
.................... #bit    PEIE = INTCON.6 
.................... #bit    GIE = INTCON.7 
.................... #byte INTCON = 0xFF2 
.................... #bit    INT0F = INTCON.1 
.................... #bit    T0IF = INTCON.2 
.................... #bit    INT0E = INTCON.4 
.................... #bit    T0IE = INTCON.5 
.................... #bit    GIEL = INTCON.6 
.................... #bit    GIEH = INTCON.7 
.................... #byte INTCON2 = 0xFF1 
.................... #bit    T0IP = INTCON2.2 
.................... #byte INTCON2 = 0xFF1 
.................... #bit    RBIP = INTCON2.0 
.................... #bit    TMR0IP = INTCON2.2 
.................... #bit    INTEDG2 = INTCON2.4 
.................... #bit    INTEDG1 = INTCON2.5 
.................... #bit    INTEDG0 = INTCON2.6 
.................... #bit    RBPU = INTCON2.7 
.................... #byte INTCON3 = 0xFF0 
.................... #bit    INT1F = INTCON3.0 
.................... #bit    INT2F = INTCON3.1 
.................... #bit    INT1E = INTCON3.3 
.................... #bit    INT2E = INTCON3.4 
.................... #bit    INT1P = INTCON3.6 
.................... #bit    INT2P = INTCON3.7 
.................... #byte INTCON3 = 0xFF0 
.................... #bit    INT1IF = INTCON3.0 
.................... #bit    INT2IF = INTCON3.1 
.................... #bit    INT1IE = INTCON3.3 
.................... #bit    INT2IE = INTCON3.4 
.................... #bit    INT1IP = INTCON3.6 
.................... #bit    INT2IP = INTCON3.7 
.................... #byte INDF0 = 0xFEF 
.................... #byte POSTINC0 = 0xFEE 
.................... #byte POSTDEC0 = 0xFED 
.................... #byte PREINC0 = 0xFEC 
.................... #byte PLUSW0 = 0xFEB 
.................... #word FSR0 = 0xFEA 
.................... #byte WREG = 0xFE8 
.................... #byte INDF1 = 0xFE7 
.................... #byte POSTINC1 = 0xFE6 
.................... #byte POSTDEC1 = 0xFE5 
.................... #byte PREINC1 = 0xFE4 
.................... #byte PLUSW1 = 0xFE3 
.................... #word FSR1 = 0xFE2 
.................... #byte BSR = 0xFE0 
.................... #byte INDF2 = 0xFDF 
.................... #byte POSTINC2 = 0xFDE 
.................... #byte POSTDEC2 = 0xFDD 
.................... #byte PREINC2 = 0xFDC 
.................... #byte PLUSW2 = 0xFDB 
.................... #word FSR2 = 0xFDA 
.................... #byte STATUS = 0xFD8 
.................... #bit    C = STATUS.0 
.................... #bit    DC = STATUS.1 
.................... #bit    Z = STATUS.2 
.................... #bit    OV = STATUS.3 
.................... #bit    N = STATUS.4 
.................... #word TMR0 = 0xFD7 
.................... #byte T0CON = 0xFD5 
.................... #bit    T0PS0 = T0CON.0 
.................... #bit    T0PS1 = T0CON.1 
.................... #bit    T0PS2 = T0CON.2 
.................... #bit    PSA = T0CON.3 
.................... #bit    T0SE = T0CON.4 
.................... #bit    T0CS = T0CON.5 
.................... #bit    T016BIT = T0CON.6 
.................... #bit    TMR0ON = T0CON.7 
.................... #byte OSCCON = 0xFD3 
.................... #bit    FLTS = OSCCON.2 
.................... #byte OSCCON = 0xFD3 
.................... #bit    SCS0 = OSCCON.0 
.................... #bit    SCS1 = OSCCON.1 
.................... #bit    IOFS = OSCCON.2 
.................... #bit    OSTS = OSCCON.3 
.................... #bit    IRCF0 = OSCCON.4 
.................... #bit    IRCF1 = OSCCON.5 
.................... #bit    IRCF2 = OSCCON.6 
.................... #bit    IDLEN = OSCCON.7 
.................... #byte LVDCON = 0xFD2 
.................... #bit    IVRST = LVDCON.5 
.................... #byte LVDCON = 0xFD2 
.................... #bit    LVDL0 = LVDCON.0 
.................... #bit    LVDL1 = LVDCON.1 
.................... #bit    LVDL2 = LVDCON.2 
.................... #bit    LVDL3 = LVDCON.3 
.................... #bit    LVDEN = LVDCON.4 
.................... #bit    IRVST = LVDCON.5 
.................... #byte WDTCON = 0xFD1 
.................... #bit    SWDTEN = WDTCON.0 
.................... #bit    WDTW = WDTCON.7 
.................... #byte RCON = 0xFD0 
.................... #bit    BOR = RCON.0 
.................... #bit    POR = RCON.1 
.................... #bit    PD = RCON.2 
.................... #bit    TO = RCON.3 
.................... #bit    RI = RCON.4 
.................... #bit    IPEN = RCON.7 
.................... #word TMR1 = 0xFCF 
.................... #byte T1CON = 0xFCD 
.................... #bit    T1INSYNC = T1CON.2 
.................... #byte T1CON = 0xFCD 
.................... #bit    TMR1ON = T1CON.0 
.................... #bit    TMR1CS = T1CON.1 
.................... #bit    T1SYNC = T1CON.2 
.................... #bit    T1OSCEN = T1CON.3 
.................... #bit    T1CKPS0 = T1CON.4 
.................... #bit    T1CKPS1 = T1CON.5 
.................... #bit    T1RUN = T1CON.6 
.................... #bit    RD16 = T1CON.7 
.................... #byte TMR2 = 0xFCC 
.................... #byte PR2 = 0xFCB 
.................... #byte T2CON = 0xFCA 
.................... #bit    T2OUTPS0 = T2CON.3 
.................... #bit    T2OUTPS1 = T2CON.4 
.................... #bit    T2OUTPS2 = T2CON.5 
.................... #bit    T2OUTPS3 = T2CON.6 
.................... #byte T2CON = 0xFCA 
.................... #bit    T2CKPS0 = T2CON.0 
.................... #bit    T2CKPS1 = T2CON.1 
.................... #bit    TMR2ON = T2CON.2 
.................... #bit    TOUTPS0 = T2CON.3 
.................... #bit    TOUTPS1 = T2CON.4 
.................... #bit    TOUTPS2 = T2CON.5 
.................... #bit    TOUTPS3 = T2CON.6 
.................... #byte SSPBUF = 0xFC9 
.................... #byte SSPADD = 0xFC8 
.................... #byte SSPSTAT = 0xFC7 
.................... #bit    READ_WRITE = SSPSTAT.2 
.................... #bit    DATA_ADDRESS = SSPSTAT.5 
.................... #byte SSPSTAT = 0xFC7 
.................... #bit    WRITE = SSPSTAT.2 
.................... #bit    ADDRESS = SSPSTAT.5 
.................... #byte SSPSTAT = 0xFC7 
.................... #bit    BF = SSPSTAT.0 
.................... #bit    UA = SSPSTAT.1 
.................... #bit    R = SSPSTAT.2 
.................... #bit    S = SSPSTAT.3 
.................... #bit    P = SSPSTAT.4 
.................... #bit    D = SSPSTAT.5 
.................... #bit    CKE = SSPSTAT.6 
.................... #bit    SMP = SSPSTAT.7 
.................... #byte SSPSTAT = 0xFC7 
.................... #bit    R_W = SSPSTAT.2 
.................... #bit    D_A = SSPSTAT.5 
.................... #byte SSPSTAT = 0xFC7 
.................... #bit    W = SSPSTAT.2 
.................... #bit    A = SSPSTAT.5 
.................... #byte SSPCON = 0xFC6 
.................... #bit    SSPM0 = SSPCON.0 
.................... #bit    SSPM1 = SSPCON.1 
.................... #bit    SSPM2 = SSPCON.2 
.................... #bit    SSPM3 = SSPCON.3 
.................... #bit    CKP = SSPCON.4 
.................... #bit    SSPEN = SSPCON.5 
.................... #bit    SSPOV = SSPCON.6 
.................... #bit    WCOL = SSPCON.7 
.................... #word ADRES = 0xFC4 
.................... #byte ADCON0 = 0xFC2 
.................... #bit    GO_DONE = ADCON0.1 
.................... #byte ADCON0 = 0xFC2 
.................... #bit    ADON = ADCON0.0 
.................... #bit    GO = ADCON0.1 
.................... #bit    ACMOD0 = ADCON0.2 
.................... #bit    ACMOD1 = ADCON0.3 
.................... #bit    ACSCH = ADCON0.4 
.................... #bit    ACONV = ADCON0.5 
.................... #byte ADCON0 = 0xFC2 
.................... #bit    GODONE = ADCON0.1 
.................... #byte ADCON0 = 0xFC2 
.................... #bit    DONE = ADCON0.1 
.................... #byte ADCON1 = 0xFC1 
.................... #bit    FFOVFL = ADCON1.2 
.................... #byte ADCON1 = 0xFC1 
.................... #bit    ADPNT0 = ADCON1.0 
.................... #bit    ADPNT1 = ADCON1.1 
.................... #bit    BFOVFL = ADCON1.2 
.................... #bit    BFEMT = ADCON1.3 
.................... #bit    FIFOEN = ADCON1.4 
.................... #bit    VCFG0 = ADCON1.6 
.................... #bit    VCFG1 = ADCON1.7 
.................... #byte ADCON2 = 0xFC0 
.................... #bit    ADCS0 = ADCON2.0 
.................... #bit    ADCS1 = ADCON2.1 
.................... #bit    ADCS2 = ADCON2.2 
.................... #bit    ACQT0 = ADCON2.3 
.................... #bit    ACQT1 = ADCON2.4 
.................... #bit    ACQT2 = ADCON2.5 
.................... #bit    ACQT3 = ADCON2.6 
.................... #bit    ADFM = ADCON2.7 
.................... #word CCPR1 = 0xFBF 
.................... #byte CCP1CON = 0xFBD 
.................... #bit    CCP1Y = CCP1CON.4 
.................... #bit    CCP1X = CCP1CON.5 
.................... #byte CCP1CON = 0xFBD 
.................... #bit    CCP1M0 = CCP1CON.0 
.................... #bit    CCP1M1 = CCP1CON.1 
.................... #bit    CCP1M2 = CCP1CON.2 
.................... #bit    CCP1M3 = CCP1CON.3 
.................... #bit    DC1B0 = CCP1CON.4 
.................... #bit    DC1B1 = CCP1CON.5 
.................... #word CCPR2 = 0xFBC 
.................... #byte CCP2CON = 0xFBA 
.................... #bit    CCP2Y = CCP2CON.4 
.................... #bit    CCP2X = CCP2CON.5 
.................... #byte CCP2CON = 0xFBA 
.................... #bit    CCP2M0 = CCP2CON.0 
.................... #bit    CCP2M1 = CCP2CON.1 
.................... #bit    CCP2M2 = CCP2CON.2 
.................... #bit    CCP2M3 = CCP2CON.3 
.................... #bit    DC2B0 = CCP2CON.4 
.................... #bit    DC2B1 = CCP2CON.5 
.................... #byte ANSEL1 = 0xFB9 
.................... #bit    ANS8 = ANSEL1.0 
.................... #byte ANSEL0 = 0xFB8 
.................... #byte T5CON = 0xFB7 
.................... #bit    TMR5ON = T5CON.0 
.................... #bit    TMR5CS = T5CON.1 
.................... #bit    T5SYNC = T5CON.2 
.................... #bit    T5PS0 = T5CON.3 
.................... #bit    T5PS1 = T5CON.4 
.................... #bit    T5MOD = T5CON.5 
.................... #bit    RESEN = T5CON.6 
.................... #bit    T5SEN = T5CON.7 
.................... #byte QEICON = 0xFB6 
.................... #bit    UP_DOWN = QEICON.5 
.................... #byte QEICON = 0xFB6 
.................... #bit    PDEC0 = QEICON.0 
.................... #bit    PDEC1 = QEICON.1 
.................... #bit    QEIM0 = QEICON.2 
.................... #bit    QEIM1 = QEICON.3 
.................... #bit    QEIM2 = QEICON.4 
.................... #bit    UP = QEICON.5 
.................... #bit    QERR = QEICON.6 
.................... #bit    VELM = QEICON.7 
.................... #byte QEICON = 0xFB6 
.................... #bit    UPDOWN = QEICON.5 
.................... #byte QEICON = 0xFB6 
.................... #bit    DOWN = QEICON.5 
.................... #byte SPBRGH = 0xFB0 
.................... #byte SPBRG = 0xFAF 
.................... #byte RCREG = 0xFAE 
.................... #byte TXREG = 0xFAD 
.................... #byte TXSTA = 0xFAC 
.................... #bit    TX9D = TXSTA.0 
.................... #bit    TRMT = TXSTA.1 
.................... #bit    BRGH = TXSTA.2 
.................... #bit    SENDB = TXSTA.3 
.................... #bit    SYNC = TXSTA.4 
.................... #bit    TXEN = TXSTA.5 
.................... #bit    TX9 = TXSTA.6 
.................... #bit    CSRC = TXSTA.7 
.................... #byte RCSTA = 0xFAB 
.................... #bit    ADEN = RCSTA.3 
.................... #byte RCSTA = 0xFAB 
.................... #bit    RX9D = RCSTA.0 
.................... #bit    OERR = RCSTA.1 
.................... #bit    FERR = RCSTA.2 
.................... #bit    ADDEN = RCSTA.3 
.................... #bit    CREN = RCSTA.4 
.................... #bit    SREN = RCSTA.5 
.................... #bit    RX9 = RCSTA.6 
.................... #bit    SPEN = RCSTA.7 
.................... #byte BAUDCON = 0xFAA 
.................... #bit    SCKP = BAUDCON.4 
.................... #bit    RCMT = BAUDCON.6 
.................... #byte BAUDCON = 0xFAA 
.................... #bit    ABDEN = BAUDCON.0 
.................... #bit    WUE = BAUDCON.1 
.................... #bit    BRG16 = BAUDCON.3 
.................... #bit    TXCKP = BAUDCON.4 
.................... #bit    RXDTP = BAUDCON.5 
.................... #bit    RCIDL = BAUDCON.6 
.................... #bit    ABDOVF = BAUDCON.7 
.................... #byte EEADR = 0xFA9 
.................... #byte EEDATA = 0xFA8 
.................... #byte EECON2 = 0xFA7 
.................... #byte EECON1 = 0xFA6 
.................... #bit    RD = EECON1.0 
.................... #bit    WR = EECON1.1 
.................... #bit    WREN = EECON1.2 
.................... #bit    WRERR = EECON1.3 
.................... #bit    FREE = EECON1.4 
.................... #bit    CFGS = EECON1.6 
.................... #bit    EEPGD = EECON1.7 
.................... #byte IPR3 = 0xFA5 
.................... #bit    TMR5IP = IPR3.0 
.................... #bit    IC1IP = IPR3.1 
.................... #bit    IC2QEIP = IPR3.2 
.................... #bit    IC3DRIP = IPR3.3 
.................... #bit    PTIP = IPR3.4 
.................... #byte PIR3 = 0xFA4 
.................... #bit    TMR5IF = PIR3.0 
.................... #bit    IC1IF = PIR3.1 
.................... #bit    IC2QEIF = PIR3.2 
.................... #bit    IC3DRIF = PIR3.3 
.................... #bit    PTIF = PIR3.4 
.................... #byte PIE3 = 0xFA3 
.................... #bit    TMR5IE = PIE3.0 
.................... #bit    IC1IE = PIE3.1 
.................... #bit    IC2QEIE = PIE3.2 
.................... #bit    IC3DRIE = PIE3.3 
.................... #bit    PTIE = PIE3.4 
.................... #byte IPR2 = 0xFA2 
.................... #bit    CCP2IP = IPR2.0 
.................... #bit    LVDIP = IPR2.2 
.................... #bit    EEIP = IPR2.4 
.................... #bit    OSFIP = IPR2.7 
.................... #byte PIR2 = 0xFA1 
.................... #bit    CCP2IF = PIR2.0 
.................... #bit    LVDIF = PIR2.2 
.................... #bit    EEIF = PIR2.4 
.................... #bit    OSFIF = PIR2.7 
.................... #byte PIE2 = 0xFA0 
.................... #bit    CCP2IE = PIE2.0 
.................... #bit    LVDIE = PIE2.2 
.................... #bit    EEIE = PIE2.4 
.................... #bit    OSFIE = PIE2.7 
.................... #byte IPR1 = 0xF9F 
.................... #bit    TBIP = IPR1.4 
.................... #byte IPR1 = 0xF9F 
.................... #bit    TMR1IP = IPR1.0 
.................... #bit    TMR2IP = IPR1.1 
.................... #bit    CCP1IP = IPR1.2 
.................... #bit    SSPIP = IPR1.3 
.................... #bit    TXIP = IPR1.4 
.................... #bit    RCIP = IPR1.5 
.................... #bit    ADIP = IPR1.6 
.................... #byte PIR1 = 0xF9E 
.................... #bit    TBIF = PIR1.4 
.................... #byte PIR1 = 0xF9E 
.................... #bit    TMR1IF = PIR1.0 
.................... #bit    TMR2IF = PIR1.1 
.................... #bit    CCP1IF = PIR1.2 
.................... #bit    SSPIF = PIR1.3 
.................... #bit    TXIF = PIR1.4 
.................... #bit    RCIF = PIR1.5 
.................... #bit    ADIF = PIR1.6 
.................... #byte PIE1 = 0xF9D 
.................... #bit    TBIE = PIE1.4 
.................... #byte PIE1 = 0xF9D 
.................... #bit    TMR1IE = PIE1.0 
.................... #bit    TMR2IE = PIE1.1 
.................... #bit    CCP1IE = PIE1.2 
.................... #bit    SSPIE = PIE1.3 
.................... #bit    TXIE = PIE1.4 
.................... #bit    RCIE = PIE1.5 
.................... #bit    ADIE = PIE1.6 
.................... #byte OSCTUNE = 0xF9B 
.................... #byte ADCON3 = 0xF9A 
.................... #bit    SSRC0 = ADCON3.0 
.................... #bit    SSRC1 = ADCON3.1 
.................... #bit    SSRC2 = ADCON3.2 
.................... #bit    SSRC3 = ADCON3.3 
.................... #bit    SSRC4 = ADCON3.4 
.................... #bit    ADRS0 = ADCON3.6 
.................... #bit    ADRS1 = ADCON3.7 
.................... #byte ADCHS = 0xF99 
.................... #bit    GASEL0 = ADCHS.0 
.................... #bit    GASEL1 = ADCHS.1 
.................... #bit    GCSEL0 = ADCHS.2 
.................... #bit    GCSEL1 = ADCHS.3 
.................... #bit    GBSEL0 = ADCHS.4 
.................... #bit    GBSEL1 = ADCHS.5 
.................... #bit    GDSEL0 = ADCHS.6 
.................... #bit    GDSEL1 = ADCHS.7 
.................... #byte ADCHS = 0xF99 
.................... #bit    SASEL0 = ADCHS.0 
.................... #bit    SASEL1 = ADCHS.1 
.................... #bit    SCSEL0 = ADCHS.2 
.................... #bit    SCSEL1 = ADCHS.3 
.................... #bit    SBSEL0 = ADCHS.4 
.................... #bit    SBSEL1 = ADCHS.5 
.................... #bit    SDSEL0 = ADCHS.6 
.................... #bit    SDSEL1 = ADCHS.7 
.................... #byte TRISE = 0xF96 
.................... #byte TRISD = 0xF95 
.................... #byte TRISC = 0xF94 
.................... #byte TRISB = 0xF93 
.................... #byte TRISA = 0xF92 
.................... #word PR5 = 0xF91 
.................... #byte LATE = 0xF8D 
.................... #byte LATD = 0xF8C 
.................... #byte LATC = 0xF8B 
.................... #byte LATB = 0xF8A 
.................... #byte LATA = 0xF89 
.................... #word TMR5 = 0xF88 
.................... #byte PORTE = 0xF84 
.................... #byte PORTD = 0xF83 
.................... #byte PORTC = 0xF82 
.................... #byte PORTB = 0xF81 
.................... #byte PORTA = 0xF80 
.................... #byte PTCON0 = 0xF7F 
.................... #bit    PTMOD0 = PTCON0.0 
.................... #bit    PTMOD1 = PTCON0.1 
.................... #bit    PTCKPS0 = PTCON0.2 
.................... #bit    PTCKPS1 = PTCON0.3 
.................... #bit    PTOPS0 = PTCON0.4 
.................... #bit    PTOPS1 = PTCON0.5 
.................... #bit    PTOPS2 = PTCON0.6 
.................... #bit    PTOPS3 = PTCON0.7 
.................... #byte PTCON1 = 0xF7E 
.................... #bit    PTDIR = PTCON1.6 
.................... #bit    PTEN = PTCON1.7 
.................... #byte PTMRL = 0xF7D 
.................... #byte PTMRH = 0xF7C 
.................... #byte PTPERL = 0xF7B 
.................... #byte PTPERH = 0xF7A 
.................... #byte PDC0L = 0xF79 
.................... #byte PDC0H = 0xF78 
.................... #byte PDC1L = 0xF77 
.................... #byte PDC1H = 0xF76 
.................... #byte PDC2L = 0xF75 
.................... #byte PDC2H = 0xF74 
.................... #byte PDC3L = 0xF73 
.................... #byte PDC3H = 0xF72 
.................... #byte SEVTCMPL = 0xF71 
.................... #byte SEVTCMPH = 0xF70 
.................... #byte PWMCON0 = 0xF6F 
.................... #bit    PMOD0 = PWMCON0.0 
.................... #bit    PMOD1 = PWMCON0.1 
.................... #bit    PMOD2 = PWMCON0.2 
.................... #bit    PMOD3 = PWMCON0.3 
.................... #bit    PWMEN0 = PWMCON0.4 
.................... #bit    PWMEN1 = PWMCON0.5 
.................... #bit    PWMEN2 = PWMCON0.6 
.................... #byte PWMCON1 = 0xF6E 
.................... #bit    OSYNC = PWMCON1.0 
.................... #bit    UDIS = PWMCON1.1 
.................... #bit    SEVTDIR = PWMCON1.3 
.................... #bit    SEVOPS0 = PWMCON1.4 
.................... #bit    SEVOPS1 = PWMCON1.5 
.................... #bit    SEVOPS2 = PWMCON1.6 
.................... #bit    SEVOPS3 = PWMCON1.7 
.................... #byte DTCON = 0xF6D 
.................... #bit    DT0 = DTCON.0 
.................... #bit    DT1 = DTCON.1 
.................... #bit    DT2 = DTCON.2 
.................... #bit    DT3 = DTCON.3 
.................... #bit    DT4 = DTCON.4 
.................... #bit    DT5 = DTCON.5 
.................... #bit    DTPS0 = DTCON.6 
.................... #bit    DTPS1 = DTCON.7 
.................... #byte DTCON = 0xF6D 
.................... #bit    DTA0 = DTCON.0 
.................... #bit    DTA1 = DTCON.1 
.................... #bit    DTA2 = DTCON.2 
.................... #bit    DTA3 = DTCON.3 
.................... #bit    DTA4 = DTCON.4 
.................... #bit    DTA5 = DTCON.5 
.................... #bit    DTAPS0 = DTCON.6 
.................... #bit    DTAPS1 = DTCON.7 
.................... #byte FLTCONFIG = 0xF6C 
.................... #bit    FLTAEN = FLTCONFIG.0 
.................... #bit    FLTAMOD = FLTCONFIG.1 
.................... #bit    FLTAS = FLTCONFIG.2 
.................... #bit    FLTCON = FLTCONFIG.3 
.................... #bit    FLTBEN = FLTCONFIG.4 
.................... #bit    FLTBMOD = FLTCONFIG.5 
.................... #bit    FLTBS = FLTCONFIG.6 
.................... #bit    BRFEN = FLTCONFIG.7 
.................... #byte OVDCOND = 0xF6B 
.................... #byte OVDCONS = 0xF6A 
.................... #word CAP1BUF = 0xF69 
.................... #word CAP2BUF = 0xF67 
.................... #word CAP3BUF = 0xF65 
.................... #byte CAP1CON = 0xF63 
.................... #bit    CAP1M0 = CAP1CON.0 
.................... #bit    CAP1M1 = CAP1CON.1 
.................... #bit    CAP1M2 = CAP1CON.2 
.................... #bit    CAP1M3 = CAP1CON.3 
.................... #bit    CAP1TMR = CAP1CON.5 
.................... #bit    CAP1REN = CAP1CON.6 
.................... #byte CAP2CON = 0xF62 
.................... #bit    CAP2M0 = CAP2CON.0 
.................... #bit    CAP2M1 = CAP2CON.1 
.................... #bit    CAP2M2 = CAP2CON.2 
.................... #bit    CAP2M3 = CAP2CON.3 
.................... #bit    CAP2TMR = CAP2CON.5 
.................... #bit    CAP2REN = CAP2CON.6 
.................... #byte CAP3CON = 0xF61 
.................... #bit    CAP3M0 = CAP3CON.0 
.................... #bit    CAP3M1 = CAP3CON.1 
.................... #bit    CAP3M2 = CAP3CON.2 
.................... #bit    CAP3M3 = CAP3CON.3 
.................... #bit    CAP3TMR = CAP3CON.5 
.................... #bit    CAP3REN = CAP3CON.6 
.................... #byte DFLTCON = 0xF60 
.................... #bit    FLTCK0 = DFLTCON.0 
.................... #bit    FLTCK1 = DFLTCON.1 
.................... #bit    FLTCK2 = DFLTCON.2 
.................... #bit    FLT1EN = DFLTCON.3 
.................... #bit    FLT2EN = DFLTCON.4 
.................... #bit    FLT3EN = DFLTCON.5 
.................... #bit    FLT4EN = DFLTCON.6 
....................  
.................... ///// CHUONG TRINH CHINH 
.................... #include <khoidong.c> 
....................  
.................... ///// KHOI DONG PIC 
.................... /* 
.................... #include <18F4431.h> 
.................... #include <PIC18F4431_registers.h> 
.................... #include <stdlib.h> 
.................... #include <stdio.h> 
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... //#FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... //#FUSES H4 
.................... #use delay(clock=40000000,crystal=10000000) 
.................... //#use spi(MASTER ,FORCE_HW, BITS=16) 
.................... //#bit ss1 = PORTD.0 
....................  
.................... #use fast_io(a) 
.................... #use fast_io(d) 
.................... #use fast_io(c) 
.................... #use fast_io(e) 
.................... */ 
.................... void khoidong() 
.................... { 
....................    trisa=0b00011000; /// DAU VAO QEI CUNG 
*
0ACA:  MOVLW  18
0ACC:  MOVWF  F92
....................    porta=0b11100111; 
0ACE:  MOVLW  E7
0AD0:  MOVWF  F80
....................    trisb=0b11111111; /// DAU VAO CONG TAC HANH TRINH 
0AD2:  SETF   F93
....................    port_b_pullups(0xff); 
0AD4:  BCF    FF1.7
....................    portb=0xff; 
0AD6:  SETF   F81
....................    trisc=0b00110000; /// DAU VAO QEI MEM 
0AD8:  MOVLW  30
0ADA:  MOVWF  F94
....................    portc=0b00000000; 
0ADC:  CLRF   F82
....................    trisd=0b00000000; /// DAU VAO SPI 0b00000100 
0ADE:  CLRF   F95
....................    portd=0b11110000; 
0AE0:  MOVLW  F0
0AE2:  MOVWF  F83
....................    trise=0b00000000; 
0AE4:  CLRF   F96
....................    porte=0b11111111; 
0AE6:  SETF   F84
....................     
....................    enable_interrupts(INT_EXT1); 
0AE8:  BSF    FF0.3
....................    enable_interrupts(INT_EXT2); 
0AEA:  BSF    FF0.4
....................     
....................    //enable_interrupts(int_timer0); 
....................    //enable_interrupts(int_timer1); 
....................    //enable_interrupts(int_timer5); 
....................     
....................    enable_interrupts(GLOBAL); 
0AEC:  MOVLW  C0
0AEE:  IORWF  FF2,F
....................    ext_int_edge(1,L_to_H); 
0AF0:  BSF    FF1.5
....................    ext_int_edge(2,L_to_H); 
0AF2:  BSF    FF1.4
....................     
....................    clear_interrupt(INT_EXT1); 
0AF4:  BCF    FF0.0
....................    clear_interrupt(INT_EXT2); 
0AF6:  BCF    FF0.1
....................    clear_interrupt(int_timer0); 
0AF8:  BCF    FF2.2
....................    clear_interrupt(int_timer1); 
0AFA:  BCF    F9E.0
....................    clear_interrupt(int_timer5); 
0AFC:  BCF    FA4.0
....................     
....................    setup_qei(QEI_MODE_X4_RESET_WITH_INDX,qei_filter_enable_qea|qei_filter_enable_qeb|qei_filter_div_2,65535); 
0AFE:  MOVLW  14
0B00:  MOVWF  FB6
0B02:  MOVLW  31
0B04:  MOVWF  F60
0B06:  SETF   F65
0B08:  SETF   F64
0B0A:  CLRF   F67
0B0C:  CLRF   F66
....................    qei_set_count(0); 
0B0E:  CLRF   F67
0B10:  CLRF   F66
....................     
....................    //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1);      //6.5 ms overflow, 0.1us 
....................    //set_timer0(64535); 
....................     
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_4|RTCC_8_bit);      //102 us overflow, 0.4us 
0B12:  MOVLW  C1
0B14:  MOVWF  FD5
....................    set_timer0(5); 
0B16:  CLRF   FD7
0B18:  MOVLW  05
0B1A:  MOVWF  FD6
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);      //52.4 ms overflow, 0.8us 
0B1C:  MOVLW  B5
0B1E:  MOVWF  FCD
....................    set_timer1(59286); 
0B20:  MOVLW  E7
0B22:  MOVWF  FCF
0B24:  MOVLW  96
0B26:  MOVWF  FCE
....................    setup_timer_5(T5_INTERNAL|T5_DIV_BY_8);      //52.4 ms overflow, 0.8us 
0B28:  MOVLW  19
0B2A:  MOVWF  FB7
....................    set_timer5(53035); 
0B2C:  MOVLW  CF
0B2E:  MOVWF  F88
0B30:  MOVLW  2B
0B32:  MOVWF  F87
0B34:  GOTO   1314 (RETURN)
....................     
....................    //setup_spi(SPI_MASTER|SPI_L_TO_H|SPI_CLK_DIV_16); 
....................    //ss1=1; 
....................  
....................       
.................... } 
....................  
....................  
.................... #include <van-ctht.c> 
....................  
.................... ///// DEFINE VAN 
....................  
.................... #bit vantay1=porta.5 
.................... #bit vantay2=porte.0 
.................... #bit vancanh2=porta.0     
.................... #bit vancanh1=porta.1     
.................... #bit vanduoi=porta.2 
....................  
.................... ///// DEFINE CONG TAC HANH TRINH 
.................... #bit ctt2=portb.0 
.................... #bit ctc2=portb.1 
.................... #bit ctt1=portb.2 
.................... #bit ctc1=portb.3 
....................  
.................... #bit ctld=portb.4 
.................... #bit ctlt=portb.5 
....................  
.................... #bit ctsel=portb.7 
.................... #bit cten=portb.6 
....................  
.................... ///// CHUONG TRINH LOA TIN HIEU 
.................... #bit trisloa = trisd.7 
.................... #bit loa = portd.7 
.................... void beep(int8 solan,int8 time) 
.................... { 
.................... int8 i; 
.................... for (i=0; i<solan; i++) 
*
0A4C:  CLRF   x61
0A4E:  MOVF   5F,W
0A50:  SUBWF  x61,W
0A52:  BC    0A6E
....................    { 
....................    trisloa = 0; 
0A54:  BCF    F95.7
....................    loa = 0; 
0A56:  BCF    F83.7
....................    delay_ms(20); 
0A58:  MOVLW  14
0A5A:  MOVWF  x63
0A5C:  RCALL  0A24
....................    loa = 1; 
0A5E:  BSF    F83.7
....................    delay_ms(time-20); 
0A60:  MOVLW  14
0A62:  SUBWF  x60,W
0A64:  MOVWF  x62
0A66:  MOVWF  x63
0A68:  RCALL  0A24
0A6A:  INCF   x61,F
0A6C:  BRA    0A4E
....................    } 
0A6E:  RETURN 0
.................... } 
....................  
....................  
.................... #include <dongco.c> 
....................  
.................... ///// DEFINE CAC DONG CO 
....................  
.................... #bit br1=porte.2 
.................... #bit br2=porte.1 
.................... #bit trisbr1 = trise.2 
.................... #bit trisbr2 = trise.1 
.................... #bit dir1=portc.3 
.................... #bit dir2=portc.0 
.................... #bit trisdir1 = trisc.3 
.................... #bit trisdir2 = trisc.0 
.................... #bit pwm1=portc.2 
.................... #bit pwm2=portc.1 
.................... #bit trispwm1 = trisc.2 
.................... #bit trispwm2 = trisc.1 
....................  
.................... void dc1t(INT16 x) 
.................... { 
....................    trispwm1 = trisdir1 = trisbr1 = 0; 
*
0B38:  BCF    F96.2
0B3A:  BCF    F94.3
0B3C:  BCF    F94.2
....................    dir1 = 1; 
0B3E:  BSF    F82.3
....................    br1 = 0; 
0B40:  BCF    F84.2
....................    setup_timer_2 (t2_div_by_1, 249, 1); 
0B42:  MOVLW  00
0B44:  IORLW  04
0B46:  MOVWF  FCA
0B48:  MOVLW  F9
0B4A:  MOVWF  FCB
....................    setup_ccp1 (ccp_pwm); 
0B4C:  BCF    F94.2
0B4E:  BCF    F8B.2
0B50:  MOVLW  0C
0B52:  MOVWF  FBD
....................    set_pwm1_duty (x); 
0B54:  MOVFF  5B,02
0B58:  MOVFF  5A,01
0B5C:  RRCF   02,F
0B5E:  RRCF   01,F
0B60:  RRCF   02,F
0B62:  RRCF   01,F
0B64:  RRCF   02,F
0B66:  MOVFF  01,FBE
0B6A:  RRCF   02,F
0B6C:  RRCF   02,W
0B6E:  ANDLW  30
0B70:  MOVWF  00
0B72:  MOVF   FBD,W
0B74:  ANDLW  CF
0B76:  IORWF  00,W
0B78:  MOVWF  FBD
0B7A:  RETURN 0
.................... } 
....................  
.................... void dc1n(INT16 x) 
.................... { 
....................    trispwm1 = trisdir1 = trisbr1 = 0; 
....................    dir1 = 0; 
....................    br1 = 0; 
....................    setup_timer_2 (t2_div_by_1, 249, 1); // 25us 
....................    setup_ccp1 (ccp_pwm); 
....................    set_pwm1_duty (x); 
.................... } 
....................  
.................... void resetdc1() 
.................... { 
....................    trispwm1 = trisdir1 = trisbr1 = 0; 
0B7C:  BCF    F96.2
0B7E:  BCF    F94.3
0B80:  BCF    F94.2
....................    setup_timer_2 (t2_div_by_1, 249, 1); 
0B82:  MOVLW  00
0B84:  IORLW  04
0B86:  MOVWF  FCA
0B88:  MOVLW  F9
0B8A:  MOVWF  FCB
....................    setup_ccp1 (ccp_pwm); 
0B8C:  BCF    F94.2
0B8E:  BCF    F8B.2
0B90:  MOVLW  0C
0B92:  MOVWF  FBD
....................    set_pwm1_duty (0); 
0B94:  CLRF   FBE
....................    br1 = 1; 
0B96:  BSF    F84.2
....................    dir1 = 0; 
0B98:  BCF    F82.3
0B9A:  RETURN 0
.................... } 
....................  
.................... void dc2n(INT16 x) 
.................... { 
....................    trispwm2 = trisdir2 = trisbr2 = 0; 
*
0D28:  BCF    F96.1
0D2A:  BCF    F94.0
0D2C:  BCF    F94.1
....................    dir2 = 1; 
0D2E:  BSF    F82.0
....................    br2 = 0; 
0D30:  BCF    F84.1
....................    setup_timer_2 (t2_div_by_1, 249, 1); 
0D32:  MOVLW  00
0D34:  IORLW  04
0D36:  MOVWF  FCA
0D38:  MOVLW  F9
0D3A:  MOVWF  FCB
....................    setup_ccp2 (ccp_pwm); 
0D3C:  BCF    F94.1
0D3E:  BCF    F8B.1
0D40:  MOVLW  0C
0D42:  MOVWF  FBA
....................    set_pwm2_duty (x); 
0D44:  MOVFF  5B,02
0D48:  MOVFF  5A,01
0D4C:  RRCF   02,F
0D4E:  RRCF   01,F
0D50:  RRCF   02,F
0D52:  RRCF   01,F
0D54:  RRCF   02,F
0D56:  MOVFF  01,FBB
0D5A:  RRCF   02,F
0D5C:  RRCF   02,W
0D5E:  ANDLW  30
0D60:  MOVWF  00
0D62:  MOVF   FBA,W
0D64:  ANDLW  CF
0D66:  IORWF  00,W
0D68:  MOVWF  FBA
0D6A:  RETURN 0
.................... } 
....................  
.................... void dc2t(INT16 x) 
.................... { 
....................    trispwm2 = trisdir2 = trisbr2 = 0; 
*
0B9C:  BCF    F96.1
0B9E:  BCF    F94.0
0BA0:  BCF    F94.1
....................    br2 = 0; 
0BA2:  BCF    F84.1
....................    dir2 = 0; 
0BA4:  BCF    F82.0
....................    setup_timer_2 (t2_div_by_1, 249, 1); 
0BA6:  MOVLW  00
0BA8:  IORLW  04
0BAA:  MOVWF  FCA
0BAC:  MOVLW  F9
0BAE:  MOVWF  FCB
....................    setup_ccp2 (ccp_pwm); 
0BB0:  BCF    F94.1
0BB2:  BCF    F8B.1
0BB4:  MOVLW  0C
0BB6:  MOVWF  FBA
....................    set_pwm2_duty (x); 
0BB8:  MOVFF  57,02
0BBC:  MOVFF  56,01
0BC0:  RRCF   02,F
0BC2:  RRCF   01,F
0BC4:  RRCF   02,F
0BC6:  RRCF   01,F
0BC8:  RRCF   02,F
0BCA:  MOVFF  01,FBB
0BCE:  RRCF   02,F
0BD0:  RRCF   02,W
0BD2:  ANDLW  30
0BD4:  MOVWF  00
0BD6:  MOVF   FBA,W
0BD8:  ANDLW  CF
0BDA:  IORWF  00,W
0BDC:  MOVWF  FBA
0BDE:  GOTO   0C96 (RETURN)
.................... } 
....................  
.................... void resetdc2() 
.................... { 
....................    trispwm2 = trisdir2 = trisbr2 = 0; 
0BE2:  BCF    F96.1
0BE4:  BCF    F94.0
0BE6:  BCF    F94.1
....................    br2 = 1; 
0BE8:  BSF    F84.1
....................    dir2 = 0; 
0BEA:  BCF    F82.0
....................    setup_timer_2 (t2_div_by_1, 249, 1); 
0BEC:  MOVLW  00
0BEE:  IORLW  04
0BF0:  MOVWF  FCA
0BF2:  MOVLW  F9
0BF4:  MOVWF  FCB
....................    setup_ccp2 (ccp_pwm); 
0BF6:  BCF    F94.1
0BF8:  BCF    F8B.1
0BFA:  MOVLW  0C
0BFC:  MOVWF  FBA
....................    set_pwm2_duty (0); 
0BFE:  CLRF   FBB
0C00:  RETURN 0
.................... } 
....................  
....................  
.................... #bit pwm3 = portd.6 
.................... #bit dir3 = portd.5 
.................... #bit trispwm3 = trisd.6 
.................... #bit trisdir3 = trisd.5 
.................... /* 
.................... void dc3t(INT16 x) 
.................... { 
.................... trispwm3=trisdir3=0; 
.................... pwm3=dir3=1; 
.................... setup_power_pwm(pwm_clock_div_4|pwm_free_run,1,0,625,0,1,0); 
.................... setup_power_pwm_pins(1,1,1,1);    
....................     
.................... set_power_pwm6_duty(2500-x); 
....................  
....................  
.................... } 
.................... void dc3n(INT16 x) 
.................... { 
.................... trispwm3=trisdir3=0; 
.................... pwm3=1; 
.................... dir3=0; 
.................... setup_power_pwm(pwm_clock_div_4|pwm_free_run,1,0,625,0,1,0); 
.................... setup_power_pwm_pins(1,1,1,1);    
....................     
.................... set_power_pwm6_duty(2500-x); 
....................  
....................  
.................... } 
.................... void resetdc3() 
.................... { 
.................... trispwm3=trisdir3=0; 
.................... pwm3=dir3=1; 
.................... setup_power_pwm(pwm_clock_div_4|pwm_free_run,1,0,625,0,1,0); 
.................... setup_power_pwm_pins(1,1,1,1);    
....................     
.................... set_power_pwm6_duty(2500); 
....................  
.................... } 
.................... */ 
....................  
....................  
.................... #include <qei_piddc.c> 
....................  
.................... ///// QEI MEM + DU LIEU QEI 
.................... signed int16 En2; 
.................... #define ChanelA PIN_C4 
.................... #define ChanelB PIN_C5 
.................... #INT_EXT1 
.................... void  EXT1_L2H_isr(void)  
.................... { 
.................... INTEDG1^=1; 
*
00C6:  CLRF   00
00C8:  BTFSC  FF1.5
00CA:  INCF   00,F
00CC:  MOVLW  01
00CE:  XORWF  00,F
00D0:  BCF    FF1.5
00D2:  BTFSC  00.0
00D4:  BSF    FF1.5
.................... if (INTEDG1) 
00D6:  BTFSS  FF1.5
00D8:  BRA    00F2
....................    { 
....................    if (input(ChanelB)) {En2--;}  
00DA:  BSF    F94.5
00DC:  BTFSS  F82.5
00DE:  BRA    00EA
00E0:  MOVF   17,W
00E2:  BTFSC  FD8.2
00E4:  DECF   18,F
00E6:  DECF   17,F
00E8:  BRA    00F0
....................    else {En2++;} 
00EA:  INCF   17,F
00EC:  BTFSC  FD8.2
00EE:  INCF   18,F
....................    } 
00F0:  BRA    0108
.................... else  
....................    {  
....................    if (input(ChanelB)) {En2++;} 
00F2:  BSF    F94.5
00F4:  BTFSS  F82.5
00F6:  BRA    0100
00F8:  INCF   17,F
00FA:  BTFSC  FD8.2
00FC:  INCF   18,F
00FE:  BRA    0108
....................    else {En2--;} 
0100:  MOVF   17,W
0102:  BTFSC  FD8.2
0104:  DECF   18,F
0106:  DECF   17,F
....................    } 
.................... } 
0108:  BCF    FF0.0
010A:  GOTO   0084
.................... #int_EXT2 
.................... void  EXT2_isr(void)  
.................... { 
.................... INTEDG2^=1; 
010E:  CLRF   00
0110:  BTFSC  FF1.4
0112:  INCF   00,F
0114:  MOVLW  01
0116:  XORWF  00,F
0118:  BCF    FF1.4
011A:  BTFSC  00.0
011C:  BSF    FF1.4
.................... if (INTEDG2) 
011E:  BTFSS  FF1.4
0120:  BRA    013A
....................    { 
....................    if (input(ChanelA)) {En2++;}  
0122:  BSF    F94.4
0124:  BTFSS  F82.4
0126:  BRA    0130
0128:  INCF   17,F
012A:  BTFSC  FD8.2
012C:  INCF   18,F
012E:  BRA    0138
....................    else {En2--;} 
0130:  MOVF   17,W
0132:  BTFSC  FD8.2
0134:  DECF   18,F
0136:  DECF   17,F
....................    } 
0138:  BRA    0150
.................... else  
....................    {  
....................    if (input(ChanelA)) {En2--;} 
013A:  BSF    F94.4
013C:  BTFSS  F82.4
013E:  BRA    014A
0140:  MOVF   17,W
0142:  BTFSC  FD8.2
0144:  DECF   18,F
0146:  DECF   17,F
0148:  BRA    0150
....................    else {En2++;} 
014A:  INCF   17,F
014C:  BTFSC  FD8.2
014E:  INCF   18,F
....................    } 
0150:  BCF    FF0.1
0152:  GOTO   0084
.................... } 
....................  
.................... /// PID DONG CO 1 ////////////////// 
.................... volatile float kp=2, ki=0.2,kd=0.7, pid1, pid2; 
.................... signed int16 realvt1, errs1=0, err1, delta1=0, epre1=0, duty1 ; 
.................... volatile unsigned int8 Ti1,Ti2; 
.................... volatile signed int16 setvt1,setvt2,vt1=370,vt2=400; 
....................  
.................... void piddc1(signed int16 setvt1, signed int16 vt1) 
....................      { 
....................      br1=0; 
*
0576:  BCF    F84.2
....................      realvt1 =  qei_get_count();  
0578:  MOVFF  F67,01
057C:  MOVFF  F66,00
0580:  MOVFF  F67,03
0584:  MOVF   03,W
0586:  SUBWF  01,W
0588:  BZ    058E
058A:  MOVFF  F66,00
058E:  MOVF   00,W
0590:  MOVWF  2D
0592:  MOVFF  03,2E
....................      err1 = setvt1 - realvt1; 
0596:  MOVF   2D,W
0598:  SUBWF  5F,W
059A:  MOVWF  31
059C:  MOVF   2E,W
059E:  SUBWFB x60,W
05A0:  MOVWF  32
....................      if(Ti1>=2) 
05A2:  MOVF   39,W
05A4:  SUBLW  01
05A6:  BC    0606
....................      { 
....................        delta1 = err1-epre1; 
05A8:  MOVF   35,W
05AA:  SUBWF  31,W
05AC:  MOVWF  33
05AE:  MOVF   36,W
05B0:  SUBWFB 32,W
05B2:  MOVWF  34
....................        Ti1=0; 
05B4:  CLRF   39
....................        if(delta1>-10) errs1 += err1;//(err1>-20)&&(err1<20) 
05B6:  BTFSS  34.7
05B8:  BRA    05CA
05BA:  MOVF   34,W
05BC:  SUBLW  FE
05BE:  BC    05D2
05C0:  XORLW  FF
05C2:  BNZ   05CA
05C4:  MOVF   33,W
05C6:  SUBLW  F6
05C8:  BC    05D2
05CA:  MOVF   31,W
05CC:  ADDWF  2F,F
05CE:  MOVF   32,W
05D0:  ADDWFC 30,F
....................        if (errs1 > 200 ) errs1=200; 
05D2:  BTFSC  30.7
05D4:  BRA    05E6
05D6:  MOVF   30,F
05D8:  BNZ   05E0
05DA:  MOVF   2F,W
05DC:  SUBLW  C8
05DE:  BC    05E6
05E0:  CLRF   30
05E2:  MOVLW  C8
05E4:  MOVWF  2F
....................        if (errs1 < -200 ) errs1=-200; 
05E6:  BTFSS  30.7
05E8:  BRA    05FE
05EA:  MOVF   30,W
05EC:  SUBLW  FF
05EE:  BNC   05FE
05F0:  BNZ   05F8
05F2:  MOVF   2F,W
05F4:  SUBLW  37
05F6:  BNC   05FE
05F8:  SETF   30
05FA:  MOVLW  38
05FC:  MOVWF  2F
....................        epre1=err1; 
05FE:  MOVFF  32,36
0602:  MOVFF  31,35
....................      } 
....................    
....................      pid1 =kp*err1 + ki*errs1+kd*delta1;  
0606:  MOVFF  32,68
060A:  MOVFF  31,67
060E:  RCALL  019A
0610:  MOVFF  1C,6A
0614:  MOVFF  1B,69
0618:  MOVFF  1A,68
061C:  MOVFF  19,67
0620:  MOVFF  03,6E
0624:  MOVFF  02,6D
0628:  MOVFF  01,6C
062C:  MOVFF  00,6B
0630:  RCALL  01E2
0632:  MOVFF  03,66
0636:  MOVFF  02,65
063A:  MOVFF  01,64
063E:  MOVFF  00,63
0642:  MOVFF  30,68
0646:  MOVFF  2F,67
064A:  RCALL  019A
064C:  MOVFF  20,6A
0650:  MOVFF  1F,69
0654:  MOVFF  1E,68
0658:  MOVFF  1D,67
065C:  MOVFF  03,6E
0660:  MOVFF  02,6D
0664:  MOVFF  01,6C
0668:  MOVFF  00,6B
066C:  RCALL  01E2
066E:  BCF    FD8.1
0670:  MOVFF  66,6A
0674:  MOVFF  65,69
0678:  MOVFF  64,68
067C:  MOVFF  63,67
0680:  MOVFF  03,6E
0684:  MOVFF  02,6D
0688:  MOVFF  01,6C
068C:  MOVFF  00,6B
0690:  RCALL  02D4
0692:  MOVFF  03,66
0696:  MOVFF  02,65
069A:  MOVFF  01,64
069E:  MOVFF  00,63
06A2:  MOVFF  34,68
06A6:  MOVFF  33,67
06AA:  RCALL  019A
06AC:  MOVFF  24,6A
06B0:  MOVFF  23,69
06B4:  MOVFF  22,68
06B8:  MOVFF  21,67
06BC:  MOVFF  03,6E
06C0:  MOVFF  02,6D
06C4:  MOVFF  01,6C
06C8:  MOVFF  00,6B
06CC:  RCALL  01E2
06CE:  BCF    FD8.1
06D0:  MOVFF  66,6A
06D4:  MOVFF  65,69
06D8:  MOVFF  64,68
06DC:  MOVFF  63,67
06E0:  MOVFF  03,6E
06E4:  MOVFF  02,6D
06E8:  MOVFF  01,6C
06EC:  MOVFF  00,6B
06F0:  RCALL  02D4
06F2:  MOVFF  03,28
06F6:  MOVFF  02,27
06FA:  MOVFF  01,26
06FE:  MOVFF  00,25
....................      duty1=pid1;    
0702:  MOVFF  28,66
0706:  MOVFF  27,65
070A:  MOVFF  26,64
070E:  MOVFF  25,63
0712:  RCALL  053E
0714:  MOVFF  02,38
0718:  MOVFF  01,37
....................      if (duty1 > 0)   dir1 = 0; 
071C:  BTFSC  38.7
071E:  BRA    072C
0720:  MOVF   38,F
0722:  BNZ   072A
0724:  MOVF   37,W
0726:  SUBLW  00
0728:  BC    072C
072A:  BCF    F82.3
....................      if (duty1 <  0)    dir1 = 1; 
072C:  BTFSS  38.7
072E:  BRA    0732
0730:  BSF    F82.3
....................      duty1= abs(duty1); 
0732:  MOVFF  38,03
0736:  MOVF   37,W
0738:  BTFSS  38.7
073A:  BRA    074C
073C:  MOVLW  00
073E:  BSF    FD8.0
0740:  SUBFWB 37,W
0742:  MOVWF  00
0744:  MOVLW  00
0746:  SUBFWB 38,W
0748:  MOVWF  03
074A:  MOVF   00,W
074C:  MOVWF  37
074E:  MOVFF  03,38
....................      if(duty1>5) duty1+=200; 
0752:  BTFSC  38.7
0754:  BRA    0768
0756:  MOVF   38,F
0758:  BNZ   0760
075A:  MOVF   37,W
075C:  SUBLW  05
075E:  BC    0768
0760:  MOVLW  C8
0762:  ADDWF  37,F
0764:  MOVLW  00
0766:  ADDWFC 38,F
....................      if(duty1>vt1) duty1=vt1; 
0768:  BTFSS  x62.7
076A:  BRA    0772
076C:  BTFSS  38.7
076E:  BRA    0784
0770:  BRA    0776
0772:  BTFSC  38.7
0774:  BRA    078C
0776:  MOVF   x62,W
0778:  SUBWF  38,W
077A:  BNC   078C
077C:  BNZ   0784
077E:  MOVF   37,W
0780:  SUBWF  x61,W
0782:  BC    078C
0784:  MOVFF  62,38
0788:  MOVFF  61,37
....................      set_pwm1_duty (duty1); 
078C:  MOVFF  38,02
0790:  MOVFF  37,01
0794:  RRCF   02,F
0796:  RRCF   01,F
0798:  RRCF   02,F
079A:  RRCF   01,F
079C:  RRCF   02,F
079E:  MOVFF  01,FBE
07A2:  RRCF   02,F
07A4:  RRCF   02,W
07A6:  ANDLW  30
07A8:  MOVWF  00
07AA:  MOVF   FBD,W
07AC:  ANDLW  CF
07AE:  IORWF  00,W
07B0:  MOVWF  FBD
07B2:  GOTO   0A0C (RETURN)
....................      } 
....................       
.................... /// PID DONG CO 2 ////////////////// 
.................... signed int16 realvt2, errs2=0, err2, delta2=0, epre2=0, duty2 ; 
.................... void piddc2(signed int16 setvt2, signed int16 vt2) 
....................      { 
....................      br2=0; 
07B6:  BCF    F84.1
....................      realvt2 =  En2;  
07B8:  MOVFF  18,44
07BC:  MOVFF  17,43
....................      err2 = setvt2 - realvt2; 
07C0:  MOVF   43,W
07C2:  SUBWF  5F,W
07C4:  MOVWF  47
07C6:  MOVF   44,W
07C8:  SUBWFB x60,W
07CA:  MOVWF  48
....................      if(Ti2>=2) 
07CC:  MOVF   3A,W
07CE:  SUBLW  01
07D0:  BC    083E
....................      { 
....................        Ti2=0; 
07D2:  CLRF   3A
....................        if((err2>-20)&&(err2<20)) errs2 += err2; 
07D4:  BTFSS  48.7
07D6:  BRA    07E8
07D8:  MOVF   48,W
07DA:  SUBLW  FE
07DC:  BC    07FE
07DE:  XORLW  FF
07E0:  BNZ   07E8
07E2:  MOVF   47,W
07E4:  SUBLW  EC
07E6:  BC    07FE
07E8:  BTFSC  48.7
07EA:  BRA    07F6
07EC:  MOVF   48,F
07EE:  BNZ   07FE
07F0:  MOVF   47,W
07F2:  SUBLW  13
07F4:  BNC   07FE
07F6:  MOVF   47,W
07F8:  ADDWF  45,F
07FA:  MOVF   48,W
07FC:  ADDWFC 46,F
....................        if (errs2 > 200 ) errs2=200; 
07FE:  BTFSC  46.7
0800:  BRA    0812
0802:  MOVF   46,F
0804:  BNZ   080C
0806:  MOVF   45,W
0808:  SUBLW  C8
080A:  BC    0812
080C:  CLRF   46
080E:  MOVLW  C8
0810:  MOVWF  45
....................        if (errs2 < -200 ) errs2=-200; 
0812:  BTFSS  46.7
0814:  BRA    082A
0816:  MOVF   46,W
0818:  SUBLW  FF
081A:  BNC   082A
081C:  BNZ   0824
081E:  MOVF   45,W
0820:  SUBLW  37
0822:  BNC   082A
0824:  SETF   46
0826:  MOVLW  38
0828:  MOVWF  45
....................        delta2 = err2-epre2; 
082A:  MOVF   4B,W
082C:  SUBWF  47,W
082E:  MOVWF  49
0830:  MOVF   4C,W
0832:  SUBWFB 48,W
0834:  MOVWF  4A
....................        epre2=err2; 
0836:  MOVFF  48,4C
083A:  MOVFF  47,4B
....................      } 
....................    
....................      pid2 =kp*err2 + ki*errs2+kd*delta2;  
083E:  MOVFF  48,68
0842:  MOVFF  47,67
0846:  RCALL  019A
0848:  MOVFF  1C,6A
084C:  MOVFF  1B,69
0850:  MOVFF  1A,68
0854:  MOVFF  19,67
0858:  MOVFF  03,6E
085C:  MOVFF  02,6D
0860:  MOVFF  01,6C
0864:  MOVFF  00,6B
0868:  RCALL  01E2
086A:  MOVFF  03,66
086E:  MOVFF  02,65
0872:  MOVFF  01,64
0876:  MOVFF  00,63
087A:  MOVFF  46,68
087E:  MOVFF  45,67
0882:  RCALL  019A
0884:  MOVFF  20,6A
0888:  MOVFF  1F,69
088C:  MOVFF  1E,68
0890:  MOVFF  1D,67
0894:  MOVFF  03,6E
0898:  MOVFF  02,6D
089C:  MOVFF  01,6C
08A0:  MOVFF  00,6B
08A4:  RCALL  01E2
08A6:  BCF    FD8.1
08A8:  MOVFF  66,6A
08AC:  MOVFF  65,69
08B0:  MOVFF  64,68
08B4:  MOVFF  63,67
08B8:  MOVFF  03,6E
08BC:  MOVFF  02,6D
08C0:  MOVFF  01,6C
08C4:  MOVFF  00,6B
08C8:  RCALL  02D4
08CA:  MOVFF  03,66
08CE:  MOVFF  02,65
08D2:  MOVFF  01,64
08D6:  MOVFF  00,63
08DA:  MOVFF  4A,68
08DE:  MOVFF  49,67
08E2:  RCALL  019A
08E4:  MOVFF  24,6A
08E8:  MOVFF  23,69
08EC:  MOVFF  22,68
08F0:  MOVFF  21,67
08F4:  MOVFF  03,6E
08F8:  MOVFF  02,6D
08FC:  MOVFF  01,6C
0900:  MOVFF  00,6B
0904:  RCALL  01E2
0906:  BCF    FD8.1
0908:  MOVFF  66,6A
090C:  MOVFF  65,69
0910:  MOVFF  64,68
0914:  MOVFF  63,67
0918:  MOVFF  03,6E
091C:  MOVFF  02,6D
0920:  MOVFF  01,6C
0924:  MOVFF  00,6B
0928:  RCALL  02D4
092A:  MOVFF  03,2C
092E:  MOVFF  02,2B
0932:  MOVFF  01,2A
0936:  MOVFF  00,29
....................      duty2=pid2;     
093A:  MOVFF  2C,66
093E:  MOVFF  2B,65
0942:  MOVFF  2A,64
0946:  MOVFF  29,63
094A:  RCALL  053E
094C:  MOVFF  02,4E
0950:  MOVFF  01,4D
....................      if (duty2 > 0)   dir2 = 1; 
0954:  BTFSC  4E.7
0956:  BRA    0964
0958:  MOVF   4E,F
095A:  BNZ   0962
095C:  MOVF   4D,W
095E:  SUBLW  00
0960:  BC    0964
0962:  BSF    F82.0
....................      if (duty2 <  0)    dir2 = 0; 
0964:  BTFSS  4E.7
0966:  BRA    096A
0968:  BCF    F82.0
....................      duty2= abs(duty2); 
096A:  MOVFF  4E,03
096E:  MOVF   4D,W
0970:  BTFSS  4E.7
0972:  BRA    0984
0974:  MOVLW  00
0976:  BSF    FD8.0
0978:  SUBFWB 4D,W
097A:  MOVWF  00
097C:  MOVLW  00
097E:  SUBFWB 4E,W
0980:  MOVWF  03
0982:  MOVF   00,W
0984:  MOVWF  4D
0986:  MOVFF  03,4E
....................      if(duty2>5) duty2+=200; 
098A:  BTFSC  4E.7
098C:  BRA    09A0
098E:  MOVF   4E,F
0990:  BNZ   0998
0992:  MOVF   4D,W
0994:  SUBLW  05
0996:  BC    09A0
0998:  MOVLW  C8
099A:  ADDWF  4D,F
099C:  MOVLW  00
099E:  ADDWFC 4E,F
....................      if(duty2>vt2) duty2=vt2; 
09A0:  BTFSS  x62.7
09A2:  BRA    09AA
09A4:  BTFSS  4E.7
09A6:  BRA    09BC
09A8:  BRA    09AE
09AA:  BTFSC  4E.7
09AC:  BRA    09C4
09AE:  MOVF   x62,W
09B0:  SUBWF  4E,W
09B2:  BNC   09C4
09B4:  BNZ   09BC
09B6:  MOVF   4D,W
09B8:  SUBWF  x61,W
09BA:  BC    09C4
09BC:  MOVFF  62,4E
09C0:  MOVFF  61,4D
....................      set_pwm2_duty (duty2); 
09C4:  MOVFF  4E,02
09C8:  MOVFF  4D,01
09CC:  RRCF   02,F
09CE:  RRCF   01,F
09D0:  RRCF   02,F
09D2:  RRCF   01,F
09D4:  RRCF   02,F
09D6:  MOVFF  01,FBB
09DA:  RRCF   02,F
09DC:  RRCF   02,W
09DE:  ANDLW  30
09E0:  MOVWF  00
09E2:  MOVF   FBA,W
09E4:  ANDLW  CF
09E6:  IORWF  00,W
09E8:  MOVWF  FBA
09EA:  GOTO   0A1E (RETURN)
....................      } 
....................       
....................  
....................  
....................  
.................... ///// CHUONG TRINH QUET PHIM 
.................... int8 demct=0, chonct=0; 
....................  
.................... ///// NGAT TIMER0 
.................... char demservo, xungleo=0; 
.................... int1 dclep=0 ; 
.................... #int_timer0 
.................... void ngat_timer0(void)  
....................    { 
....................    if (dclep==1) 
*
0156:  BTFSS  53.0
0158:  BRA    0176
....................    { 
....................       set_timer0(5); 
015A:  CLRF   FD7
015C:  MOVLW  05
015E:  MOVWF  FD6
....................       demservo++; 
0160:  INCF   51,F
....................       if (demservo>=200) 
0162:  MOVF   51,W
0164:  SUBLW  C7
0166:  BC    016C
....................          { 
....................          demservo=0; 
0168:  CLRF   51
....................          pwm3=1; 
016A:  BSF    F83.6
....................          } 
....................       if (demservo >=xungleo) pwm3=0; 
016C:  MOVF   52,W
016E:  SUBWF  51,W
0170:  BNC   0174
0172:  BCF    F83.6
....................    } 
0174:  BRA    0194
....................    else 
....................       { 
....................       set_timer0(5); 
0176:  CLRF   FD7
0178:  MOVLW  05
017A:  MOVWF  FD6
....................       demservo++; 
017C:  INCF   51,F
....................       if (demservo>=200) 
017E:  MOVF   51,W
0180:  SUBLW  C7
0182:  BC    018A
....................          { 
....................          demservo=0; 
0184:  CLRF   51
....................          output_high(pin_c7); 
0186:  BCF    F94.7
0188:  BSF    F8B.7
....................          } 
....................       if (demservo >=xungleo) output_low(pin_c7); 
018A:  MOVF   52,W
018C:  SUBWF  51,W
018E:  BNC   0194
0190:  BCF    F94.7
0192:  BCF    F8B.7
....................       } 
....................    }    
....................       
.................... ///// NGAT TIMER1 PID 
0194:  BCF    FF2.2
0196:  GOTO   0084
.................... #int_timer1 
.................... void ngat_timer1(void)  
....................    { 
....................       set_timer1(59286); 
*
09EE:  MOVLW  E7
09F0:  MOVWF  FCF
09F2:  MOVLW  96
09F4:  MOVWF  FCE
....................       Ti1++; 
09F6:  INCF   39,F
....................       Ti2++; 
09F8:  INCF   3A,F
....................       piddc1(setvt1,vt1); 
09FA:  MOVFF  3C,60
09FE:  MOVFF  3B,5F
0A02:  MOVFF  40,62
0A06:  MOVFF  3F,61
0A0A:  BRA    0576
....................       piddc2(setvt2,vt2); 
0A0C:  MOVFF  3E,60
0A10:  MOVFF  3D,5F
0A14:  MOVFF  42,62
0A18:  MOVFF  41,61
0A1C:  BRA    07B6
....................        
....................    } 
....................     
.................... ///// NGAT TIMER2 LEO THANG 
.................... /* 
.................... char demxleo, xungleo; 
.................... #int_timer2 
.................... void ngat_timer2(void)  
....................    { 
....................    demxleo++; 
....................    if (demxleo>=200) 
....................       demxleo=0; 
....................       output_high(pin_d6); 
....................       } 
....................    if (demxleo >=xungleo) output_low(pin_d6); 
....................    } 
....................  */  
.................... ///// NGAT TIMER5 QUET PHIM  
0A1E:  BCF    F9E.0
0A20:  GOTO   0084
.................... #int_timer5 
.................... void ngat_timer5(void)  
....................    { 
....................       set_timer5(53035); 
*
0A70:  MOVLW  CF
0A72:  MOVWF  F88
0A74:  MOVLW  2B
0A76:  MOVWF  F87
....................       demct++; 
0A78:  INCF   4F,F
....................       if (demct==2) { beep(1,50); } 
0A7A:  MOVF   4F,W
0A7C:  SUBLW  02
0A7E:  BNZ   0A8A
0A80:  MOVLW  01
0A82:  MOVWF  5F
0A84:  MOVLW  32
0A86:  MOVWF  x60
0A88:  RCALL  0A4C
....................       if (demct==50) { beep(1,50); } 
0A8A:  MOVF   4F,W
0A8C:  SUBLW  32
0A8E:  BNZ   0A9A
0A90:  MOVLW  01
0A92:  MOVWF  5F
0A94:  MOVLW  32
0A96:  MOVWF  x60
0A98:  RCALL  0A4C
....................       if (demct==100) { beep(1,50); } 
0A9A:  MOVF   4F,W
0A9C:  SUBLW  64
0A9E:  BNZ   0AAA
0AA0:  MOVLW  01
0AA2:  MOVWF  5F
0AA4:  MOVLW  32
0AA6:  MOVWF  x60
0AA8:  RCALL  0A4C
....................       if (demct==150) { beep(1,50); } 
0AAA:  MOVF   4F,W
0AAC:  SUBLW  96
0AAE:  BNZ   0ABA
0AB0:  MOVLW  01
0AB2:  MOVWF  5F
0AB4:  MOVLW  32
0AB6:  MOVWF  x60
0AB8:  RCALL  0A4C
....................       if (demct>200) {demct=0; disable_interrupts(int_timer5); } 
0ABA:  MOVF   4F,W
0ABC:  SUBLW  C8
0ABE:  BC    0AC4
0AC0:  CLRF   4F
0AC2:  BCF    FA3.0
....................        
....................        
....................    }    
....................  
.................... ///// KHAI BAO NHIEM VU 
.................... //#include <resetall.c> 
0AC4:  BCF    FA4.0
0AC6:  GOTO   0084
.................... #include <resetvan.c> 
....................  
....................  
....................  
.................... void resetvan() 
.................... { 
.................... disable_interrupts(int_timer5); 
*
0C02:  BCF    FA3.0
.................... disable_interrupts(int_timer1); 
0C04:  BCF    F9D.0
.................... demct=0;  
0C06:  CLRF   4F
.................... delay_ms(1000); 
0C08:  MOVLW  04
0C0A:  MOVWF  56
0C0C:  CLRF   16
0C0E:  BTFSC  FF2.7
0C10:  BSF    16.7
0C12:  BCF    FF2.7
0C14:  MOVLW  FA
0C16:  MOVWF  x63
0C18:  RCALL  0A24
0C1A:  BTFSC  16.7
0C1C:  BSF    FF2.7
0C1E:  DECFSZ 56,F
0C20:  BRA    0C0C
0C22:  CLRF   16
0C24:  BTFSC  FF2.7
0C26:  BSF    16.7
0C28:  BCF    FF2.7
.................... beep(1,100); 
0C2A:  MOVLW  01
0C2C:  MOVWF  5F
0C2E:  MOVLW  64
0C30:  MOVWF  x60
0C32:  RCALL  0A4C
0C34:  BTFSC  16.7
0C36:  BSF    FF2.7
.................... chonct=0; 
0C38:  CLRF   50
.................... Ti1=0; 
0C3A:  CLRF   39
.................... Ti2=0; 
0C3C:  CLRF   3A
.................... vantay1=vantay2=vancanh1=vancanh2=0; 
0C3E:  BCF    F80.0
0C40:  BCF    F80.1
0C42:  BCF    F84.0
0C44:  BCF    F80.5
.................... delay_ms(1000); 
0C46:  MOVLW  04
0C48:  MOVWF  56
0C4A:  CLRF   16
0C4C:  BTFSC  FF2.7
0C4E:  BSF    16.7
0C50:  BCF    FF2.7
0C52:  MOVLW  FA
0C54:  MOVWF  x63
0C56:  RCALL  0A24
0C58:  BTFSC  16.7
0C5A:  BSF    FF2.7
0C5C:  DECFSZ 56,F
0C5E:  BRA    0C4A
.................... while (ctc1==1) { dc1t(370); } 
0C60:  BTFSS  F81.3
0C62:  BRA    0C70
0C64:  MOVLW  01
0C66:  MOVWF  5B
0C68:  MOVLW  72
0C6A:  MOVWF  5A
0C6C:  RCALL  0B38
0C6E:  BRA    0C60
.................... resetdc1(); 
0C70:  RCALL  0B7C
0C72:  CLRF   16
0C74:  BTFSC  FF2.7
0C76:  BSF    16.7
0C78:  BCF    FF2.7
.................... beep(1,100); 
0C7A:  MOVLW  01
0C7C:  MOVWF  5F
0C7E:  MOVLW  64
0C80:  MOVWF  x60
0C82:  RCALL  0A4C
0C84:  BTFSC  16.7
0C86:  BSF    FF2.7
.................... while (ctc2==1) { dc2t(400); } 
0C88:  BTFSS  F81.1
0C8A:  BRA    0C98
0C8C:  MOVLW  01
0C8E:  MOVWF  57
0C90:  MOVLW  90
0C92:  MOVWF  56
0C94:  BRA    0B9C
0C96:  BRA    0C88
.................... resetdc2(); 
0C98:  RCALL  0BE2
0C9A:  CLRF   16
0C9C:  BTFSC  FF2.7
0C9E:  BSF    16.7
0CA0:  BCF    FF2.7
.................... beep(1,100); 
0CA2:  MOVLW  01
0CA4:  MOVWF  5F
0CA6:  MOVLW  64
0CA8:  MOVWF  x60
0CAA:  RCALL  0A4C
0CAC:  BTFSC  16.7
0CAE:  BSF    FF2.7
.................... while (ctlt==1) 
0CB0:  BTFSS  F81.5
0CB2:  BRA    0CBA
....................    { 
....................    dir3=1; 
0CB4:  BSF    F83.5
....................    pwm3=0; 
0CB6:  BCF    F83.6
0CB8:  BRA    0CB0
....................    } 
.................... pwm3=1; 
0CBA:  BSF    F83.6
0CBC:  CLRF   16
0CBE:  BTFSC  FF2.7
0CC0:  BSF    16.7
0CC2:  BCF    FF2.7
.................... beep(1,100); 
0CC4:  MOVLW  01
0CC6:  MOVWF  5F
0CC8:  MOVLW  64
0CCA:  MOVWF  x60
0CCC:  RCALL  0A4C
0CCE:  BTFSC  16.7
0CD0:  BSF    FF2.7
.................... qei_set_count(0); 
0CD2:  CLRF   F67
0CD4:  CLRF   F66
.................... En2=0; 
0CD6:  CLRF   18
0CD8:  CLRF   17
.................... setvt1=0; 
0CDA:  CLRF   3C
0CDC:  CLRF   3B
.................... setvt2=0; 
0CDE:  CLRF   3E
0CE0:  CLRF   3D
.................... vantay1=vantay2=vancanh1=vancanh2=vanduoi=1; 
0CE2:  BSF    F80.2
0CE4:  BSF    F80.0
0CE6:  BSF    F80.1
0CE8:  BSF    F84.0
0CEA:  BSF    F80.5
0CEC:  GOTO   1370 (RETURN)
....................  
....................  
.................... } 
....................  
....................  
....................  
.................... #include <nhiemvu2.c> 
....................  
.................... ///// NHIEM VU 2 
....................  
.................... void nhiemvu2() 
.................... { 
.................... disable_interrupts(int_timer5); 
0CF0:  BCF    FA3.0
.................... demct=0;  
0CF2:  CLRF   4F
.................... delay_ms(2000); 
0CF4:  MOVLW  08
0CF6:  MOVWF  56
0CF8:  CLRF   16
0CFA:  BTFSC  FF2.7
0CFC:  BSF    16.7
0CFE:  BCF    FF2.7
0D00:  MOVLW  FA
0D02:  MOVWF  x63
0D04:  RCALL  0A24
0D06:  BTFSC  16.7
0D08:  BSF    FF2.7
0D0A:  DECFSZ 56,F
0D0C:  BRA    0CF8
0D0E:  CLRF   16
0D10:  BTFSC  FF2.7
0D12:  BSF    16.7
0D14:  BCF    FF2.7
.................... beep(2,100); 
0D16:  MOVLW  02
0D18:  MOVWF  5F
0D1A:  MOVLW  64
0D1C:  MOVWF  x60
0D1E:  RCALL  0A4C
0D20:  BTFSC  16.7
0D22:  BSF    FF2.7
0D24:  GOTO   1392 (RETURN)
....................  
.................... /* 
.................... chonct=0; 
.................... while(cten==1){delay_ms(50);} 
....................  
.................... if(cten==0) 
....................    { 
....................    delay_ms(20); 
....................    if(cten==0) 
....................       { 
....................       vanduoi=0; 
....................       } 
....................    } 
.................... while(cten==0) {delay_ms(50);} 
....................  
.................... while(cten==1) {delay_ms(50);} 
.................... if(cten==0) 
....................    { 
....................    delay_ms(20); 
....................    if(cten==0) 
....................       { 
....................       vanduoi=0; 
....................       } 
....................    } 
....................  */   
....................  
.................... } 
....................  
....................  
.................... #include <nhiemvu3.c> 
....................  
.................... ///// NHIEM VU 3 
....................  
.................... void nhiemvu3() 
.................... { 
.................... disable_interrupts(int_timer5); 
.................... setup_timer_2 (t2_div_by_1, 249, 1); 
.................... setup_ccp1 (ccp_pwm); 
.................... setup_ccp2 (ccp_pwm); 
.................... enable_interrupts(int_timer1); 
.................... beep(3,100); 
.................... chonct=0; 
.................... qei_set_count(0); 
.................... En2=0; 
.................... Ti1=0; 
.................... Ti2=0; 
.................... setvt1=0; 
.................... setvt2=0; 
.................... vantay1=vantay2=vancanh1=vancanh2=vanduoi=1; 
.................... vancanh1=vancanh2=0; 
.................... setvt1=250; 
.................... setvt2=280; 
.................... vantay1=vantay2=0; 
....................  
.................... while (ctsel==1) {delay_ms(50);} 
....................  
.................... if (ctsel==0) { vantay1=1; beep(1,100); } 
....................  
.................... while (cten==1) {delay_ms(50);} 
....................  
.................... if (cten==0) { setvt1=280; } 
....................  
.................... while (ctt2==1) {delay_ms(50);} 
....................  
.................... if (ctt2==0) {vantay2=1; beep(1,100); } 
....................  
.................... delay_ms(1000); 
....................  
.................... vantay1=0; 
....................  
.................... setvt2=250; 
.................... delay_ms(1500); 
.................... setvt1=0; 
.................... setvt2=0; 
.................... while (ctt1==1) {delay_ms(50);} 
....................  
.................... if (ctt1==0) {vantay1=1; beep(1,100); } 
.................... delay_ms(2000); 
.................... vantay2=0; 
.................... setvt1=30; 
.................... delay_ms(1500); 
.................... setvt1=280; 
.................... setvt2=280; 
....................  
.................... while (ctt2==1) {delay_ms(50);} 
.................... if (ctt2==0) {vantay2=1; beep(1,100); }  
.................... delay_ms(2000); 
....................  
.................... vantay1=0; 
.................... setvt2=240; 
.................... delay_ms(4000); 
.................... disable_interrupts(int_timer1); 
.................... resetdc1(); 
.................... resetdc2(); 
.................... while(cten==1) {delay_ms(50);} 
....................  
.................... disable_interrupts(int_timer1); 
.................... enable_interrupts(int_timer5); 
.................... clear_interrupt(int_timer5); 
.................... set_timer5(59286); 
.................... } 
....................  
....................  
.................... #include <nhiemvu3x.c> 
.................... ///// NHIEM VU 3X 
....................  
.................... void nhiemvu3x() 
.................... { 
.................... signed int16 temp1, temp2; 
.................... disable_interrupts(int_timer5); 
*
0D6C:  BCF    FA3.0
.................... demct=0;  
0D6E:  CLRF   4F
.................... delay_ms(2000); 
0D70:  MOVLW  08
0D72:  MOVWF  5A
0D74:  CLRF   16
0D76:  BTFSC  FF2.7
0D78:  BSF    16.7
0D7A:  BCF    FF2.7
0D7C:  MOVLW  FA
0D7E:  MOVWF  x63
0D80:  RCALL  0A24
0D82:  BTFSC  16.7
0D84:  BSF    FF2.7
0D86:  DECFSZ 5A,F
0D88:  BRA    0D74
0D8A:  CLRF   16
0D8C:  BTFSC  FF2.7
0D8E:  BSF    16.7
0D90:  BCF    FF2.7
.................... beep(3,100); 
0D92:  MOVLW  03
0D94:  MOVWF  5F
0D96:  MOVLW  64
0D98:  MOVWF  x60
0D9A:  RCALL  0A4C
0D9C:  BTFSC  16.7
0D9E:  BSF    FF2.7
.................... setup_timer_2 (t2_div_by_1, 249, 1); 
0DA0:  MOVLW  00
0DA2:  IORLW  04
0DA4:  MOVWF  FCA
0DA6:  MOVLW  F9
0DA8:  MOVWF  FCB
.................... setup_ccp1 (ccp_pwm); 
0DAA:  BCF    F94.2
0DAC:  BCF    F8B.2
0DAE:  MOVLW  0C
0DB0:  MOVWF  FBD
.................... setup_ccp2 (ccp_pwm); 
0DB2:  BCF    F94.1
0DB4:  BCF    F8B.1
0DB6:  MOVWF  FBA
.................... enable_interrupts(int_timer1); 
0DB8:  BSF    F9D.0
.................... vantay1=vantay2=vancanh1=vancanh2=vanduoi=1; 
0DBA:  BSF    F80.2
0DBC:  BSF    F80.0
0DBE:  BSF    F80.1
0DC0:  BSF    F84.0
0DC2:  BSF    F80.5
.................... vancanh1=vancanh2=0; 
0DC4:  BCF    F80.0
0DC6:  BCF    F80.1
.................... setvt1=280; 
0DC8:  MOVLW  01
0DCA:  MOVWF  3C
0DCC:  MOVLW  18
0DCE:  MOVWF  3B
.................... setvt2=230; 
0DD0:  CLRF   3E
0DD2:  MOVLW  E6
0DD4:  MOVWF  3D
.................... vantay1=vantay2=0; 
0DD6:  BCF    F84.0
0DD8:  BCF    F80.5
....................  
.................... while (ctsel==1) {} 
0DDA:  BTFSC  F81.7
0DDC:  BRA    0DDA
....................  
.................... if (ctsel==0) { vantay2=1; beep(1,100); } 
0DDE:  BTFSC  F81.7
0DE0:  BRA    0DFA
0DE2:  BSF    F84.0
0DE4:  CLRF   16
0DE6:  BTFSC  FF2.7
0DE8:  BSF    16.7
0DEA:  BCF    FF2.7
0DEC:  MOVLW  01
0DEE:  MOVWF  5F
0DF0:  MOVLW  64
0DF2:  MOVWF  x60
0DF4:  RCALL  0A4C
0DF6:  BTFSC  16.7
0DF8:  BSF    FF2.7
.................... disable_interrupts(int_timer1); 
0DFA:  BCF    F9D.0
.................... resetdc1(); 
0DFC:  RCALL  0B7C
.................... resetdc2(); 
0DFE:  RCALL  0BE2
....................  
.................... while (cten==1) {} 
0E00:  BTFSC  F81.6
0E02:  BRA    0E00
....................  
.................... if (cten==0) { dc2n(700); } 
0E04:  BTFSC  F81.6
0E06:  BRA    0E12
0E08:  MOVLW  02
0E0A:  MOVWF  5B
0E0C:  MOVLW  BC
0E0E:  MOVWF  5A
0E10:  RCALL  0D28
....................  
.................... while (ctt1==1) { if ( En2>285 ) {resetdc2(); beep(10,100);} } 
0E12:  BTFSS  F81.2
0E14:  BRA    0E44
0E16:  BTFSC  18.7
0E18:  BRA    0E42
0E1A:  MOVF   18,W
0E1C:  SUBLW  00
0E1E:  BC    0E42
0E20:  XORLW  FF
0E22:  BNZ   0E2A
0E24:  MOVF   17,W
0E26:  SUBLW  1D
0E28:  BC    0E42
0E2A:  RCALL  0BE2
0E2C:  CLRF   16
0E2E:  BTFSC  FF2.7
0E30:  BSF    16.7
0E32:  BCF    FF2.7
0E34:  MOVLW  0A
0E36:  MOVWF  5F
0E38:  MOVLW  64
0E3A:  MOVWF  x60
0E3C:  RCALL  0A4C
0E3E:  BTFSC  16.7
0E40:  BSF    FF2.7
0E42:  BRA    0E12
....................  
.................... if (ctt1==0) {vantay1=1; resetdc2(); beep(1,100); } 
0E44:  BTFSC  F81.2
0E46:  BRA    0E62
0E48:  BSF    F80.5
0E4A:  RCALL  0BE2
0E4C:  CLRF   16
0E4E:  BTFSC  FF2.7
0E50:  BSF    16.7
0E52:  BCF    FF2.7
0E54:  MOVLW  01
0E56:  MOVWF  5F
0E58:  MOVLW  64
0E5A:  MOVWF  x60
0E5C:  RCALL  0A4C
0E5E:  BTFSC  16.7
0E60:  BSF    FF2.7
....................  
.................... delay_ms(1000); 
0E62:  MOVLW  04
0E64:  MOVWF  5A
0E66:  CLRF   16
0E68:  BTFSC  FF2.7
0E6A:  BSF    16.7
0E6C:  BCF    FF2.7
0E6E:  MOVLW  FA
0E70:  MOVWF  x63
0E72:  RCALL  0A24
0E74:  BTFSC  16.7
0E76:  BSF    FF2.7
0E78:  DECFSZ 5A,F
0E7A:  BRA    0E66
.................... temp2=En2; 
0E7C:  MOVFF  18,59
0E80:  MOVFF  17,58
.................... vantay2=0; 
0E84:  BCF    F84.0
.................... enable_interrupts(int_timer1); 
0E86:  BSF    F9D.0
.................... setvt2=temp2; 
0E88:  MOVFF  59,3E
0E8C:  MOVFF  58,3D
.................... setvt1=250; 
0E90:  CLRF   3C
0E92:  MOVLW  FA
0E94:  MOVWF  3B
.................... while ( qei_get_count() >252) {} 
0E96:  MOVFF  F67,01
0E9A:  MOVFF  F66,00
0E9E:  MOVFF  F67,03
0EA2:  MOVF   03,W
0EA4:  SUBWF  01,W
0EA6:  BZ    0EAC
0EA8:  MOVFF  F66,00
0EAC:  MOVF   00,W
0EAE:  MOVWF  5A
0EB0:  MOVFF  03,5B
0EB4:  MOVF   5B,F
0EB6:  BNZ   0EBE
0EB8:  MOVF   5A,W
0EBA:  SUBLW  FC
0EBC:  BC    0EC0
0EBE:  BRA    0E96
....................  
.................... setvt1=50; 
0EC0:  CLRF   3C
0EC2:  MOVLW  32
0EC4:  MOVWF  3B
.................... setvt2=0; 
0EC6:  CLRF   3E
0EC8:  CLRF   3D
.................... while ( qei_get_count() >50) {} 
0ECA:  MOVFF  F67,01
0ECE:  MOVFF  F66,00
0ED2:  MOVFF  F67,03
0ED6:  MOVF   03,W
0ED8:  SUBWF  01,W
0EDA:  BZ    0EE0
0EDC:  MOVFF  F66,00
0EE0:  MOVF   00,W
0EE2:  MOVWF  5A
0EE4:  MOVFF  03,5B
0EE8:  MOVF   5B,F
0EEA:  BNZ   0EF2
0EEC:  MOVF   5A,W
0EEE:  SUBLW  32
0EF0:  BC    0EF4
0EF2:  BRA    0ECA
....................  
.................... disable_interrupts(int_timer1); 
0EF4:  BCF    F9D.0
.................... resetdc1(); 
0EF6:  RCALL  0B7C
.................... resetdc2(); 
0EF8:  RCALL  0BE2
.................... dc1t(700); 
0EFA:  MOVLW  02
0EFC:  MOVWF  5B
0EFE:  MOVLW  BC
0F00:  MOVWF  5A
0F02:  RCALL  0B38
.................... while (ctt2==1) { if ( qei_get_count() <-5 ) {resetdc1(); beep(10,100);} } 
0F04:  BTFSS  F81.0
0F06:  BRA    0F28
0F08:  MOVFF  F67,01
0F0C:  MOVFF  F66,00
0F10:  MOVFF  F67,03
0F14:  MOVF   03,W
0F16:  SUBWF  01,W
0F18:  BZ    0F1E
0F1A:  MOVFF  F66,00
0F1E:  MOVF   00,W
0F20:  MOVWF  5A
0F22:  MOVFF  03,5B
0F26:  BRA    0F04
....................  
.................... if (ctt2==0) {vantay2=1;resetdc1(); beep(1,100); } 
0F28:  BTFSC  F81.0
0F2A:  BRA    0F46
0F2C:  BSF    F84.0
0F2E:  RCALL  0B7C
0F30:  CLRF   16
0F32:  BTFSC  FF2.7
0F34:  BSF    16.7
0F36:  BCF    FF2.7
0F38:  MOVLW  01
0F3A:  MOVWF  5F
0F3C:  MOVLW  64
0F3E:  MOVWF  x60
0F40:  RCALL  0A4C
0F42:  BTFSC  16.7
0F44:  BSF    FF2.7
....................  
.................... delay_ms(1000); 
0F46:  MOVLW  04
0F48:  MOVWF  5A
0F4A:  CLRF   16
0F4C:  BTFSC  FF2.7
0F4E:  BSF    16.7
0F50:  BCF    FF2.7
0F52:  MOVLW  FA
0F54:  MOVWF  x63
0F56:  RCALL  0A24
0F58:  BTFSC  16.7
0F5A:  BSF    FF2.7
0F5C:  DECFSZ 5A,F
0F5E:  BRA    0F4A
.................... temp1=qei_get_count(); 
0F60:  MOVFF  F67,01
0F64:  MOVFF  F66,00
0F68:  MOVFF  F67,03
0F6C:  MOVF   03,W
0F6E:  SUBWF  01,W
0F70:  BZ    0F76
0F72:  MOVFF  F66,00
0F76:  MOVF   00,W
0F78:  MOVWF  56
0F7A:  MOVFF  03,57
.................... vantay1=0; 
0F7E:  BCF    F80.5
.................... enable_interrupts(int_timer1); 
0F80:  BSF    F9D.0
.................... setvt1=temp1; 
0F82:  MOVFF  57,3C
0F86:  MOVFF  56,3B
.................... setvt2=30; 
0F8A:  CLRF   3E
0F8C:  MOVLW  1E
0F8E:  MOVWF  3D
.................... while (En2 <30) {} 
0F90:  BTFSC  18.7
0F92:  BRA    0F9E
0F94:  MOVF   18,F
0F96:  BNZ   0FA0
0F98:  MOVF   17,W
0F9A:  SUBLW  1D
0F9C:  BTFSC  FD8.0
0F9E:  BRA    0F90
....................  
.................... setvt1=280; 
0FA0:  MOVLW  01
0FA2:  MOVWF  3C
0FA4:  MOVLW  18
0FA6:  MOVWF  3B
.................... setvt2=250; 
0FA8:  CLRF   3E
0FAA:  MOVLW  FA
0FAC:  MOVWF  3D
....................  
.................... while (En2<250) {} 
0FAE:  BTFSC  18.7
0FB0:  BRA    0FBC
0FB2:  MOVF   18,F
0FB4:  BNZ   0FBE
0FB6:  MOVF   17,W
0FB8:  SUBLW  F9
0FBA:  BTFSC  FD8.0
0FBC:  BRA    0FAE
.................... disable_interrupts(int_timer1); 
0FBE:  BCF    F9D.0
.................... resetdc1(); 
0FC0:  RCALL  0B7C
.................... resetdc2(); 
0FC2:  RCALL  0BE2
.................... dc2n(700); 
0FC4:  MOVLW  02
0FC6:  MOVWF  5B
0FC8:  MOVLW  BC
0FCA:  MOVWF  5A
0FCC:  RCALL  0D28
....................  
.................... while (ctt1==1) { if ( En2>295 ) {resetdc2(); beep(10,100);}} 
0FCE:  BTFSS  F81.2
0FD0:  BRA    1000
0FD2:  BTFSC  18.7
0FD4:  BRA    0FFE
0FD6:  MOVF   18,W
0FD8:  SUBLW  00
0FDA:  BC    0FFE
0FDC:  XORLW  FF
0FDE:  BNZ   0FE6
0FE0:  MOVF   17,W
0FE2:  SUBLW  27
0FE4:  BC    0FFE
0FE6:  RCALL  0BE2
0FE8:  CLRF   16
0FEA:  BTFSC  FF2.7
0FEC:  BSF    16.7
0FEE:  BCF    FF2.7
0FF0:  MOVLW  0A
0FF2:  MOVWF  5F
0FF4:  MOVLW  64
0FF6:  MOVWF  x60
0FF8:  RCALL  0A4C
0FFA:  BTFSC  16.7
0FFC:  BSF    FF2.7
0FFE:  BRA    0FCE
....................  
.................... if (ctt1==0) {vantay1=1;resetdc2(); beep(1,100); }  
1000:  BTFSC  F81.2
1002:  BRA    101E
1004:  BSF    F80.5
1006:  RCALL  0BE2
1008:  CLRF   16
100A:  BTFSC  FF2.7
100C:  BSF    16.7
100E:  BCF    FF2.7
1010:  MOVLW  01
1012:  MOVWF  5F
1014:  MOVLW  64
1016:  MOVWF  x60
1018:  RCALL  0A4C
101A:  BTFSC  16.7
101C:  BSF    FF2.7
....................  
.................... delay_ms(1000); 
101E:  MOVLW  04
1020:  MOVWF  5A
1022:  CLRF   16
1024:  BTFSC  FF2.7
1026:  BSF    16.7
1028:  BCF    FF2.7
102A:  MOVLW  FA
102C:  MOVWF  x63
102E:  RCALL  0A24
1030:  BTFSC  16.7
1032:  BSF    FF2.7
1034:  DECFSZ 5A,F
1036:  BRA    1022
.................... temp2=En2; 
1038:  MOVFF  18,59
103C:  MOVFF  17,58
.................... vantay2=0; 
1040:  BCF    F84.0
.................... enable_interrupts(int_timer1); 
1042:  BSF    F9D.0
.................... setvt2=temp2; 
1044:  MOVFF  59,3E
1048:  MOVFF  58,3D
.................... setvt1=240; 
104C:  CLRF   3C
104E:  MOVLW  F0
1050:  MOVWF  3B
.................... while ( qei_get_count() > 242) {} 
1052:  MOVFF  F67,01
1056:  MOVFF  F66,00
105A:  MOVFF  F67,03
105E:  MOVF   03,W
1060:  SUBWF  01,W
1062:  BZ    1068
1064:  MOVFF  F66,00
1068:  MOVF   00,W
106A:  MOVWF  5A
106C:  MOVFF  03,5B
1070:  MOVF   5B,F
1072:  BNZ   107A
1074:  MOVF   5A,W
1076:  SUBLW  F2
1078:  BC    107C
107A:  BRA    1052
.................... disable_interrupts(int_timer1); 
107C:  BCF    F9D.0
.................... resetdc1(); 
107E:  RCALL  0B7C
.................... resetdc2(); 
1080:  RCALL  0BE2
....................  
.................... while (cten==1) {} 
1082:  BTFSC  F81.6
1084:  BRA    1082
1086:  GOTO   13B4 (RETURN)
....................  
.................... } 
....................  
....................  
.................... #include <nhiemvu4.c> 
....................  
.................... ///// NHIEM VU 4 
.................... int8 deml=0; 
.................... void nhiemvu4() 
.................... { 
.................... disable_interrupts(int_timer5); 
108A:  BCF    FA3.0
.................... disable_interrupts(int_timer1); 
108C:  BCF    F9D.0
.................... demct=0;  
108E:  CLRF   4F
.................... delay_ms(1000); 
1090:  MOVLW  04
1092:  MOVWF  56
1094:  CLRF   16
1096:  BTFSC  FF2.7
1098:  BSF    16.7
109A:  BCF    FF2.7
109C:  MOVLW  FA
109E:  MOVWF  x63
10A0:  RCALL  0A24
10A2:  BTFSC  16.7
10A4:  BSF    FF2.7
10A6:  DECFSZ 56,F
10A8:  BRA    1094
10AA:  CLRF   16
10AC:  BTFSC  FF2.7
10AE:  BSF    16.7
10B0:  BCF    FF2.7
.................... beep(4,100); 
10B2:  MOVLW  04
10B4:  MOVWF  5F
10B6:  MOVLW  64
10B8:  MOVWF  x60
10BA:  RCALL  0A4C
10BC:  BTFSC  16.7
10BE:  BSF    FF2.7
.................... trispwm3=trisdir3=0; 
10C0:  BCF    F95.5
10C2:  BCF    F95.6
.................... pwm3=dir3=1; 
10C4:  BSF    F83.5
10C6:  BSF    F83.6
.................... while (cten==1) {} 
10C8:  BTFSC  F81.6
10CA:  BRA    10C8
10CC:  CLRF   16
10CE:  BTFSC  FF2.7
10D0:  BSF    16.7
10D2:  BCF    FF2.7
.................... delay_ms(100); 
10D4:  MOVLW  64
10D6:  MOVWF  x63
10D8:  RCALL  0A24
10DA:  BTFSC  16.7
10DC:  BSF    FF2.7
....................  
.................... dclep=1; 
10DE:  BSF    53.0
.................... enable_interrupts(int_timer0); 
10E0:  BSF    FF2.5
.................... vanduoi=0; 
10E2:  BCF    F80.2
.................... while (ctld==1) 
10E4:  BTFSS  F81.4
10E6:  BRA    10F0
....................    { 
....................    dir3=0; 
10E8:  BCF    F83.5
....................    xungleo=75; 
10EA:  MOVLW  4B
10EC:  MOVWF  52
10EE:  BRA    10E4
....................    } 
.................... xungleo=200; 
10F0:  MOVLW  C8
10F2:  MOVWF  52
10F4:  CLRF   16
10F6:  BTFSC  FF2.7
10F8:  BSF    16.7
10FA:  BCF    FF2.7
.................... beep(1,100); 
10FC:  MOVLW  01
10FE:  MOVWF  5F
1100:  MOVLW  64
1102:  MOVWF  x60
1104:  RCALL  0A4C
1106:  BTFSC  16.7
1108:  BSF    FF2.7
.................... while (ctlt==1) 
110A:  BTFSS  F81.5
110C:  BRA    1116
....................    { 
....................    dir3=1; 
110E:  BSF    F83.5
....................    xungleo=50; 
1110:  MOVLW  32
1112:  MOVWF  52
1114:  BRA    110A
....................    } 
.................... xungleo=200; 
1116:  MOVLW  C8
1118:  MOVWF  52
111A:  CLRF   16
111C:  BTFSC  FF2.7
111E:  BSF    16.7
1120:  BCF    FF2.7
.................... beep(1,100); 
1122:  MOVLW  01
1124:  MOVWF  5F
1126:  MOVLW  64
1128:  MOVWF  x60
112A:  RCALL  0A4C
112C:  BTFSC  16.7
112E:  BSF    FF2.7
.................... while (ctld==1) 
1130:  BTFSS  F81.4
1132:  BRA    113C
....................    { 
....................    dir3=0; 
1134:  BCF    F83.5
....................    xungleo=50; 
1136:  MOVLW  32
1138:  MOVWF  52
113A:  BRA    1130
....................    } 
.................... xungleo=200; 
113C:  MOVLW  C8
113E:  MOVWF  52
1140:  CLRF   16
1142:  BTFSC  FF2.7
1144:  BSF    16.7
1146:  BCF    FF2.7
.................... beep(1,100); 
1148:  MOVLW  01
114A:  MOVWF  5F
114C:  MOVLW  64
114E:  MOVWF  x60
1150:  RCALL  0A4C
1152:  BTFSC  16.7
1154:  BSF    FF2.7
.................... while (ctlt==1) 
1156:  BTFSS  F81.5
1158:  BRA    1162
....................    { 
....................    dir3=1; 
115A:  BSF    F83.5
....................    xungleo=50; 
115C:  MOVLW  32
115E:  MOVWF  52
1160:  BRA    1156
....................    } 
.................... xungleo=200; 
1162:  MOVLW  C8
1164:  MOVWF  52
1166:  CLRF   16
1168:  BTFSC  FF2.7
116A:  BSF    16.7
116C:  BCF    FF2.7
.................... beep(1,100); 
116E:  MOVLW  01
1170:  MOVWF  5F
1172:  MOVLW  64
1174:  MOVWF  x60
1176:  RCALL  0A4C
1178:  BTFSC  16.7
117A:  BSF    FF2.7
.................... while (ctld==1) 
117C:  BTFSS  F81.4
117E:  BRA    1188
....................    { 
....................    dir3=0; 
1180:  BCF    F83.5
....................    xungleo=50; 
1182:  MOVLW  32
1184:  MOVWF  52
1186:  BRA    117C
....................    } 
.................... xungleo=200; 
1188:  MOVLW  C8
118A:  MOVWF  52
118C:  CLRF   16
118E:  BTFSC  FF2.7
1190:  BSF    16.7
1192:  BCF    FF2.7
.................... beep(1,100); 
1194:  MOVLW  01
1196:  MOVWF  5F
1198:  MOVLW  64
119A:  MOVWF  x60
119C:  RCALL  0A4C
119E:  BTFSC  16.7
11A0:  BSF    FF2.7
.................... while (ctlt==1) 
11A2:  BTFSS  F81.5
11A4:  BRA    11AE
....................    { 
....................    dir3=1; 
11A6:  BSF    F83.5
....................    xungleo=50; 
11A8:  MOVLW  32
11AA:  MOVWF  52
11AC:  BRA    11A2
....................    } 
.................... xungleo=200; 
11AE:  MOVLW  C8
11B0:  MOVWF  52
11B2:  CLRF   16
11B4:  BTFSC  FF2.7
11B6:  BSF    16.7
11B8:  BCF    FF2.7
.................... beep(1,100); 
11BA:  MOVLW  01
11BC:  MOVWF  5F
11BE:  MOVLW  64
11C0:  MOVWF  x60
11C2:  RCALL  0A4C
11C4:  BTFSC  16.7
11C6:  BSF    FF2.7
.................... while (ctld==1) 
11C8:  BTFSS  F81.4
11CA:  BRA    11D4
....................    { 
....................    dir3=0; 
11CC:  BCF    F83.5
....................    xungleo=50; 
11CE:  MOVLW  32
11D0:  MOVWF  52
11D2:  BRA    11C8
....................    } 
.................... xungleo=200; 
11D4:  MOVLW  C8
11D6:  MOVWF  52
11D8:  CLRF   16
11DA:  BTFSC  FF2.7
11DC:  BSF    16.7
11DE:  BCF    FF2.7
.................... beep(1,100); 
11E0:  MOVLW  01
11E2:  MOVWF  5F
11E4:  MOVLW  64
11E6:  MOVWF  x60
11E8:  RCALL  0A4C
11EA:  BTFSC  16.7
11EC:  BSF    FF2.7
.................... while (ctlt==1) 
11EE:  BTFSS  F81.5
11F0:  BRA    11FA
....................    { 
....................    dir3=1; 
11F2:  BSF    F83.5
....................    xungleo=50; 
11F4:  MOVLW  32
11F6:  MOVWF  52
11F8:  BRA    11EE
....................    } 
.................... xungleo=200; 
11FA:  MOVLW  C8
11FC:  MOVWF  52
11FE:  CLRF   16
1200:  BTFSC  FF2.7
1202:  BSF    16.7
1204:  BCF    FF2.7
.................... beep(1,100); 
1206:  MOVLW  01
1208:  MOVWF  5F
120A:  MOVLW  64
120C:  MOVWF  x60
120E:  RCALL  0A4C
1210:  BTFSC  16.7
1212:  BSF    FF2.7
.................... while (ctld==1) 
1214:  BTFSS  F81.4
1216:  BRA    1220
....................    { 
....................    dir3=0; 
1218:  BCF    F83.5
....................    xungleo=50; 
121A:  MOVLW  32
121C:  MOVWF  52
121E:  BRA    1214
....................    } 
.................... xungleo=200; 
1220:  MOVLW  C8
1222:  MOVWF  52
1224:  CLRF   16
1226:  BTFSC  FF2.7
1228:  BSF    16.7
122A:  BCF    FF2.7
.................... beep(1,100); 
122C:  MOVLW  01
122E:  MOVWF  5F
1230:  MOVLW  64
1232:  MOVWF  x60
1234:  RCALL  0A4C
1236:  BTFSC  16.7
1238:  BSF    FF2.7
.................... while (ctlt==1) 
123A:  BTFSS  F81.5
123C:  BRA    1246
....................    { 
....................    dir3=1; 
123E:  BSF    F83.5
....................    xungleo=50; 
1240:  MOVLW  32
1242:  MOVWF  52
1244:  BRA    123A
....................    } 
.................... xungleo=200; 
1246:  MOVLW  C8
1248:  MOVWF  52
124A:  CLRF   16
124C:  BTFSC  FF2.7
124E:  BSF    16.7
1250:  BCF    FF2.7
.................... beep(1,100); 
1252:  MOVLW  01
1254:  MOVWF  5F
1256:  MOVLW  64
1258:  MOVWF  x60
125A:  CALL   0A4C
125E:  BTFSC  16.7
1260:  BSF    FF2.7
....................  
.................... vanduoi=1; 
1262:  BSF    F80.2
1264:  CLRF   16
1266:  BTFSC  FF2.7
1268:  BSF    16.7
126A:  BCF    FF2.7
.................... beep(1,100); 
126C:  MOVLW  01
126E:  MOVWF  5F
1270:  MOVLW  64
1272:  MOVWF  x60
1274:  CALL   0A4C
1278:  BTFSC  16.7
127A:  BSF    FF2.7
.................... pwm3=1; 
127C:  BSF    F83.6
.................... dclep=0; 
127E:  BCF    53.0
.................... xungleo=10; 
1280:  MOVLW  0A
1282:  MOVWF  52
1284:  CLRF   16
1286:  BTFSC  FF2.7
1288:  BSF    16.7
128A:  BCF    FF2.7
.................... beep(3,100); 
128C:  MOVLW  03
128E:  MOVWF  5F
1290:  MOVLW  64
1292:  MOVWF  x60
1294:  CALL   0A4C
1298:  BTFSC  16.7
129A:  BSF    FF2.7
.................... while (cten==1) { } 
129C:  BTFSC  F81.6
129E:  BRA    129C
.................... disable_interrupts(int_timer0); 
12A0:  BCF    FF2.5
12A2:  GOTO   13D6 (RETURN)
....................  
....................  
....................  
.................... //while (ctlt==1) { beep(1,100); } //dc1n(600); 
....................  
....................  
....................  
.................... } 
....................  
....................  
....................  
.................... ///// MAIN ///// 
.................... int8 i=0; 
....................  
.................... void main() 
12A6:  CLRF   FF8
12A8:  BCF    FD0.7
12AA:  BSF    07.7
12AC:  CLRF   1C
12AE:  CLRF   1B
12B0:  CLRF   1A
12B2:  MOVLW  80
12B4:  MOVWF  19
12B6:  MOVLW  CD
12B8:  MOVWF  20
12BA:  MOVLW  CC
12BC:  MOVWF  1F
12BE:  MOVLW  4C
12C0:  MOVWF  1E
12C2:  MOVLW  7C
12C4:  MOVWF  1D
12C6:  MOVLW  33
12C8:  MOVWF  24
12CA:  MOVWF  23
12CC:  MOVWF  22
12CE:  MOVLW  7E
12D0:  MOVWF  21
12D2:  CLRF   30
12D4:  CLRF   2F
12D6:  CLRF   34
12D8:  CLRF   33
12DA:  CLRF   36
12DC:  CLRF   35
12DE:  MOVLW  01
12E0:  MOVWF  40
12E2:  MOVLW  72
12E4:  MOVWF  3F
12E6:  MOVLW  01
12E8:  MOVWF  42
12EA:  MOVLW  90
12EC:  MOVWF  41
12EE:  CLRF   46
12F0:  CLRF   45
12F2:  CLRF   4A
12F4:  CLRF   49
12F6:  CLRF   4C
12F8:  CLRF   4B
12FA:  CLRF   4F
12FC:  CLRF   50
12FE:  CLRF   52
1300:  BCF    53.0
1302:  CLRF   54
1304:  CLRF   55
1306:  BCF    FB9.0
1308:  BCF    FC1.6
130A:  BCF    FC1.7
130C:  MOVLW  00
130E:  MOVWF  FB8
.................... { 
....................    khoidong();  
1310:  GOTO   0ACA
....................    En2=0; 
1314:  CLRF   18
1316:  CLRF   17
....................    Ti1=0; 
1318:  CLRF   39
....................    Ti2=0; 
131A:  CLRF   3A
....................    setvt1=0; 
131C:  CLRF   3C
131E:  CLRF   3B
....................    setvt2=0; 
1320:  CLRF   3E
1322:  CLRF   3D
....................    chonct=0; 
1324:  CLRF   50
1326:  CLRF   16
1328:  BTFSC  FF2.7
132A:  BSF    16.7
132C:  BCF    FF2.7
....................    beep(2,100);  
132E:  MOVLW  02
1330:  MOVWF  5F
1332:  MOVLW  64
1334:  MOVWF  x60
1336:  CALL   0A4C
133A:  BTFSC  16.7
133C:  BSF    FF2.7
....................         
.................... while(true) 
....................    { 
....................     
....................     
....................    if (ctsel==0)  
133E:  BTFSC  F81.7
1340:  BRA    1362
....................       { 
....................       enable_interrupts(int_timer5); 
1342:  BSF    FA3.0
....................       demct=0; i=1; delay_ms(10);  
1344:  CLRF   4F
1346:  MOVLW  01
1348:  MOVWF  55
134A:  CLRF   16
134C:  BTFSC  FF2.7
134E:  BSF    16.7
1350:  BCF    FF2.7
1352:  MOVLW  0A
1354:  MOVWF  x63
1356:  CALL   0A24
135A:  BTFSC  16.7
135C:  BSF    FF2.7
....................       while (ctsel==0) {} 
135E:  BTFSS  F81.7
1360:  BRA    135E
....................       } 
....................        
....................    while (i==1)  
1362:  DECFSZ 55,W
1364:  BRA    13D8
....................       { 
....................       if ( demct<50 ) {i=0; resetvan(); } 
1366:  MOVF   4F,W
1368:  SUBLW  31
136A:  BNC   1370
136C:  CLRF   55
136E:  BRA    0C02
....................       if ((50<demct)&(demct<100)) {i=0; nhiemvu2(); }  
1370:  MOVF   4F,W
1372:  SUBLW  32
1374:  BNC   137A
1376:  MOVLW  00
1378:  BRA    137C
137A:  MOVLW  01
137C:  MOVWF  56
137E:  MOVF   4F,W
1380:  SUBLW  63
1382:  BC    1388
1384:  MOVLW  00
1386:  BRA    138A
1388:  MOVLW  01
138A:  ANDWF  56,W
138C:  BZ    1392
138E:  CLRF   55
1390:  BRA    0CF0
....................       if ((100<demct)&(demct<150)) {i=0; nhiemvu3x(); } 
1392:  MOVF   4F,W
1394:  SUBLW  64
1396:  BNC   139C
1398:  MOVLW  00
139A:  BRA    139E
139C:  MOVLW  01
139E:  MOVWF  56
13A0:  MOVF   4F,W
13A2:  SUBLW  95
13A4:  BC    13AA
13A6:  MOVLW  00
13A8:  BRA    13AC
13AA:  MOVLW  01
13AC:  ANDWF  56,W
13AE:  BZ    13B4
13B0:  CLRF   55
13B2:  BRA    0D6C
....................       if ((150<demct)&(demct<200)) {i=0; nhiemvu4(); } 
13B4:  MOVF   4F,W
13B6:  SUBLW  96
13B8:  BNC   13BE
13BA:  MOVLW  00
13BC:  BRA    13C0
13BE:  MOVLW  01
13C0:  MOVWF  56
13C2:  MOVF   4F,W
13C4:  SUBLW  C7
13C6:  BC    13CC
13C8:  MOVLW  00
13CA:  BRA    13CE
13CC:  MOVLW  01
13CE:  ANDWF  56,W
13D0:  BZ    13D6
13D2:  CLRF   55
13D4:  BRA    108A
13D6:  BRA    1362
....................       } 
13D8:  BRA    133E
....................      
....................    } 
....................  
.................... } 
....................  
13DA:  SLEEP 
....................  
....................  
....................  
....................  

Configuration Fuses:
   Word  1: C600   H4 FCMEN IESO
   Word  2: 3E0C   PUT NOBROWNOUT BORV20 NOWDT WDT32768 NOWINEN
   Word  3: 9D3C   NOPWMPIN LPOL_HIGH HPOL_HIGH T1LOWPOWER FLTAC1 SSP_RC PWM4B5 EXCLKC3 MCLR
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
