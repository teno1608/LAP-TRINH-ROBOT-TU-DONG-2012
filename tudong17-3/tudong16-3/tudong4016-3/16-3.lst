CCS PCH C Compiler, Version 4.114, 93460303               17-Mar-14 22:24

               Filename: F:\Robocon 2014\Lap trinh design\LAP TRINH ROBOT TU DONG\tudong17-3\tudong16-3\tudong4016-3\16-3.lst

               ROM used: 3528 bytes (22%)
                         Largest free fragment is 12852
               RAM used: 91 (12%) at main() level
                         117 (15%) worst case
               Stack:    6 worst case (3 in main + 3 for interrupts)

*
0000:  GOTO   0CD2
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.5
0056:  GOTO   0060
005A:  BTFSC  FF2.2
005C:  GOTO   0152
0060:  BTFSS  F9D.0
0062:  GOTO   006C
0066:  BTFSC  F9E.0
0068:  GOTO   09A4
006C:  BTFSS  FF0.3
006E:  GOTO   0078
0072:  BTFSC  FF0.0
0074:  GOTO   00D2
0078:  BTFSS  FF0.4
007A:  GOTO   0084
007E:  BTFSC  FF0.1
0080:  GOTO   0112
0084:  MOVFF  0E,00
0088:  MOVFF  0F,01
008C:  MOVFF  10,02
0090:  MOVFF  11,03
0094:  MOVFF  0C,FE9
0098:  MOVFF  07,FEA
009C:  BSF    07.7
009E:  MOVFF  08,FE1
00A2:  MOVFF  09,FE2
00A6:  MOVFF  0A,FD9
00AA:  MOVFF  0B,FDA
00AE:  MOVFF  12,FF3
00B2:  MOVFF  13,FF4
00B6:  MOVFF  14,FFA
00BA:  MOVFF  15,FF5
00BE:  MOVFF  16,FF6
00C2:  MOVFF  17,FF7
00C6:  MOVF   04,W
00C8:  MOVFF  06,FE0
00CC:  MOVFF  05,FD8
00D0:  RETFIE 0
....................  
.................... ///// CHUONG TRINH CHINH 
.................... #include <khoidong.c> 
....................  
.................... ///// KHOI DONG PIC 
....................  
.................... #include <18F4431.h> 
.................... //////// Standard Header file for the PIC18F4431 device //////////////// 
.................... #device PIC18F4431 
.................... #list 
....................  
.................... #include <PIC18F4431_registers.h> 
.................... #byte TOSU = 0xFFF 
.................... #word TOS = 0xFFE 
.................... #byte STKPTR = 0xFFC 
.................... #bit    STKPTR0 = STKPTR.0 
.................... #bit    STKPTR1 = STKPTR.1 
.................... #bit    STKPTR2 = STKPTR.2 
.................... #bit    STKPTR3 = STKPTR.3 
.................... #bit    STKPTR4 = STKPTR.4 
.................... #bit    STKUNF = STKPTR.6 
.................... #bit    STKFUL = STKPTR.7 
.................... #byte PCLATU = 0xFFB 
.................... #byte PCLATH = 0xFFA 
.................... #byte PCL = 0xFF9 
.................... #byte TBLPTRU = 0xFF8 
.................... #bit    TBLPTRU0 = TBLPTRU.0 
.................... #bit    TBLPTRU1 = TBLPTRU.1 
.................... #bit    TBLPTRU2 = TBLPTRU.2 
.................... #bit    TBLPTRU3 = TBLPTRU.3 
.................... #bit    TBLPTRU4 = TBLPTRU.4 
.................... #bit    ACSS = TBLPTRU.5 
.................... #word TBLPTR = 0xFF7 
.................... #byte TABLAT = 0xFF5 
.................... #word PROD = 0xFF4 
.................... #byte INTCON = 0xFF2 
.................... #bit    RBIF = INTCON.0 
.................... #bit    INT0IF = INTCON.1 
.................... #bit    TMR0IF = INTCON.2 
.................... #bit    RBIE = INTCON.3 
.................... #bit    INT0IE = INTCON.4 
.................... #bit    TMR0IE = INTCON.5 
.................... #bit    PEIE_GIEL = INTCON.6 
.................... #bit    GIE_GIEH = INTCON.7 
.................... #byte INTCON2 = 0xFF1 
.................... #bit    RBIP = INTCON2.0 
.................... #bit    TMR0IP = INTCON2.2 
.................... #bit    INTEDG2 = INTCON2.4 
.................... #bit    INTEDG1 = INTCON2.5 
.................... #bit    INTEDG0 = INTCON2.6 
.................... #bit    RBPU = INTCON2.7 
.................... #byte INTCON3 = 0xFF0 
.................... #bit    INT1IF = INTCON3.0 
.................... #bit    INT2IF = INTCON3.1 
.................... #bit    INT1IE = INTCON3.3 
.................... #bit    INT2IE = INTCON3.4 
.................... #bit    INT1IP = INTCON3.6 
.................... #bit    INT2IP = INTCON3.7 
.................... #byte INDF0 = 0xFEF 
.................... #byte POSTINC0 = 0xFEE 
.................... #byte POSTDEC0 = 0xFED 
.................... #byte PREINC0 = 0xFEC 
.................... #byte PLUSW0 = 0xFEB 
.................... #word FSR0 = 0xFEA 
.................... #byte WREG = 0xFE8 
.................... #byte INDF1 = 0xFE7 
.................... #byte POSTINC1 = 0xFE6 
.................... #byte POSTDEC1 = 0xFE5 
.................... #byte PREINC1 = 0xFE4 
.................... #byte PLUSW1 = 0xFE3 
.................... #word FSR1 = 0xFE2 
.................... #byte BSR = 0xFE0 
.................... #byte INDF2 = 0xFDF 
.................... #byte POSTINC2 = 0xFDE 
.................... #byte POSTDEC2 = 0xFDD 
.................... #byte PREINC2 = 0xFDC 
.................... #byte PLUSW2 = 0xFDB 
.................... #word FSR2 = 0xFDA 
.................... #byte STATUS = 0xFD8 
.................... #bit    DC = STATUS.1 
.................... #bit    OV = STATUS.3 
.................... #word TMR0 = 0xFD7 
.................... #byte T0CON = 0xFD5 
.................... #bit    T0PS0 = T0CON.0 
.................... #bit    T0PS1 = T0CON.1 
.................... #bit    T0PS2 = T0CON.2 
.................... #bit    PSA = T0CON.3 
.................... #bit    T0SE = T0CON.4 
.................... #bit    T0CS = T0CON.5 
.................... #bit    T016BIT = T0CON.6 
.................... #bit    TMR0ON = T0CON.7 
.................... #byte OSCCON = 0xFD3 
.................... #bit    SCS0 = OSCCON.0 
.................... #bit    SCS1 = OSCCON.1 
.................... #bit    IOFS = OSCCON.2 
.................... #bit    OSTS = OSCCON.3 
.................... #bit    IRCF0 = OSCCON.4 
.................... #bit    IRCF1 = OSCCON.5 
.................... #bit    IRCF2 = OSCCON.6 
.................... #bit    IDLEN = OSCCON.7 
.................... #byte LVDCON = 0xFD2 
.................... #bit    LVDL0 = LVDCON.0 
.................... #bit    LVDL1 = LVDCON.1 
.................... #bit    LVDL2 = LVDCON.2 
.................... #bit    LVDL3 = LVDCON.3 
.................... #bit    LVDEN = LVDCON.4 
.................... #bit    IRVST = LVDCON.5 
.................... #byte WDTCON = 0xFD1 
.................... #bit    SWDTEN = WDTCON.0 
.................... #bit    WDTW = WDTCON.7 
.................... #byte RCON = 0xFD0 
.................... #bit    BOR = RCON.0 
.................... #bit    POR = RCON.1 
.................... #bit    PD = RCON.2 
.................... #bit    TO = RCON.3 
.................... #bit    RI = RCON.4 
.................... #bit    IPEN = RCON.7 
.................... #word TMR1 = 0xFCF 
.................... #byte T1CON = 0xFCD 
.................... #bit    TMR1ON = T1CON.0 
.................... #bit    TMR1CS = T1CON.1 
.................... #bit    T1SYNC = T1CON.2 
.................... #bit    T1OSCEN = T1CON.3 
.................... #bit    T1CKPS0 = T1CON.4 
.................... #bit    T1CKPS1 = T1CON.5 
.................... #bit    T1RUN = T1CON.6 
.................... #bit    RD16 = T1CON.7 
.................... #byte TMR2 = 0xFCC 
.................... #byte PR2 = 0xFCB 
.................... #byte T2CON = 0xFCA 
.................... #bit    T2CKPS0 = T2CON.0 
.................... #bit    T2CKPS1 = T2CON.1 
.................... #bit    TMR2ON = T2CON.2 
.................... #bit    TOUTPS0 = T2CON.3 
.................... #bit    TOUTPS1 = T2CON.4 
.................... #bit    TOUTPS2 = T2CON.5 
.................... #bit    TOUTPS3 = T2CON.6 
.................... #byte SSPBUF = 0xFC9 
.................... #byte SSPADD = 0xFC8 
.................... #byte SSPSTAT = 0xFC7 
.................... #bit    BF = SSPSTAT.0 
.................... #bit    UA = SSPSTAT.1 
.................... #bit    CKE = SSPSTAT.6 
.................... #bit    SMP = SSPSTAT.7 
.................... #byte SSPCON = 0xFC6 
.................... #bit    SSPM0 = SSPCON.0 
.................... #bit    SSPM1 = SSPCON.1 
.................... #bit    SSPM2 = SSPCON.2 
.................... #bit    SSPM3 = SSPCON.3 
.................... #bit    CKP = SSPCON.4 
.................... #bit    SSPEN = SSPCON.5 
.................... #bit    SSPOV = SSPCON.6 
.................... #bit    WCOL = SSPCON.7 
.................... #word ADRES = 0xFC4 
.................... #byte ADCON0 = 0xFC2 
.................... #bit    ADON = ADCON0.0 
.................... #bit    GO = ADCON0.1 
.................... #bit    ACMOD0 = ADCON0.2 
.................... #bit    ACMOD1 = ADCON0.3 
.................... #bit    ACSCH = ADCON0.4 
.................... #bit    ACONV = ADCON0.5 
.................... #byte ADCON1 = 0xFC1 
.................... #bit    ADPNT0 = ADCON1.0 
.................... #bit    ADPNT1 = ADCON1.1 
.................... #bit    BFOVFL = ADCON1.2 
.................... #bit    BFEMT = ADCON1.3 
.................... #bit    FIFOEN = ADCON1.4 
.................... #bit    VCFG0 = ADCON1.6 
.................... #bit    VCFG1 = ADCON1.7 
.................... #byte ADCON2 = 0xFC0 
.................... #bit    ADCS0 = ADCON2.0 
.................... #bit    ADCS1 = ADCON2.1 
.................... #bit    ADCS2 = ADCON2.2 
.................... #bit    ACQT0 = ADCON2.3 
.................... #bit    ACQT1 = ADCON2.4 
.................... #bit    ACQT2 = ADCON2.5 
.................... #bit    ACQT3 = ADCON2.6 
.................... #bit    ADFM = ADCON2.7 
.................... #word CCPR1 = 0xFBF 
.................... #byte CCP1CON = 0xFBD 
.................... #bit    CCP1M0 = CCP1CON.0 
.................... #bit    CCP1M1 = CCP1CON.1 
.................... #bit    CCP1M2 = CCP1CON.2 
.................... #bit    CCP1M3 = CCP1CON.3 
.................... #bit    DC1B0 = CCP1CON.4 
.................... #bit    DC1B1 = CCP1CON.5 
.................... #word CCPR2 = 0xFBC 
.................... #byte CCP2CON = 0xFBA 
.................... #bit    CCP2M0 = CCP2CON.0 
.................... #bit    CCP2M1 = CCP2CON.1 
.................... #bit    CCP2M2 = CCP2CON.2 
.................... #bit    CCP2M3 = CCP2CON.3 
.................... #bit    DC2B0 = CCP2CON.4 
.................... #bit    DC2B1 = CCP2CON.5 
.................... #byte ANSEL1 = 0xFB9 
.................... #bit    ANS8 = ANSEL1.0 
.................... #byte ANSEL0 = 0xFB8 
.................... #byte T5CON = 0xFB7 
.................... #bit    TMR5ON = T5CON.0 
.................... #bit    TMR5CS = T5CON.1 
.................... #bit    T5SYNC = T5CON.2 
.................... #bit    T5PS0 = T5CON.3 
.................... #bit    T5PS1 = T5CON.4 
.................... #bit    T5MOD = T5CON.5 
.................... #bit    RESEN = T5CON.6 
.................... #bit    T5SEN = T5CON.7 
.................... #byte QEICON = 0xFB6 
.................... #bit    PDEC0 = QEICON.0 
.................... #bit    PDEC1 = QEICON.1 
.................... #bit    QEIM0 = QEICON.2 
.................... #bit    QEIM1 = QEICON.3 
.................... #bit    QEIM2 = QEICON.4 
.................... #bit    UP = QEICON.5 
.................... #bit    ERROR = QEICON.6 
.................... #bit    VELM = QEICON.7 
.................... #byte SPBRGH = 0xFB0 
.................... #byte SPBRG = 0xFAF 
.................... #byte RCREG = 0xFAE 
.................... #byte TXREG = 0xFAD 
.................... #byte TXSTA = 0xFAC 
.................... #bit    TX9D = TXSTA.0 
.................... #bit    TRMT = TXSTA.1 
.................... #bit    BRGH = TXSTA.2 
.................... #bit    SENDB = TXSTA.3 
.................... #bit    SYNC = TXSTA.4 
.................... #bit    TXEN = TXSTA.5 
.................... #bit    TX9 = TXSTA.6 
.................... #bit    CSRC = TXSTA.7 
.................... #byte RCSTA = 0xFAB 
.................... #bit    RX9D = RCSTA.0 
.................... #bit    OERR = RCSTA.1 
.................... #bit    FERR = RCSTA.2 
.................... #bit    ADDEN = RCSTA.3 
.................... #bit    CREN = RCSTA.4 
.................... #bit    SREN = RCSTA.5 
.................... #bit    RX9 = RCSTA.6 
.................... #bit    SPEN = RCSTA.7 
.................... #byte BAUDCON = 0xFAA 
.................... #bit    ABDEN = BAUDCON.0 
.................... #bit    WUE = BAUDCON.1 
.................... #bit    BRG16 = BAUDCON.3 
.................... #bit    TXCKP = BAUDCON.4 
.................... #bit    RXDTP = BAUDCON.5 
.................... #bit    RCIDL = BAUDCON.6 
.................... #bit    ABDOVF = BAUDCON.7 
.................... #byte EEADR = 0xFA9 
.................... #byte EEDATA = 0xFA8 
.................... #byte EECON2 = 0xFA7 
.................... #byte EECON1 = 0xFA6 
.................... #bit    RD = EECON1.0 
.................... #bit    WR = EECON1.1 
.................... #bit    WREN = EECON1.2 
.................... #bit    WRERR = EECON1.3 
.................... #bit    FREE = EECON1.4 
.................... #bit    CFGS = EECON1.6 
.................... #bit    EEPGD = EECON1.7 
.................... #byte IPR3 = 0xFA5 
.................... #bit    TMR5IP = IPR3.0 
.................... #bit    IC1IP = IPR3.1 
.................... #bit    IC2QEIP = IPR3.2 
.................... #bit    IC3DRIP = IPR3.3 
.................... #bit    PTIP = IPR3.4 
.................... #byte PIR3 = 0xFA4 
.................... #bit    TMR5IF = PIR3.0 
.................... #bit    IC1IF = PIR3.1 
.................... #bit    IC2QEIF = PIR3.2 
.................... #bit    IC3DRIF = PIR3.3 
.................... #bit    PTIF = PIR3.4 
.................... #byte PIE3 = 0xFA3 
.................... #bit    TMR5IE = PIE3.0 
.................... #bit    IC1IE = PIE3.1 
.................... #bit    IC2QEIE = PIE3.2 
.................... #bit    IC3DRIE = PIE3.3 
.................... #bit    PTIE = PIE3.4 
.................... #byte IPR2 = 0xFA2 
.................... #bit    CCP2IP = IPR2.0 
.................... #bit    LVDIP = IPR2.2 
.................... #bit    EEIP = IPR2.4 
.................... #bit    OSFIP = IPR2.7 
.................... #byte PIR2 = 0xFA1 
.................... #bit    CCP2IF = PIR2.0 
.................... #bit    LVDIF = PIR2.2 
.................... #bit    EEIF = PIR2.4 
.................... #bit    OSFIF = PIR2.7 
.................... #byte PIE2 = 0xFA0 
.................... #bit    CCP2IE = PIE2.0 
.................... #bit    LVDIE = PIE2.2 
.................... #bit    EEIE = PIE2.4 
.................... #bit    OSFIE = PIE2.7 
.................... #byte IPR1 = 0xF9F 
.................... #bit    TMR1IP = IPR1.0 
.................... #bit    TMR2IP = IPR1.1 
.................... #bit    CCP1IP = IPR1.2 
.................... #bit    SSPIP = IPR1.3 
.................... #bit    TXIP = IPR1.4 
.................... #bit    RCIP = IPR1.5 
.................... #bit    ADIP = IPR1.6 
.................... #byte PIR1 = 0xF9E 
.................... #bit    TMR1IF = PIR1.0 
.................... #bit    TMR2IF = PIR1.1 
.................... #bit    CCP1IF = PIR1.2 
.................... #bit    SSPIF = PIR1.3 
.................... #bit    TXIF = PIR1.4 
.................... #bit    RCIF = PIR1.5 
.................... #bit    ADIF = PIR1.6 
.................... #byte PIE1 = 0xF9D 
.................... #bit    TMR1IE = PIE1.0 
.................... #bit    TMR2IE = PIE1.1 
.................... #bit    CCP1IE = PIE1.2 
.................... #bit    SSPIE = PIE1.3 
.................... #bit    TXIE = PIE1.4 
.................... #bit    RCIE = PIE1.5 
.................... #bit    ADIE = PIE1.6 
.................... #byte OSCTUNE = 0xF9B 
.................... #byte ADCON3 = 0xF9A 
.................... #bit    SSRC0 = ADCON3.0 
.................... #bit    SSRC1 = ADCON3.1 
.................... #bit    SSRC2 = ADCON3.2 
.................... #bit    SSRC3 = ADCON3.3 
.................... #bit    SSRC4 = ADCON3.4 
.................... #bit    ADRS0 = ADCON3.6 
.................... #bit    ADRS1 = ADCON3.7 
.................... #byte ADCHS = 0xF99 
.................... #bit    SASEL0 = ADCHS.0 
.................... #bit    SASEL1 = ADCHS.1 
.................... #bit    SCSEL0 = ADCHS.2 
.................... #bit    SCSEL1 = ADCHS.3 
.................... #bit    SBSEL0 = ADCHS.4 
.................... #bit    SBSEL1 = ADCHS.5 
.................... #bit    SDSEL0 = ADCHS.6 
.................... #bit    SDSEL1 = ADCHS.7 
.................... #byte TRISE = 0xF96 
.................... #byte TRISD = 0xF95 
.................... #byte TRISC = 0xF94 
.................... #byte TRISB = 0xF93 
.................... #byte TRISA = 0xF92 
.................... #word PR5 = 0xF91 
.................... #byte LATE = 0xF8D 
.................... #byte LATD = 0xF8C 
.................... #byte LATC = 0xF8B 
.................... #byte LATB = 0xF8A 
.................... #byte LATA = 0xF89 
.................... #word TMR5 = 0xF88 
.................... #byte PORTE = 0xF84 
.................... #byte PORTD = 0xF83 
.................... #byte PORTC = 0xF82 
.................... #byte PORTB = 0xF81 
.................... #byte PORTA = 0xF80 
.................... #byte PTCON0 = 0xF7F 
.................... #bit    PTMOD0 = PTCON0.0 
.................... #bit    PTMOD1 = PTCON0.1 
.................... #bit    PTCKPS0 = PTCON0.2 
.................... #bit    PTCKPS1 = PTCON0.3 
.................... #bit    PTOPS0 = PTCON0.4 
.................... #bit    PTOPS1 = PTCON0.5 
.................... #bit    PTOPS2 = PTCON0.6 
.................... #bit    PTOPS3 = PTCON0.7 
.................... #byte PTCON1 = 0xF7E 
.................... #bit    PTDIR = PTCON1.6 
.................... #bit    PTEN = PTCON1.7 
.................... #byte PTMRL = 0xF7D 
.................... #byte PTMRH = 0xF7C 
.................... #byte PTPERL = 0xF7B 
.................... #byte PTPERH = 0xF7A 
.................... #byte PDC0L = 0xF79 
.................... #byte PDC0H = 0xF78 
.................... #byte PDC1L = 0xF77 
.................... #byte PDC1H = 0xF76 
.................... #byte PDC2L = 0xF75 
.................... #byte PDC2H = 0xF74 
.................... #byte PDC3L = 0xF73 
.................... #byte PDC3H = 0xF72 
.................... #byte SEVTCMPL = 0xF71 
.................... #byte SEVTCMPH = 0xF70 
.................... #byte PWMCON0 = 0xF6F 
.................... #bit    PMOD0 = PWMCON0.0 
.................... #bit    PMOD1 = PWMCON0.1 
.................... #bit    PMOD2 = PWMCON0.2 
.................... #bit    PMOD3 = PWMCON0.3 
.................... #bit    PWMEN0 = PWMCON0.4 
.................... #bit    PWMEN1 = PWMCON0.5 
.................... #bit    PWMEN2 = PWMCON0.6 
.................... #byte PWMCON1 = 0xF6E 
.................... #bit    OSYNC = PWMCON1.0 
.................... #bit    UDIS = PWMCON1.1 
.................... #bit    SEVTDIR = PWMCON1.3 
.................... #bit    SEVOPS0 = PWMCON1.4 
.................... #bit    SEVOPS1 = PWMCON1.5 
.................... #bit    SEVOPS2 = PWMCON1.6 
.................... #bit    SEVOPS3 = PWMCON1.7 
.................... #byte DTCON = 0xF6D 
.................... #bit    DTA0 = DTCON.0 
.................... #bit    DTA1 = DTCON.1 
.................... #bit    DTA2 = DTCON.2 
.................... #bit    DTA3 = DTCON.3 
.................... #bit    DTA4 = DTCON.4 
.................... #bit    DTA5 = DTCON.5 
.................... #bit    DTAPS0 = DTCON.6 
.................... #bit    DTAPS1 = DTCON.7 
.................... #byte FLTCONFIG = 0xF6C 
.................... #bit    FLTAEN = FLTCONFIG.0 
.................... #bit    FLTAMOD = FLTCONFIG.1 
.................... #bit    FLTAS = FLTCONFIG.2 
.................... #bit    FLTCON = FLTCONFIG.3 
.................... #bit    FLTBEN = FLTCONFIG.4 
.................... #bit    FLTBMOD = FLTCONFIG.5 
.................... #bit    FLTBS = FLTCONFIG.6 
.................... #bit    BRFEN = FLTCONFIG.7 
.................... #byte OVDCOND = 0xF6B 
.................... #byte OVDCONS = 0xF6A 
.................... #word CAP1BUF = 0xF69 
.................... #word CAP2BUF = 0xF67 
.................... #word CAP3BUF = 0xF65 
.................... #byte CAP1CON = 0xF63 
.................... #bit    CAP1M0 = CAP1CON.0 
.................... #bit    CAP1M1 = CAP1CON.1 
.................... #bit    CAP1M2 = CAP1CON.2 
.................... #bit    CAP1M3 = CAP1CON.3 
.................... #bit    CAP1TMR = CAP1CON.5 
.................... #bit    CAP1REN = CAP1CON.6 
.................... #byte CAP2CON = 0xF62 
.................... #bit    CAP2M0 = CAP2CON.0 
.................... #bit    CAP2M1 = CAP2CON.1 
.................... #bit    CAP2M2 = CAP2CON.2 
.................... #bit    CAP2M3 = CAP2CON.3 
.................... #bit    CAP2TMR = CAP2CON.5 
.................... #bit    CAP2REN = CAP2CON.6 
.................... #byte CAP3CON = 0xF61 
.................... #bit    CAP3M0 = CAP3CON.0 
.................... #bit    CAP3M1 = CAP3CON.1 
.................... #bit    CAP3M2 = CAP3CON.2 
.................... #bit    CAP3M3 = CAP3CON.3 
.................... #bit    CAP3TMR = CAP3CON.5 
.................... #bit    CAP3REN = CAP3CON.6 
.................... #byte DFLTCON = 0xF60 
.................... #bit    FLTCK0 = DFLTCON.0 
.................... #bit    FLTCK1 = DFLTCON.1 
.................... #bit    FLTCK2 = DFLTCON.2 
.................... #bit    FLT1EN = DFLTCON.3 
.................... #bit    FLT2EN = DFLTCON.4 
.................... #bit    FLT3EN = DFLTCON.5 
.................... #bit    FLT4EN = DFLTCON.6 
....................  
.................... #include <stdlib.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDLIB 
.................... #define _STDLIB 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Definitions and types 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #ifndef RAND_MAX 
.................... #define RAND_MAX  32767    // The value of which is the maximum value 
....................                            // ... returned by the rand function 
.................... #endif 
....................  
....................  
.................... #IF (sizeof(int16*)>1) 
.................... #DEFINE LONG_POINTERS 1 
.................... #ELSE  
.................... #DEFINE LONG_POINTERS 0 
.................... #ENDIF 
....................  
.................... typedef struct { 
....................    signed int quot; 
....................    signed int rem; 
.................... } div_t; 
....................  
.................... typedef struct { 
....................    signed long quot; 
....................    signed long rem; 
.................... } ldiv_t; 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // String conversion functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Standard template: signed int  atoi(char * s) 
....................  * converts the initial portion of the string s to a signed int 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed int atoi(char *s); 
....................  
.................... /* Syntax: signed int32  atoi32(char * s) 
....................    converts the initial portion of the string s to a signed int32 
....................    returns the converted value if any, 0 otherwise*/ 
.................... #if (sizeof(long)==4) 
....................  #define atoi32(s) atol(s) 
.................... #else  
....................  signed int32 atoi32(char *s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
.................... /* Syntax: signed int48  atoi48(char * s) 
....................    converts the initial portion of the string s to a signed int48 
....................    returns the converted value if any, 0 otherwise*/ 
....................     
.................... signed int48 atoi48(char *s); 
....................  
.................... /* Syntax: signed int64  atoi64(char * s) 
....................    converts the initial portion of the string s to a signed int64 
....................    returns the converted value if any, 0 otherwise*/ 
.................... signed int64 atoi64(char *s); 
.................... #endif 
....................  
.................... /* Syntax: char *  itoa(signed int32 num, int8 base, char * s) 
....................    converts the signed int32 to a string and 
....................    returns the converted value if any, 0 otherwise*/ 
.................... char * itoa(signed int32 num, unsigned int base, char * s); 
....................  
.................... /* Standard template: signed int16  atol(char * s) 
....................  * converts the initial portion of the string s to a signed int16 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed long atol(char *s); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base  to a signed long. 
....................  * Returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... signed long strtol(char *s,char *endptr, signed int base); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base to a unsigned long. 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... unsigned long strtoul(char *s,char *endptr, signed int base); 
....................  
.................... /* Standart template: float strtof(char * s,char *endptr) 
....................                       float48 strtof48(char *s,char *endptr); 
....................                       float64 strtod(char *s,char *endptr); 
....................  * converts the initial portion of the string s to a float32, float48 or float64, 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null                    
.................... */ 
.................... float strtof(char *s,char *endptr); 
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s,char *endptr); 
.................... float64 strtod(char *s,char *endptr); 
.................... #else 
.................... //provided for compatibility 
.................... #define strtof48(s, e) strtof(s, e) 
.................... #define strtod(s, e) strtof(s, e) 
.................... #endif 
....................  
.................... /* Standard template: float32 atof(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof(s)   strtof(s, 0) 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
....................  
.................... /* Standard template: float48 atof48(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof48(s) strtof48(s, 0) 
....................  
.................... /* Standard template: float64 atof64(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof64(s) strtod(s, 0) 
.................... #endif 
....................  
.................... /* Standard template: float32 atoe(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  * also handles E format numbers 
....................  */ 
.................... #if !defined(__PCD__) 
.................... float atoe(char * s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s); 
.................... #endif 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Pseudo-random sequence generation functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The rand function computes a sequence of pseudo-random integers in 
....................  * the range 0 to RAND_MAX 
....................  * 
....................  * Parameters: 
....................  *       (none) 
....................  * 
....................  * Returns: 
....................  *       The pseudo-random integer 
....................  */ 
.................... unsigned int16 rand(void); 
....................  
.................... /* The srand function uses the argument as a seed for a new sequence of 
....................  * pseudo-random numbers to be returned by subsequent calls to rand. 
....................  * 
....................  * Parameters: 
....................  *       [in] seed: The seed value to start from. You might need to pass 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  * 
....................  * Remarks 
....................  *          The srand function sets the starting point for generating 
....................  *       a series of pseudorandom integers. To reinitialize the 
....................  *       generator, use 1 as the seed argument. Any other value for 
....................  *       seed sets the generator to a random starting point. rand 
....................  *       retrieves the pseudorandom numbers that are generated. 
....................  *       Calling rand before any call to srand generates the same 
....................  *       sequence as calling srand with seed passed as 1. 
....................  *          Usually, you need to pass a time here from outer source 
....................  *       so that the numbers will be different every time you run. 
....................  */ 
.................... void srand(unsigned int32 seed); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Memory management functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Comming soon 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Communication with the environment 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The function returns 0 always 
....................  */ 
.................... signed int8 system(char *string); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Performs a binary search of a sorted array.. 
....................  * 
....................  * Parameters: 
....................  *       [in] key: Object to search for 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       bsearch returns a pointer to an occurrence of key in the array pointed 
....................  *       to by base. If key is not found, the function returns NULL. If the 
....................  *       array is not in order or contains duplicate records with identical keys, 
....................  *       the result is unpredictable. 
....................  */ 
.................... //void *bsearch(const void *key, const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... /* Performs the shell-metzner sort (not the quick sort algorithm). The contents 
....................  * of the array are sorted into ascending order according to a comparison 
....................  * function pointed to by compar. 
....................  * 
....................  * Parameters: 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  */ 
.................... //void *qsort(const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Integer arithmetic functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #define labs abs 
....................  
.................... div_t div(signed int numer, signed int denom); 
.................... ldiv_t ldiv(signed long numer, signed long denom); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte character functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte string functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Internal implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... div_t div(signed int numer, signed int denom) 
.................... { 
....................    div_t val; 
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... ldiv_t ldiv(signed long numer, signed long denom) 
.................... { 
....................    ldiv_t val; 
....................  
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s) 
.................... { 
....................    float32 pow10 = 1.0; 
....................    float32 result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float32 exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if !defined(__PCD__) 
.................... float atoe(char * s) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... signed int atoi(char *s) 
.................... { 
....................    signed int result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    // Omit all preceeding alpha characters 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................  
....................       // Check for hexa number 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c<='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++]; 
....................             c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (sign == 1 && base == 10) 
....................        result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed long atol(char *s) 
.................... { 
....................    signed long result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... /* A fast routine to multiply by 10 
....................  */ 
.................... signed int32 mult_with10(int32 num) 
.................... { 
....................    return ( (num << 1) + (num << 3) ); 
.................... } 
....................  
.................... #if sizeof(long)==2 
.................... signed int32 atoi32(char *s) 
.................... { 
....................    signed int32 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
....................  
.................... signed int48 atoi48(char *s) 
.................... { 
....................    signed int48 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed int64 atoi64(char *s) 
.................... { 
....................    signed int64 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... char * itoa(signed int32 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int32 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... float strtof(char *s, char *endptr) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s, char *endptr) 
.................... { 
....................    float48 pow10 = 1.0; 
....................    float48 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float48)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float48)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... float64 strtod(char *s, char *endptr) 
.................... { 
....................    float64 pow10 = 1.0; 
....................    float64 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float64)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float64)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... unsigned long strtoul(char *s, char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    unsigned long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if(sign=='-' || base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtoulGO; 
....................  
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(; sd!=0; ) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtoulGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................          } 
....................    return 0; 
....................    } 
....................    if (endptr) 
....................    { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= sc;  
....................          #ELSE 
....................          *((char *)endptr)=sc;  
....................          #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
....................  
.................... signed long strtol(char *s,char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    signed long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if (base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtolGO; 
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................  
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(;sd!=0;) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtolGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................       } 
....................    return 0; 
....................    } 
....................    if(sign=='-') 
....................       x  =-x; 
....................    if (endptr) 
....................    { 
....................         #IF LONG_POINTERS 
....................          *((int16 *)endptr)= sc;  
....................         #ELSE 
....................         *((char *)endptr)=sc; 
....................         #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
.................... signed int8 system(char *string) 
.................... { 
....................    return 0; 
.................... } 
....................  
.................... int8 mblen(char *s,size_t n) 
.................... { 
....................    return strlen(s); 
.................... } 
....................  
.................... int8 mbtowc(wchar_t *pwc,char *s,size_t n) 
.................... { 
....................    *pwc=*s; 
....................    return 1; 
.................... } 
....................  
.................... int8 wctomb(char *s,wchar_t wchar) 
.................... { 
....................    *s=wchar; 
....................    return 1; 
.................... } 
....................  
.................... size_t mbstowcs(wchar_t *pwcs,char *s,size_t n) 
.................... { 
....................    strncpy(pwcs,s,n); 
....................    return strlen(pwcs); 
.................... } 
....................  
.................... size_t wcstombs(char *s,wchar_t *pwcs,size_t n) 
.................... { 
....................    strncpy(s,pwcs,n); 
....................    return strlen(s); 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // The random number implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... unsigned int32 _Randseed; 
....................  
.................... unsigned int16 rand(void) 
.................... { 
....................    _Randseed = _Randseed * 1103515245 + 12345; 
....................    return ((unsigned int16)(_Randseed >> 16) % RAND_MAX); 
.................... } 
....................  
.................... void srand(unsigned int32 seed) 
.................... { 
....................    _Randseed = seed; 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #if !defined(__PCD__) 
.................... typedef signed int8 (*_Cmpfun)(char * p1,char * p2);  
.................... #else  
.................... typedef signed int16 (*_Cmpfun)(char * p1,char * p2);  
.................... #endif 
....................  
....................  
....................  
.................... void qsort(char * qdata, unsigned int qitems, unsigned int qsize, _Cmpfun cmp) { 
....................    unsigned int m,j,i,l; 
....................    int1 done; 
....................    unsigned int8 t[16]; 
....................  
....................    m = qitems/2; 
....................    while( m > 0 ) { 
....................      for(j=0; j<(qitems-m); ++j) { 
....................         i = j; 
....................         do 
....................         { 
....................            done=1; 
....................            l = i+m; 
....................            if( (*cmp)(qdata+i*qsize, qdata+l*qsize) > 0 ) { 
....................               memcpy(t, qdata+i*qsize, qsize); 
....................               memcpy(qdata+i*qsize, qdata+l*qsize, qsize); 
....................               memcpy(qdata+l*qsize, t, qsize); 
....................               if(m <= i) 
....................                 i -= m; 
....................                 done = 0; 
....................            } 
....................         } while(!done); 
....................      } 
....................      m = m/2; 
....................    } 
.................... } 
....................  
....................  
.................... char *bsearch(char *key, char *base, size_t num, size_t width,_Cmpfun cmp) 
.................... { 
....................    char *p, *q; 
....................    size_t n; 
....................    size_t pivot; 
....................    signed int val; 
....................  
....................    p = base; 
....................    n = num; 
....................  
....................    while (n > 0) 
....................    { 
....................       pivot = n >> 1; 
....................       q = p + width * pivot; 
....................  
....................       val = (*cmp)(key, q); 
....................  
....................       if (val < 0) 
....................          n = pivot; 
....................       else if (val == 0) 
....................          return ((char *)q); 
....................       else { 
....................          p = q + width; 
....................          n -= pivot + 1; 
....................       } 
....................    } 
....................  
....................    return NULL;      // There's no match 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #include <stdio.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDIO 
.................... #define _STDIO 
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #ifndef getc 
.................... #define getc getch 
.................... #define getchar getch 
.................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
.................... #define putc putchar 
.................... #endif 
.................... /* maps error number to an error message. Writes a sequence of characters to 
.................... stderr stream thus: if s is not null then string pointed to by s follwed by 
.................... a colon (:) and a space and the appropriate error message returned by strerror 
.................... function with argument errno 
....................  
.................... Returns: no value 
.................... */ 
....................  
.................... #ifdef _ERRNO 
.................... void perror(char *s) 
.................... { 
....................   if(s) 
....................   fprintf(STDERR,"%s: ",s); 
....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
.................... } 
.................... #endif 
.................... #endif 
....................  
.................... #FUSES NOWDT, H4,PUT, NOPROTECT, NODEBUG, NOBROWNOUT, NOLVP, NOCPD, NOWRT//, SSP_RD 
.................... #use delay(clock=40000000) 
*
0A9E:  CLRF   FEA
0AA0:  MOVLW  5E
0AA2:  MOVWF  FE9
0AA4:  MOVF   FEF,W
0AA6:  BZ    0AC4
0AA8:  MOVLW  0C
0AAA:  MOVWF  01
0AAC:  CLRF   00
0AAE:  DECFSZ 00,F
0AB0:  BRA    0AAE
0AB2:  DECFSZ 01,F
0AB4:  BRA    0AAC
0AB6:  MOVLW  F7
0AB8:  MOVWF  00
0ABA:  DECFSZ 00,F
0ABC:  BRA    0ABA
0ABE:  BRA    0AC0
0AC0:  DECFSZ FEF,F
0AC2:  BRA    0AA8
0AC4:  RETLW  00
....................  
.................... //#use spi(MASTER ,FORCE_HW, BITS=16) 
.................... //#bit ss1 = PORTD.0 
....................  
.................... #use fast_io(a) 
.................... #use fast_io(d) 
.................... #use fast_io(c) 
.................... #use fast_io(e) 
....................  
.................... void khoidong() 
.................... { 
....................    trisa=0b00011000; /// DAU VAO QEI CUNG 
*
09D0:  MOVLW  18
09D2:  MOVWF  F92
....................    trisb=0b11111111; /// DAU VAO CONG TAC HANH TRINH 
09D4:  MOVLW  FF
09D6:  MOVWF  F93
....................    port_b_pullups(0xff); 
09D8:  BCF    FF1.7
....................    portb=0xff; 
09DA:  MOVWF  F81
....................    trisc=0b00110000; /// DAU VAO QEI MEM 
09DC:  MOVLW  30
09DE:  MOVWF  F94
....................    portc=0b00000000; 
09E0:  CLRF   F82
....................    trisd=0b00000000; /// DAU VAO SPI 0b00000100 
09E2:  CLRF   F95
....................    portd=0x00; 
09E4:  CLRF   F83
....................    trise=0b00000000; 
09E6:  CLRF   F96
....................     
....................    enable_interrupts(INT_EXT1); 
09E8:  BSF    FF0.3
....................    enable_interrupts(INT_EXT2); 
09EA:  BSF    FF0.4
....................     
....................    //enable_interrupts(int_timer0); 
....................    enable_interrupts(int_timer1); 
09EC:  BSF    F9D.0
....................     
....................    enable_interrupts(GLOBAL); 
09EE:  MOVLW  C0
09F0:  IORWF  FF2,F
....................    ext_int_edge(1,L_to_H); 
09F2:  BSF    FF1.5
....................    ext_int_edge(2,L_to_H); 
09F4:  BSF    FF1.4
....................     
....................    clear_interrupt(INT_EXT1); 
09F6:  BCF    FF0.0
....................    clear_interrupt(INT_EXT2); 
09F8:  BCF    FF0.1
....................    //clear_interrupt(int_timer0); 
....................    clear_interrupt(int_timer1); 
09FA:  BCF    F9E.0
....................     
....................    setup_qei(qei_mode_x4,qei_filter_enable_qea|qei_filter_enable_qeb|qei_filter_div_2,65535); 
09FC:  MOVLW  14
09FE:  MOVWF  FB6
0A00:  MOVLW  31
0A02:  MOVWF  F60
0A04:  MOVLW  FF
0A06:  MOVWF  F65
0A08:  MOVWF  F64
0A0A:  CLRF   F67
0A0C:  CLRF   F66
....................    qei_set_count(0); 
0A0E:  CLRF   F67
0A10:  CLRF   F66
....................     
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_4|RTCC_8_bit);      //102 us overflow, 0.4us 
0A12:  MOVLW  C1
0A14:  MOVWF  FD5
....................    set_timer0(5); 
0A16:  CLRF   FD7
0A18:  MOVLW  05
0A1A:  MOVWF  FD6
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);      //52.4 ms overflow, 0.8us 
0A1C:  MOVLW  B5
0A1E:  MOVWF  FCD
....................    set_timer1(59286); 
0A20:  MOVLW  E7
0A22:  MOVWF  FCF
0A24:  MOVLW  96
0A26:  MOVWF  FCE
....................     
....................    //setup_spi(SPI_MASTER|SPI_L_TO_H|SPI_CLK_DIV_16); 
....................    //ss1=1; 
....................     
....................    setup_timer_2 (t2_div_by_1, 249, 1); 
0A28:  MOVLW  00
0A2A:  IORLW  04
0A2C:  MOVWF  FCA
0A2E:  MOVLW  F9
0A30:  MOVWF  FCB
....................    setup_ccp1 (ccp_pwm); 
0A32:  BCF    F8B.2
0A34:  MOVLW  0C
0A36:  MOVWF  FBD
....................    
.................... } 
0A38:  GOTO   0D34 (RETURN)
....................  
.................... #include <van-ctht.c> 
....................  
.................... ///// DEFINE VAN 
....................  
.................... #bit vantay1=porte.1 
.................... #bit vantay2=porte.0 
.................... #bit vancanh1=porta.2     
.................... #bit vancanh2=porta.0     
.................... #bit vanleo=porta.1 
.................... #bit vanduoi=porta.5 
....................  
.................... ///// DEFINE CONG TAC HANH TRINH 
.................... #bit ctc1=portb.0 
.................... #bit ctt1=portb.1 
.................... #bit ctc2=portb.2 
.................... #bit ctt2=portb.3 
.................... #bit ctsel=portb.7 
.................... #bit cten=portb.6 
....................  
.................... ///// CHUONG TRINH LOA TIN HIEU 
.................... #bit trisloa = trisd.7 
.................... #bit loa = portd.7 
.................... void beep(int8 solan,int8 time) 
.................... { 
.................... int8 i; 
.................... for (i=0; i<solan; i++) 
*
0AC6:  CLRF   5C
0AC8:  MOVF   5A,W
0ACA:  SUBWF  5C,W
0ACC:  BC    0AE8
....................    { 
....................    trisloa = 0; 
0ACE:  BCF    F95.7
....................    loa = 0; 
0AD0:  BCF    F83.7
....................    delay_ms(30); 
0AD2:  MOVLW  1E
0AD4:  MOVWF  5E
0AD6:  RCALL  0A9E
....................    loa = 1; 
0AD8:  BSF    F83.7
....................    delay_ms(time-30); 
0ADA:  MOVLW  1E
0ADC:  SUBWF  5B,W
0ADE:  MOVWF  5D
0AE0:  MOVWF  5E
0AE2:  RCALL  0A9E
....................    } 
0AE4:  INCF   5C,F
0AE6:  BRA    0AC8
.................... } 
0AE8:  RETLW  00
....................  
.................... #include <dongco.c> 
....................  
.................... ///// DEFINE CAC DONG CO 
....................  
.................... #bit br1=portd.4 
.................... #bit br2=portd.5 
.................... #bit trisbr1 = trisd.4 
.................... #bit trisbr2 = trisd.5 
.................... #bit dir1=portc.3 
.................... #bit dir2=portc.0 
.................... #bit trisdir1 = trisc.3 
.................... #bit trisdir2 = trisc.0 
.................... #bit pwm1=portc.2 
.................... #bit pwm2=portc.1 
.................... #bit trispwm1 = trisc.2 
.................... #bit trispwm2 = trisc.1 
....................  
.................... void dc1t(INT16 x) 
.................... { 
....................    trispwm1 = trisdir1 = trisbr1 = 0; 
*
0A3C:  BCF    F95.4
0A3E:  BCF    F94.3
0A40:  BCF    F94.2
....................    dir1 = 1; 
0A42:  BSF    F82.3
....................    br1 = 0; 
0A44:  BCF    F83.4
....................    setup_timer_2 (t2_div_by_1, 249, 1); 
0A46:  MOVLW  00
0A48:  IORLW  04
0A4A:  MOVWF  FCA
0A4C:  MOVLW  F9
0A4E:  MOVWF  FCB
....................    setup_ccp1 (ccp_pwm); 
0A50:  BCF    F8B.2
0A52:  MOVLW  0C
0A54:  MOVWF  FBD
....................    set_pwm1_duty (x); 
0A56:  MOVFF  5B,02
0A5A:  MOVFF  5A,01
0A5E:  RRCF   02,F
0A60:  RRCF   01,F
0A62:  RRCF   02,F
0A64:  RRCF   01,F
0A66:  RRCF   02,F
0A68:  MOVFF  01,FBE
0A6C:  RRCF   02,F
0A6E:  RRCF   02,W
0A70:  ANDLW  30
0A72:  MOVWF  00
0A74:  MOVF   FBD,W
0A76:  ANDLW  CF
0A78:  IORWF  00,W
0A7A:  MOVWF  FBD
.................... } 
0A7C:  GOTO   0B5C (RETURN)
....................  
.................... void dc1n(INT16 x) 
.................... { 
....................    trispwm1 = trisdir1 = trisbr1 = 0; 
....................    dir1 = 0; 
....................    br1 = 0; 
....................    setup_timer_2 (t2_div_by_1, 249, 1); 
....................    setup_ccp1 (ccp_pwm); 
....................    set_pwm1_duty (x); 
.................... } 
....................  
.................... void resetdc1() 
.................... { 
....................    trispwm1 = trisdir1 = trisbr1 = 0; 
0A80:  BCF    F95.4
0A82:  BCF    F94.3
0A84:  BCF    F94.2
....................    setup_timer_2 (t2_div_by_1, 249, 1); 
0A86:  MOVLW  00
0A88:  IORLW  04
0A8A:  MOVWF  FCA
0A8C:  MOVLW  F9
0A8E:  MOVWF  FCB
....................    setup_ccp1 (ccp_pwm); 
0A90:  BCF    F8B.2
0A92:  MOVLW  0C
0A94:  MOVWF  FBD
....................    set_pwm1_duty (0); 
0A96:  CLRF   FBE
....................    br1 = 1; 
0A98:  BSF    F83.4
....................    dir1 = 0; 
0A9A:  BCF    F82.3
.................... } 
0A9C:  RETLW  00
....................  
.................... void dc2n(INT16 x) 
.................... { 
....................    trispwm2 = trisdir2 = trisbr2 = 0; 
....................    dir2 = 1; 
....................    br2 = 0; 
....................    setup_timer_2 (t2_div_by_1, 249, 1); 
....................    setup_ccp2 (ccp_pwm); 
....................    set_pwm2_duty (x); 
.................... } 
....................  
.................... void dc2t(INT16 x) 
.................... { 
....................    trispwm2 = trisdir2 = trisbr2 = 0; 
*
0AEA:  BCF    F95.5
0AEC:  BCF    F94.0
0AEE:  BCF    F94.1
....................    br2 = 0; 
0AF0:  BCF    F83.5
....................    dir2 = 0; 
0AF2:  BCF    F82.0
....................    setup_timer_2 (t2_div_by_1, 249, 1); 
0AF4:  MOVLW  00
0AF6:  IORLW  04
0AF8:  MOVWF  FCA
0AFA:  MOVLW  F9
0AFC:  MOVWF  FCB
....................    setup_ccp2 (ccp_pwm); 
0AFE:  BCF    F8B.1
0B00:  MOVLW  0C
0B02:  MOVWF  FBA
....................    set_pwm2_duty (x); 
0B04:  MOVFF  5B,02
0B08:  MOVFF  5A,01
0B0C:  RRCF   02,F
0B0E:  RRCF   01,F
0B10:  RRCF   02,F
0B12:  RRCF   01,F
0B14:  RRCF   02,F
0B16:  MOVFF  01,FBB
0B1A:  RRCF   02,F
0B1C:  RRCF   02,W
0B1E:  ANDLW  30
0B20:  MOVWF  00
0B22:  MOVF   FBA,W
0B24:  ANDLW  CF
0B26:  IORWF  00,W
0B28:  MOVWF  FBA
.................... } 
0B2A:  GOTO   0B78 (RETURN)
....................  
.................... void resetdc2() 
.................... { 
....................    trispwm2 = trisdir2 = trisbr2 = 0; 
0B2E:  BCF    F95.5
0B30:  BCF    F94.0
0B32:  BCF    F94.1
....................    br2 = 1; 
0B34:  BSF    F83.5
....................    dir2 = 0; 
0B36:  BCF    F82.0
....................    setup_timer_2 (t2_div_by_1, 249, 1); 
0B38:  MOVLW  00
0B3A:  IORLW  04
0B3C:  MOVWF  FCA
0B3E:  MOVLW  F9
0B40:  MOVWF  FCB
....................    setup_ccp2 (ccp_pwm); 
0B42:  BCF    F8B.1
0B44:  MOVLW  0C
0B46:  MOVWF  FBA
....................    set_pwm2_duty (0); 
0B48:  CLRF   FBB
.................... } 
0B4A:  RETLW  00
....................  
....................  
....................  
.................... ///// QEI MEM + DU LIEU QEI 
.................... signed int16 En2; 
.................... #define ChanelA PIN_C4 
.................... #define ChanelB PIN_C5 
.................... #INT_EXT1 
.................... void  EXT1_L2H_isr(void)  
.................... { 
.................... INTEDG1^=1; 
*
00D2:  MOVLW  00
00D4:  BTFSS  FF1.5
00D6:  MOVLW  01
00D8:  BCF    FF1.5
00DA:  BTFSC  FE8.0
00DC:  BSF    FF1.5
.................... if (INTEDG1) 
00DE:  BTFSS  FF1.5
00E0:  BRA    00F8
....................    { 
....................    if (input(ChanelB)) {En2--;}  
00E2:  BTFSS  F82.5
00E4:  BRA    00F0
00E6:  MOVF   1F,W
00E8:  BTFSC  FD8.2
00EA:  DECF   20,F
00EC:  DECF   1F,F
....................    else {En2++;} 
00EE:  BRA    00F6
00F0:  INCF   1F,F
00F2:  BTFSC  FD8.2
00F4:  INCF   20,F
....................    } 
.................... else  
00F6:  BRA    010C
....................    {  
....................    if (input(ChanelB)) {En2++;} 
00F8:  BTFSS  F82.5
00FA:  BRA    0104
00FC:  INCF   1F,F
00FE:  BTFSC  FD8.2
0100:  INCF   20,F
....................    else {En2--;} 
0102:  BRA    010C
0104:  MOVF   1F,W
0106:  BTFSC  FD8.2
0108:  DECF   20,F
010A:  DECF   1F,F
....................    } 
.................... } 
010C:  BCF    FF0.0
010E:  GOTO   0084
.................... #int_EXT2 
.................... void  EXT2_isr(void)  
.................... { 
.................... INTEDG2^=1; 
0112:  MOVLW  00
0114:  BTFSS  FF1.4
0116:  MOVLW  01
0118:  BCF    FF1.4
011A:  BTFSC  FE8.0
011C:  BSF    FF1.4
.................... if (INTEDG2) 
011E:  BTFSS  FF1.4
0120:  BRA    0138
....................    { 
....................    if (input(ChanelA)) {En2++;}  
0122:  BTFSS  F82.4
0124:  BRA    012E
0126:  INCF   1F,F
0128:  BTFSC  FD8.2
012A:  INCF   20,F
....................    else {En2--;} 
012C:  BRA    0136
012E:  MOVF   1F,W
0130:  BTFSC  FD8.2
0132:  DECF   20,F
0134:  DECF   1F,F
....................    } 
.................... else  
0136:  BRA    014C
....................    {  
....................    if (input(ChanelA)) {En2--;} 
0138:  BTFSS  F82.4
013A:  BRA    0146
013C:  MOVF   1F,W
013E:  BTFSC  FD8.2
0140:  DECF   20,F
0142:  DECF   1F,F
....................    else {En2++;} 
0144:  BRA    014C
0146:  INCF   1F,F
0148:  BTFSC  FD8.2
014A:  INCF   20,F
....................    } 
.................... } 
....................  
.................... /// PID DONG CO 1 ////////////////// 
014C:  BCF    FF0.1
014E:  GOTO   0084
.................... float kp=2, ki=0.2,kd=0.7, pid1; 
.................... signed int16 realvt1, errs1=0, err1, delta1=0, epre1=0, duty1 ; 
.................... volatile unsigned int8 Ti1,Ti2; 
.................... volatile signed int16 setvt1,setvt2; 
....................  
.................... void piddc1(signed int16 setvt1) 
....................      { 
....................      br1=0; 
*
054E:  BCF    F83.4
....................      realvt1 =  qei_get_count();  
0550:  MOVFF  F66,31
0554:  MOVFF  F67,32
....................      err1 = setvt1 - realvt1; 
0558:  MOVF   31,W
055A:  SUBWF  5F,W
055C:  MOVWF  35
055E:  MOVF   32,W
0560:  SUBWFB x60,W
0562:  MOVWF  36
....................      if(Ti1>=2) 
0564:  MOVF   3D,W
0566:  SUBLW  01
0568:  BC    05CA
....................      { 
....................        delta1 = err1-epre1; 
056A:  MOVF   39,W
056C:  SUBWF  35,W
056E:  MOVWF  37
0570:  MOVF   3A,W
0572:  SUBWFB 36,W
0574:  MOVWF  38
....................        Ti1=0; 
0576:  CLRF   3D
....................        if(delta1>-10) errs1 += err1;//(err1>-20)&&(err1<20) 
0578:  BTFSS  38.7
057A:  BRA    058C
057C:  MOVF   38,W
057E:  SUBLW  FE
0580:  BC    0594
0582:  XORLW  FF
0584:  BNZ   058C
0586:  MOVF   37,W
0588:  SUBLW  F6
058A:  BC    0594
058C:  MOVF   35,W
058E:  ADDWF  33,F
0590:  MOVF   36,W
0592:  ADDWFC 34,F
....................        if (errs1 > 200 ) errs1=200; 
0594:  BTFSC  34.7
0596:  BRA    05A8
0598:  MOVF   34,F
059A:  BNZ   05A2
059C:  MOVF   33,W
059E:  SUBLW  C8
05A0:  BC    05A8
05A2:  CLRF   34
05A4:  MOVLW  C8
05A6:  MOVWF  33
....................        if (errs1 < -200 ) errs1=-200; 
05A8:  BTFSS  34.7
05AA:  BRA    05C2
05AC:  MOVF   34,W
05AE:  SUBLW  FF
05B0:  BNC   05C2
05B2:  BNZ   05BA
05B4:  MOVF   33,W
05B6:  SUBLW  37
05B8:  BNC   05C2
05BA:  MOVLW  FF
05BC:  MOVWF  34
05BE:  MOVLW  38
05C0:  MOVWF  33
....................        epre1=err1; 
05C2:  MOVFF  36,3A
05C6:  MOVFF  35,39
....................      } 
....................    
....................      pid1 =kp*err1 + ki*errs1+kd*delta1;  
05CA:  MOVFF  36,66
05CE:  MOVFF  35,65
05D2:  RCALL  0172
05D4:  MOVFF  24,68
05D8:  MOVFF  23,67
05DC:  MOVFF  22,66
05E0:  MOVFF  21,65
05E4:  MOVFF  03,6C
05E8:  MOVFF  02,6B
05EC:  MOVFF  01,6A
05F0:  MOVFF  00,69
05F4:  RCALL  01BA
05F6:  MOVFF  00,61
05FA:  MOVFF  01,62
05FE:  MOVFF  02,63
0602:  MOVFF  03,64
0606:  MOVFF  34,66
060A:  MOVFF  33,65
060E:  RCALL  0172
0610:  MOVFF  28,68
0614:  MOVFF  27,67
0618:  MOVFF  26,66
061C:  MOVFF  25,65
0620:  MOVFF  03,6C
0624:  MOVFF  02,6B
0628:  MOVFF  01,6A
062C:  MOVFF  00,69
0630:  RCALL  01BA
0632:  BCF    FD8.1
0634:  MOVFF  64,68
0638:  MOVFF  63,67
063C:  MOVFF  62,66
0640:  MOVFF  61,65
0644:  MOVFF  03,6C
0648:  MOVFF  02,6B
064C:  MOVFF  01,6A
0650:  MOVFF  00,69
0654:  RCALL  02AC
0656:  MOVFF  00,61
065A:  MOVFF  01,62
065E:  MOVFF  02,63
0662:  MOVFF  03,64
0666:  MOVFF  38,66
066A:  MOVFF  37,65
066E:  RCALL  0172
0670:  MOVFF  2C,68
0674:  MOVFF  2B,67
0678:  MOVFF  2A,66
067C:  MOVFF  29,65
0680:  MOVFF  03,6C
0684:  MOVFF  02,6B
0688:  MOVFF  01,6A
068C:  MOVFF  00,69
0690:  RCALL  01BA
0692:  BCF    FD8.1
0694:  MOVFF  64,68
0698:  MOVFF  63,67
069C:  MOVFF  62,66
06A0:  MOVFF  61,65
06A4:  MOVFF  03,6C
06A8:  MOVFF  02,6B
06AC:  MOVFF  01,6A
06B0:  MOVFF  00,69
06B4:  RCALL  02AC
06B6:  MOVFF  03,30
06BA:  MOVFF  02,2F
06BE:  MOVFF  01,2E
06C2:  MOVFF  00,2D
....................      duty1=pid1;    
06C6:  MOVFF  30,64
06CA:  MOVFF  2F,63
06CE:  MOVFF  2E,62
06D2:  MOVFF  2D,61
06D6:  RCALL  0516
06D8:  MOVFF  02,3C
06DC:  MOVFF  01,3B
....................      if (duty1 > 0)   dir1 = 0; 
06E0:  BTFSC  3C.7
06E2:  BRA    06F0
06E4:  MOVF   3C,F
06E6:  BNZ   06EE
06E8:  MOVF   3B,W
06EA:  SUBLW  00
06EC:  BTFSS  FD8.0
06EE:  BCF    F82.3
....................      if (duty1 <  0)    dir1 = 1; 
06F0:  BTFSS  3C.7
06F2:  BRA    06F6
06F4:  BSF    F82.3
....................      duty1= abs(duty1); 
06F6:  MOVFF  3C,03
06FA:  MOVF   3B,W
06FC:  BTFSS  3C.7
06FE:  BRA    0710
0700:  MOVLW  00
0702:  BSF    FD8.0
0704:  SUBFWB 3B,W
0706:  MOVWF  00
0708:  MOVLW  00
070A:  SUBFWB 3C,W
070C:  MOVWF  03
070E:  MOVF   00,W
0710:  MOVWF  3B
0712:  MOVFF  03,3C
....................      if(duty1>5) duty1+=200; 
0716:  BTFSC  3C.7
0718:  BRA    072C
071A:  MOVF   3C,F
071C:  BNZ   0724
071E:  MOVF   3B,W
0720:  SUBLW  05
0722:  BC    072C
0724:  MOVLW  C8
0726:  ADDWF  3B,F
0728:  MOVLW  00
072A:  ADDWFC 3C,F
....................      if(duty1>500) duty1=500; 
072C:  BTFSC  3C.7
072E:  BRA    0748
0730:  MOVF   3C,W
0732:  SUBLW  00
0734:  BC    0748
0736:  XORLW  FF
0738:  BNZ   0740
073A:  MOVF   3B,W
073C:  SUBLW  F4
073E:  BC    0748
0740:  MOVLW  01
0742:  MOVWF  3C
0744:  MOVLW  F4
0746:  MOVWF  3B
....................      set_pwm1_duty (duty1); 
0748:  MOVFF  3C,02
074C:  MOVFF  3B,01
0750:  RRCF   02,F
0752:  RRCF   01,F
0754:  RRCF   02,F
0756:  RRCF   01,F
0758:  RRCF   02,F
075A:  MOVFF  01,FBE
075E:  RRCF   02,F
0760:  RRCF   02,W
0762:  ANDLW  30
0764:  MOVWF  00
0766:  MOVF   FBD,W
0768:  ANDLW  CF
076A:  IORWF  00,W
076C:  MOVWF  FBD
....................      } 
076E:  GOTO   09C0 (RETURN)
....................       
.................... /// PID DONG CO 2 ////////////////// 
.................... signed int16 realvt2, errs2=0, err2, delta2=0, epre2=0, duty2 ; 
.................... float pid2; 
.................... void piddc2(signed int16 setvt2) 
....................      { 
....................      br2=0; 
0772:  BCF    F83.5
....................      realvt2 =  En2;  
0774:  MOVFF  20,44
0778:  MOVFF  1F,43
....................      err2 = setvt2 - realvt2; 
077C:  MOVF   43,W
077E:  SUBWF  5F,W
0780:  MOVWF  47
0782:  MOVF   44,W
0784:  SUBWFB x60,W
0786:  MOVWF  48
....................      if(Ti2>=2) 
0788:  MOVF   3E,W
078A:  SUBLW  01
078C:  BC    07FC
....................      { 
....................        Ti2=0; 
078E:  CLRF   3E
....................        if((err2>-20)&&(err2<20)) errs2 += err2; 
0790:  BTFSS  48.7
0792:  BRA    07A4
0794:  MOVF   48,W
0796:  SUBLW  FE
0798:  BC    07BA
079A:  XORLW  FF
079C:  BNZ   07A4
079E:  MOVF   47,W
07A0:  SUBLW  EC
07A2:  BC    07BA
07A4:  BTFSC  48.7
07A6:  BRA    07B2
07A8:  MOVF   48,F
07AA:  BNZ   07BA
07AC:  MOVF   47,W
07AE:  SUBLW  13
07B0:  BNC   07BA
07B2:  MOVF   47,W
07B4:  ADDWF  45,F
07B6:  MOVF   48,W
07B8:  ADDWFC 46,F
....................        if (errs2 > 200 ) errs2=200; 
07BA:  BTFSC  46.7
07BC:  BRA    07CE
07BE:  MOVF   46,F
07C0:  BNZ   07C8
07C2:  MOVF   45,W
07C4:  SUBLW  C8
07C6:  BC    07CE
07C8:  CLRF   46
07CA:  MOVLW  C8
07CC:  MOVWF  45
....................        if (errs2 < -200 ) errs2=-200; 
07CE:  BTFSS  46.7
07D0:  BRA    07E8
07D2:  MOVF   46,W
07D4:  SUBLW  FF
07D6:  BNC   07E8
07D8:  BNZ   07E0
07DA:  MOVF   45,W
07DC:  SUBLW  37
07DE:  BNC   07E8
07E0:  MOVLW  FF
07E2:  MOVWF  46
07E4:  MOVLW  38
07E6:  MOVWF  45
....................        delta2 = err2-epre2; 
07E8:  MOVF   4B,W
07EA:  SUBWF  47,W
07EC:  MOVWF  49
07EE:  MOVF   4C,W
07F0:  SUBWFB 48,W
07F2:  MOVWF  4A
....................        epre2=err2; 
07F4:  MOVFF  48,4C
07F8:  MOVFF  47,4B
....................      } 
....................    
....................      pid2 =kp*err2 + ki*errs2+kd*delta2;  
07FC:  MOVFF  48,66
0800:  MOVFF  47,65
0804:  RCALL  0172
0806:  MOVFF  24,68
080A:  MOVFF  23,67
080E:  MOVFF  22,66
0812:  MOVFF  21,65
0816:  MOVFF  03,6C
081A:  MOVFF  02,6B
081E:  MOVFF  01,6A
0822:  MOVFF  00,69
0826:  RCALL  01BA
0828:  MOVFF  00,61
082C:  MOVFF  01,62
0830:  MOVFF  02,63
0834:  MOVFF  03,64
0838:  MOVFF  46,66
083C:  MOVFF  45,65
0840:  RCALL  0172
0842:  MOVFF  28,68
0846:  MOVFF  27,67
084A:  MOVFF  26,66
084E:  MOVFF  25,65
0852:  MOVFF  03,6C
0856:  MOVFF  02,6B
085A:  MOVFF  01,6A
085E:  MOVFF  00,69
0862:  RCALL  01BA
0864:  BCF    FD8.1
0866:  MOVFF  64,68
086A:  MOVFF  63,67
086E:  MOVFF  62,66
0872:  MOVFF  61,65
0876:  MOVFF  03,6C
087A:  MOVFF  02,6B
087E:  MOVFF  01,6A
0882:  MOVFF  00,69
0886:  RCALL  02AC
0888:  MOVFF  00,61
088C:  MOVFF  01,62
0890:  MOVFF  02,63
0894:  MOVFF  03,64
0898:  MOVFF  4A,66
089C:  MOVFF  49,65
08A0:  RCALL  0172
08A2:  MOVFF  2C,68
08A6:  MOVFF  2B,67
08AA:  MOVFF  2A,66
08AE:  MOVFF  29,65
08B2:  MOVFF  03,6C
08B6:  MOVFF  02,6B
08BA:  MOVFF  01,6A
08BE:  MOVFF  00,69
08C2:  RCALL  01BA
08C4:  BCF    FD8.1
08C6:  MOVFF  64,68
08CA:  MOVFF  63,67
08CE:  MOVFF  62,66
08D2:  MOVFF  61,65
08D6:  MOVFF  03,6C
08DA:  MOVFF  02,6B
08DE:  MOVFF  01,6A
08E2:  MOVFF  00,69
08E6:  RCALL  02AC
08E8:  MOVFF  03,52
08EC:  MOVFF  02,51
08F0:  MOVFF  01,50
08F4:  MOVFF  00,4F
....................      duty2=pid2;     
08F8:  MOVFF  52,64
08FC:  MOVFF  51,63
0900:  MOVFF  50,62
0904:  MOVFF  4F,61
0908:  RCALL  0516
090A:  MOVFF  02,4E
090E:  MOVFF  01,4D
....................      if (duty2 > 0)   dir2 = 1; 
0912:  BTFSC  4E.7
0914:  BRA    0922
0916:  MOVF   4E,F
0918:  BNZ   0920
091A:  MOVF   4D,W
091C:  SUBLW  00
091E:  BTFSS  FD8.0
0920:  BSF    F82.0
....................      if (duty2 <  0)    dir2 = 0; 
0922:  BTFSS  4E.7
0924:  BRA    0928
0926:  BCF    F82.0
....................      duty2= abs(duty2); 
0928:  MOVFF  4E,03
092C:  MOVF   4D,W
092E:  BTFSS  4E.7
0930:  BRA    0942
0932:  MOVLW  00
0934:  BSF    FD8.0
0936:  SUBFWB 4D,W
0938:  MOVWF  00
093A:  MOVLW  00
093C:  SUBFWB 4E,W
093E:  MOVWF  03
0940:  MOVF   00,W
0942:  MOVWF  4D
0944:  MOVFF  03,4E
....................      if(duty2>5) duty2+=200; 
0948:  BTFSC  4E.7
094A:  BRA    095E
094C:  MOVF   4E,F
094E:  BNZ   0956
0950:  MOVF   4D,W
0952:  SUBLW  05
0954:  BC    095E
0956:  MOVLW  C8
0958:  ADDWF  4D,F
095A:  MOVLW  00
095C:  ADDWFC 4E,F
....................      if(duty2>400) duty2=400; 
095E:  BTFSC  4E.7
0960:  BRA    097A
0962:  MOVF   4E,W
0964:  SUBLW  00
0966:  BC    097A
0968:  XORLW  FF
096A:  BNZ   0972
096C:  MOVF   4D,W
096E:  SUBLW  90
0970:  BC    097A
0972:  MOVLW  01
0974:  MOVWF  4E
0976:  MOVLW  90
0978:  MOVWF  4D
....................      set_pwm2_duty (duty2); 
097A:  MOVFF  4E,02
097E:  MOVFF  4D,01
0982:  RRCF   02,F
0984:  RRCF   01,F
0986:  RRCF   02,F
0988:  RRCF   01,F
098A:  RRCF   02,F
098C:  MOVFF  01,FBB
0990:  RRCF   02,F
0992:  RRCF   02,W
0994:  ANDLW  30
0996:  MOVWF  00
0998:  MOVF   FBA,W
099A:  ANDLW  CF
099C:  IORWF  00,W
099E:  MOVWF  FBA
....................      } 
09A0:  GOTO   09CA (RETURN)
....................       
.................... ///// CHUONG TRINH QUET PHIM 
.................... volatile int16 dem=0, chonct=0; 
....................  
.................... ///// NGAT TIMER0 
.................... char demservo, xungservo; 
.................... #int_timer0 
.................... void ngat_timer0(void)  
....................    { 
....................    set_timer0(5); 
*
0152:  CLRF   FD7
0154:  MOVLW  05
0156:  MOVWF  FD6
....................    demservo++; 
0158:  INCF   57,F
....................    if (demservo>=200) 
015A:  MOVF   57,W
015C:  SUBLW  C7
015E:  BC    0164
....................       { 
....................       demservo=0; 
0160:  CLRF   57
....................       output_high(pin_d2); 
0162:  BSF    F8C.2
....................       } 
....................    if (demservo >=xungservo) output_low(pin_d2); 
0164:  MOVF   58,W
0166:  SUBWF  57,W
0168:  BTFSC  FD8.0
016A:  BCF    F8C.2
....................        
....................    } 
....................       
.................... ///// NGAT TIMER1 PID 
016C:  BCF    FF2.2
016E:  GOTO   0084
.................... #int_timer1 
.................... void ngat_timer1(void)  
....................    { 
....................       set_timer1(59286); 
*
09A4:  MOVLW  E7
09A6:  MOVWF  FCF
09A8:  MOVLW  96
09AA:  MOVWF  FCE
....................       Ti1++; 
09AC:  INCF   3D,F
....................       Ti2++; 
09AE:  INCF   3E,F
....................       dem++; 
09B0:  INCF   53,F
09B2:  BTFSC  FD8.2
09B4:  INCF   54,F
....................       piddc1(setvt1); 
09B6:  MOVFF  40,60
09BA:  MOVFF  3F,5F
09BE:  BRA    054E
....................       piddc2(setvt2); 
09C0:  MOVFF  42,60
09C4:  MOVFF  41,5F
09C8:  BRA    0772
....................    } 
....................  
.................... ///// KHAI BAO NHIEM VU 
.................... #include <resetall.c> 
.................... ///// RESETALL 
....................  
09CA:  BCF    F9E.0
09CC:  GOTO   0084
.................... void resetall() 
.................... { 
.................... disable_interrupts(int_timer1); 
*
0B4C:  BCF    F9D.0
.................... while (ctc1==1) { dc1t(370); } 
0B4E:  BTFSS  F81.0
0B50:  BRA    0B5E
0B52:  MOVLW  01
0B54:  MOVWF  5B
0B56:  MOVLW  72
0B58:  MOVWF  5A
0B5A:  BRA    0A3C
0B5C:  BRA    0B4E
.................... resetdc1(); 
0B5E:  RCALL  0A80
.................... beep(1,100); 
0B60:  MOVLW  01
0B62:  MOVWF  5A
0B64:  MOVLW  64
0B66:  MOVWF  5B
0B68:  RCALL  0AC6
.................... while (ctc2==1) { dc2t(370); } 
0B6A:  BTFSS  F81.2
0B6C:  BRA    0B7A
0B6E:  MOVLW  01
0B70:  MOVWF  5B
0B72:  MOVLW  72
0B74:  MOVWF  5A
0B76:  BRA    0AEA
0B78:  BRA    0B6A
.................... resetdc2(); 
0B7A:  RCALL  0B2E
.................... beep(1,100); 
0B7C:  MOVLW  01
0B7E:  MOVWF  5A
0B80:  MOVLW  64
0B82:  MOVWF  5B
0B84:  RCALL  0AC6
.................... qei_set_count(0); 
0B86:  CLRF   F67
0B88:  CLRF   F66
.................... En2=0; 
0B8A:  CLRF   20
0B8C:  CLRF   1F
.................... setvt1=0; 
0B8E:  CLRF   40
0B90:  CLRF   3F
.................... setvt2=0; 
0B92:  CLRF   42
0B94:  CLRF   41
.................... vantay1=vantay2=vancanh1=vanleo=vancanh2=vanduoi=1; 
0B96:  BSF    F80.5
0B98:  BSF    F80.0
0B9A:  BSF    F80.1
0B9C:  BSF    F80.2
0B9E:  BSF    F84.0
0BA0:  BSF    F84.1
.................... enable_interrupts(int_timer1); 
0BA2:  BSF    F9D.0
.................... clear_interrupt(int_timer1); 
0BA4:  BCF    F9E.0
.................... set_timer1(3035); 
0BA6:  MOVLW  0B
0BA8:  MOVWF  FCF
0BAA:  MOVLW  DB
0BAC:  MOVWF  FCE
.................... Ti1=0; 
0BAE:  CLRF   3D
.................... Ti2=0; 
0BB0:  CLRF   3E
.................... } 
0BB2:  RETLW  00
....................  
....................  
.................... #include <nhiemvu2.c> 
....................  
.................... ///// NHIEM VU 2 
....................  
.................... void nhiemvu2() 
.................... { 
.................... beep(2,100); 
0BB4:  MOVLW  02
0BB6:  MOVWF  5A
0BB8:  MOVLW  64
0BBA:  MOVWF  5B
0BBC:  RCALL  0AC6
.................... chonct=1; 
0BBE:  CLRF   56
0BC0:  MOVLW  01
0BC2:  MOVWF  55
.................... while(cten==1){delay_ms(50);} 
0BC4:  BTFSS  F81.6
0BC6:  BRA    0BD0
0BC8:  MOVLW  32
0BCA:  MOVWF  5E
0BCC:  RCALL  0A9E
0BCE:  BRA    0BC4
.................... if(cten==0) 
0BD0:  BTFSC  F81.6
0BD2:  BRA    0BE0
....................    { 
....................    delay_ms(20); 
0BD4:  MOVLW  14
0BD6:  MOVWF  5E
0BD8:  RCALL  0A9E
....................    if(cten==0) 
0BDA:  BTFSC  F81.6
0BDC:  BRA    0BE0
....................       { 
....................       vanduoi=0; 
0BDE:  BCF    F80.5
....................       } 
....................    } 
.................... while(cten==0) {delay_ms(50);} 
0BE0:  BTFSC  F81.6
0BE2:  BRA    0BEC
0BE4:  MOVLW  32
0BE6:  MOVWF  5E
0BE8:  RCALL  0A9E
0BEA:  BRA    0BE0
....................     
....................  
.................... } 
0BEC:  GOTO   0D90 (RETURN)
....................  
.................... #include <nhiemvu3.c> 
....................  
.................... ///// NHIEM VU 3 
....................  
.................... void nhiemvu3() 
.................... { 
.................... beep(3,100); 
0BF0:  MOVLW  03
0BF2:  MOVWF  5A
0BF4:  MOVLW  64
0BF6:  MOVWF  5B
0BF8:  RCALL  0AC6
.................... chonct=1; 
0BFA:  CLRF   56
0BFC:  MOVLW  01
0BFE:  MOVWF  55
....................  
....................  
....................  
....................  
.................... } 
0C00:  GOTO   0D9C (RETURN)
....................  
.................... #include <nhiemvu4.c> 
....................  
.................... ///// NHIEM VU 4 
....................  
.................... void nhiemvu4() 
.................... { 
.................... beep(4,100); 
0C04:  MOVLW  04
0C06:  MOVWF  5A
0C08:  MOVLW  64
0C0A:  MOVWF  5B
0C0C:  RCALL  0AC6
.................... //disable_interrupts(int_timer1); 
.................... resetdc1(); 
0C0E:  RCALL  0A80
.................... resetdc2(); 
0C10:  RCALL  0B2E
.................... chonct=1; 
0C12:  CLRF   56
0C14:  MOVLW  01
0C16:  MOVWF  55
....................  
.................... while (cten==1) {delay_ms(50);}; 
0C18:  BTFSS  F81.6
0C1A:  BRA    0C24
0C1C:  MOVLW  32
0C1E:  MOVWF  5E
0C20:  RCALL  0A9E
0C22:  BRA    0C18
.................... vanleo=0; 
0C24:  BCF    F80.1
.................... vanduoi=0; 
0C26:  BCF    F80.5
.................... delay_ms(2000); 
0C28:  MOVLW  08
0C2A:  MOVWF  5A
0C2C:  MOVLW  FA
0C2E:  MOVWF  5E
0C30:  RCALL  0A9E
0C32:  DECFSZ 5A,F
0C34:  BRA    0C2C
.................... vanleo=1; 
0C36:  BSF    F80.1
.................... delay_ms(2000); 
0C38:  MOVLW  08
0C3A:  MOVWF  5A
0C3C:  MOVLW  FA
0C3E:  MOVWF  5E
0C40:  RCALL  0A9E
0C42:  DECFSZ 5A,F
0C44:  BRA    0C3C
.................... vanleo=0; 
0C46:  BCF    F80.1
.................... delay_ms(2000); 
0C48:  MOVLW  08
0C4A:  MOVWF  5A
0C4C:  MOVLW  FA
0C4E:  MOVWF  5E
0C50:  RCALL  0A9E
0C52:  DECFSZ 5A,F
0C54:  BRA    0C4C
.................... vanleo=1;  
0C56:  BSF    F80.1
.................... delay_ms(2000); 
0C58:  MOVLW  08
0C5A:  MOVWF  5A
0C5C:  MOVLW  FA
0C5E:  MOVWF  5E
0C60:  RCALL  0A9E
0C62:  DECFSZ 5A,F
0C64:  BRA    0C5C
.................... vanleo=0; 
0C66:  BCF    F80.1
.................... delay_ms(2000); 
0C68:  MOVLW  08
0C6A:  MOVWF  5A
0C6C:  MOVLW  FA
0C6E:  MOVWF  5E
0C70:  RCALL  0A9E
0C72:  DECFSZ 5A,F
0C74:  BRA    0C6C
.................... vanleo=1; 
0C76:  BSF    F80.1
.................... delay_ms(2000); 
0C78:  MOVLW  08
0C7A:  MOVWF  5A
0C7C:  MOVLW  FA
0C7E:  MOVWF  5E
0C80:  RCALL  0A9E
0C82:  DECFSZ 5A,F
0C84:  BRA    0C7C
.................... vanleo=0; 
0C86:  BCF    F80.1
.................... delay_ms(2000); 
0C88:  MOVLW  08
0C8A:  MOVWF  5A
0C8C:  MOVLW  FA
0C8E:  MOVWF  5E
0C90:  RCALL  0A9E
0C92:  DECFSZ 5A,F
0C94:  BRA    0C8C
.................... vanleo=1; 
0C96:  BSF    F80.1
.................... delay_ms(2000); 
0C98:  MOVLW  08
0C9A:  MOVWF  5A
0C9C:  MOVLW  FA
0C9E:  MOVWF  5E
0CA0:  RCALL  0A9E
0CA2:  DECFSZ 5A,F
0CA4:  BRA    0C9C
.................... vanleo=0; 
0CA6:  BCF    F80.1
.................... delay_ms(2000); 
0CA8:  MOVLW  08
0CAA:  MOVWF  5A
0CAC:  MOVLW  FA
0CAE:  MOVWF  5E
0CB0:  RCALL  0A9E
0CB2:  DECFSZ 5A,F
0CB4:  BRA    0CAC
.................... vanleo=1; 
0CB6:  BSF    F80.1
.................... delay_ms(2000); 
0CB8:  MOVLW  08
0CBA:  MOVWF  5A
0CBC:  MOVLW  FA
0CBE:  MOVWF  5E
0CC0:  RCALL  0A9E
0CC2:  DECFSZ 5A,F
0CC4:  BRA    0CBC
....................  
.................... enable_interrupts(int_timer0); 
0CC6:  BSF    FF2.5
.................... clear_interrupt(int_timer0); 
0CC8:  BCF    FF2.2
....................  
.................... xungservo=10; 
0CCA:  MOVLW  0A
0CCC:  MOVWF  58
.................... } 
0CCE:  GOTO   0DA8 (RETURN)
....................  
....................  
.................... ///// MAIN ///// 
.................... int8 i=0; 
....................  
.................... void main() 
.................... { 
0CD2:  CLRF   FF8
0CD4:  BCF    FD0.7
0CD6:  BSF    07.7
0CD8:  CLRF   FEA
0CDA:  CLRF   FE9
0CDC:  CLRF   24
0CDE:  CLRF   23
0CE0:  CLRF   22
0CE2:  MOVLW  80
0CE4:  MOVWF  21
0CE6:  MOVLW  CD
0CE8:  MOVWF  28
0CEA:  MOVLW  CC
0CEC:  MOVWF  27
0CEE:  MOVLW  4C
0CF0:  MOVWF  26
0CF2:  MOVLW  7C
0CF4:  MOVWF  25
0CF6:  MOVLW  33
0CF8:  MOVWF  2C
0CFA:  MOVWF  2B
0CFC:  MOVWF  2A
0CFE:  MOVLW  7E
0D00:  MOVWF  29
0D02:  CLRF   34
0D04:  CLRF   33
0D06:  CLRF   38
0D08:  CLRF   37
0D0A:  CLRF   3A
0D0C:  CLRF   39
0D0E:  CLRF   46
0D10:  CLRF   45
0D12:  CLRF   4A
0D14:  CLRF   49
0D16:  CLRF   4C
0D18:  CLRF   4B
0D1A:  CLRF   54
0D1C:  CLRF   53
0D1E:  CLRF   56
0D20:  CLRF   55
0D22:  CLRF   59
0D24:  BCF    FB9.0
0D26:  BCF    FC1.6
0D28:  BCF    FC1.7
0D2A:  MOVLW  00
0D2C:  MOVWF  FB8
0D2E:  CLRF   19
0D30:  CLRF   1A
....................    khoidong();  
0D32:  BRA    09D0
....................    resetall(); 
0D34:  RCALL  0B4C
....................    chonct=0; 
0D36:  CLRF   56
0D38:  CLRF   55
....................    xungservo=12; 
0D3A:  MOVLW  0C
0D3C:  MOVWF  58
....................    beep(1,100);  
0D3E:  MOVLW  01
0D40:  MOVWF  5A
0D42:  MOVLW  64
0D44:  MOVWF  5B
0D46:  RCALL  0AC6
....................     
.................... while(true) 
....................    { 
....................     if (ctsel==0) 
0D48:  BTFSC  F81.7
0D4A:  BRA    0DC8
....................       { 
....................       dem=0; 
0D4C:  CLRF   54
0D4E:  CLRF   53
....................       i=0; 
0D50:  CLRF   59
....................       beep(1,100); 
0D52:  MOVLW  01
0D54:  MOVWF  5A
0D56:  MOVLW  64
0D58:  MOVWF  5B
0D5A:  RCALL  0AC6
....................       while (i==0) 
....................          { 
0D5C:  MOVF   59,F
0D5E:  BNZ   0D70
....................          if (ctsel==1) {delay_ms(50); i=1;} 
0D60:  BTFSS  F81.7
0D62:  BRA    0D6E
0D64:  MOVLW  32
0D66:  MOVWF  5E
0D68:  RCALL  0A9E
0D6A:  MOVLW  01
0D6C:  MOVWF  59
....................          } 
0D6E:  BRA    0D5C
....................       if (dem>50) 
0D70:  MOVF   54,F
0D72:  BNZ   0D7A
0D74:  MOVF   53,W
0D76:  SUBLW  32
0D78:  BC    0DAA
....................          { 
....................          if (chonct==1) resetall(); 
0D7A:  DECFSZ 55,W
0D7C:  BRA    0D84
0D7E:  MOVF   56,F
0D80:  BNZ   0D84
0D82:  RCALL  0B4C
....................          if (chonct==2) nhiemvu2(); 
0D84:  MOVF   55,W
0D86:  SUBLW  02
0D88:  BNZ   0D90
0D8A:  MOVF   56,F
0D8C:  BNZ   0D90
0D8E:  BRA    0BB4
....................          if (chonct==3) nhiemvu3(); 
0D90:  MOVF   55,W
0D92:  SUBLW  03
0D94:  BNZ   0D9C
0D96:  MOVF   56,F
0D98:  BNZ   0D9C
0D9A:  BRA    0BF0
....................          if (chonct==4) nhiemvu4(); 
0D9C:  MOVF   55,W
0D9E:  SUBLW  04
0DA0:  BNZ   0DA8
0DA2:  MOVF   56,F
0DA4:  BNZ   0DA8
0DA6:  BRA    0C04
....................          } 
....................       else  
0DA8:  BRA    0DC8
....................          { 
....................          chonct++; 
0DAA:  INCF   55,F
0DAC:  BTFSC  FD8.2
0DAE:  INCF   56,F
....................          if (chonct>4) {chonct=0; beep(10,100);} 
0DB0:  MOVF   56,F
0DB2:  BNZ   0DBA
0DB4:  MOVF   55,W
0DB6:  SUBLW  04
0DB8:  BC    0DC8
0DBA:  CLRF   56
0DBC:  CLRF   55
0DBE:  MOVLW  0A
0DC0:  MOVWF  5A
0DC2:  MOVLW  64
0DC4:  MOVWF  5B
0DC6:  RCALL  0AC6
....................          } 
....................       } 
....................    }    
0DC8:  BRA    0D48
.................... }  
....................  
....................  
....................  
0DCA:  SLEEP 

Configuration Fuses:
   Word  1: C600   H4 FCMEN IESO
   Word  2: 3E0C   PUT NOBROWNOUT BORRES NOWDT WDT32768 NOWINEN
   Word  3: 9D3C   NOPWMPIN LPOL_HIGH HPOL_HIGH T1LOWPOWER FLTAC1 SSP_RC PWM4B5 EXCLKC3 MCLR
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
