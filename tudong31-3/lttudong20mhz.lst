CCS PCH C Compiler, Version 5.025, 13168               12-Jun-17 16:07

               Filename:   E:\Robocon 2014\Lap trinh design\LAP TRINH ROBOT TU DONG\tudong31-3\lttudong20mhz.lst

               ROM used:   6400 bytes (39%)
                           Largest free fragment is 9980
               RAM used:   102 (13%) at main() level
                           131 (17%) worst case
               Stack used: 6 locations (3 in main + 3 for interrupts)
               Stack size: 31

*
0000:  GOTO   179E
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.5
0056:  GOTO   0060
005A:  BTFSC  FF2.2
005C:  GOTO   0162
0060:  BTFSS  F9D.0
0062:  GOTO   006C
0066:  BTFSC  F9E.0
0068:  GOTO   0A32
006C:  BTFSS  FF0.3
006E:  GOTO   0078
0072:  BTFSC  FF0.0
0074:  GOTO   00DE
0078:  BTFSS  FF0.4
007A:  GOTO   0084
007E:  BTFSC  FF0.1
0080:  GOTO   0120
0084:  BTFSS  FA3.0
0086:  GOTO   0090
008A:  BTFSC  FA4.0
008C:  GOTO   0B24
0090:  MOVFF  0E,00
0094:  MOVFF  0F,01
0098:  MOVFF  10,02
009C:  MOVFF  11,03
00A0:  MOVFF  0C,FE9
00A4:  MOVFF  07,FEA
00A8:  BSF    07.7
00AA:  MOVFF  08,FE1
00AE:  MOVFF  09,FE2
00B2:  MOVFF  0A,FD9
00B6:  MOVFF  0B,FDA
00BA:  MOVFF  12,FF3
00BE:  MOVFF  13,FF4
00C2:  MOVFF  14,FFA
00C6:  MOVFF  15,FF5
00CA:  MOVFF  16,FF6
00CE:  MOVFF  17,FF7
00D2:  MOVF   04,W
00D4:  MOVFF  06,FE0
00D8:  MOVFF  05,FD8
00DC:  RETFIE 0
.................... #include <lttudong20mhz.h> 
.................... #include <18F4431.h> 
.................... //////////// Standard Header file for the PIC18F4431 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4431 
*
01E4:  MOVLW  8E
01E6:  MOVWF  00
01E8:  MOVFF  74,01
01EC:  MOVFF  73,02
01F0:  CLRF   03
01F2:  BTFSS  x74.7
01F4:  BRA    0200
01F6:  COMF   01,F
01F8:  COMF   02,F
01FA:  INCF   02,F
01FC:  BNZ   0200
01FE:  INCF   01,F
0200:  MOVF   01,F
0202:  BNZ   0216
0204:  MOVFF  02,01
0208:  CLRF   02
020A:  MOVLW  08
020C:  SUBWF  00,F
020E:  MOVF   01,F
0210:  BNZ   0216
0212:  CLRF   00
0214:  BRA    022A
0216:  BCF    FD8.0
0218:  BTFSC  01.7
021A:  BRA    0224
021C:  RLCF   02,F
021E:  RLCF   01,F
0220:  DECF   00,F
0222:  BRA    0216
0224:  BTFSC  x74.7
0226:  BRA    022A
0228:  BCF    01.7
022A:  RETURN 0
022C:  MOVF   x73,W
022E:  BTFSC  FD8.2
0230:  BRA    0314
0232:  MOVWF  00
0234:  MOVF   x77,W
0236:  BTFSC  FD8.2
0238:  BRA    0314
023A:  ADDWF  00,F
023C:  BNC   0246
023E:  MOVLW  81
0240:  ADDWF  00,F
0242:  BC    0314
0244:  BRA    024E
0246:  MOVLW  7F
0248:  SUBWF  00,F
024A:  BNC   0314
024C:  BZ    0314
024E:  MOVFF  74,7B
0252:  MOVF   x78,W
0254:  XORWF  x7B,F
0256:  BSF    x74.7
0258:  BSF    x78.7
025A:  MOVF   x76,W
025C:  MULWF  x7A
025E:  MOVFF  FF4,7D
0262:  MOVF   x75,W
0264:  MULWF  x79
0266:  MOVFF  FF4,03
026A:  MOVFF  FF3,7C
026E:  MULWF  x7A
0270:  MOVF   FF3,W
0272:  ADDWF  x7D,F
0274:  MOVF   FF4,W
0276:  ADDWFC x7C,F
0278:  MOVLW  00
027A:  ADDWFC 03,F
027C:  MOVF   x76,W
027E:  MULWF  x79
0280:  MOVF   FF3,W
0282:  ADDWF  x7D,F
0284:  MOVF   FF4,W
0286:  ADDWFC x7C,F
0288:  MOVLW  00
028A:  CLRF   02
028C:  ADDWFC 03,F
028E:  ADDWFC 02,F
0290:  MOVF   x74,W
0292:  MULWF  x7A
0294:  MOVF   FF3,W
0296:  ADDWF  x7C,F
0298:  MOVF   FF4,W
029A:  ADDWFC 03,F
029C:  MOVLW  00
029E:  ADDWFC 02,F
02A0:  MOVF   x74,W
02A2:  MULWF  x79
02A4:  MOVF   FF3,W
02A6:  ADDWF  03,F
02A8:  MOVF   FF4,W
02AA:  ADDWFC 02,F
02AC:  MOVLW  00
02AE:  CLRF   01
02B0:  ADDWFC 01,F
02B2:  MOVF   x76,W
02B4:  MULWF  x78
02B6:  MOVF   FF3,W
02B8:  ADDWF  x7C,F
02BA:  MOVF   FF4,W
02BC:  ADDWFC 03,F
02BE:  MOVLW  00
02C0:  ADDWFC 02,F
02C2:  ADDWFC 01,F
02C4:  MOVF   x75,W
02C6:  MULWF  x78
02C8:  MOVF   FF3,W
02CA:  ADDWF  03,F
02CC:  MOVF   FF4,W
02CE:  ADDWFC 02,F
02D0:  MOVLW  00
02D2:  ADDWFC 01,F
02D4:  MOVF   x74,W
02D6:  MULWF  x78
02D8:  MOVF   FF3,W
02DA:  ADDWF  02,F
02DC:  MOVF   FF4,W
02DE:  ADDWFC 01,F
02E0:  INCF   00,F
02E2:  BTFSC  01.7
02E4:  BRA    02F0
02E6:  RLCF   x7C,F
02E8:  RLCF   03,F
02EA:  RLCF   02,F
02EC:  RLCF   01,F
02EE:  DECF   00,F
02F0:  MOVLW  00
02F2:  BTFSS  x7C.7
02F4:  BRA    030A
02F6:  INCF   03,F
02F8:  ADDWFC 02,F
02FA:  ADDWFC 01,F
02FC:  MOVF   01,W
02FE:  BNZ   030A
0300:  MOVF   02,W
0302:  BNZ   030A
0304:  MOVF   03,W
0306:  BNZ   030A
0308:  INCF   00,F
030A:  BTFSC  x7B.7
030C:  BSF    01.7
030E:  BTFSS  x7B.7
0310:  BCF    01.7
0312:  BRA    031C
0314:  CLRF   00
0316:  CLRF   01
0318:  CLRF   02
031A:  CLRF   03
031C:  RETURN 0
031E:  MOVLW  80
0320:  BTFSC  FD8.1
0322:  XORWF  x78,F
0324:  CLRF   x7D
0326:  CLRF   x7E
0328:  MOVFF  74,7C
032C:  MOVF   x78,W
032E:  XORWF  x7C,F
0330:  MOVF   x73,W
0332:  BTFSC  FD8.2
0334:  BRA    04EE
0336:  MOVWF  x7B
0338:  MOVWF  00
033A:  MOVF   x77,W
033C:  BTFSC  FD8.2
033E:  BRA    0500
0340:  SUBWF  x7B,F
0342:  BTFSC  FD8.2
0344:  BRA    0448
0346:  BNC   03C2
0348:  MOVFF  78,81
034C:  BSF    x81.7
034E:  MOVFF  79,80
0352:  MOVFF  7A,7F
0356:  CLRF   x7E
0358:  BCF    FD8.0
035A:  RRCF   x81,F
035C:  RRCF   x80,F
035E:  RRCF   x7F,F
0360:  RRCF   x7E,F
0362:  DECFSZ x7B,F
0364:  BRA    0356
0366:  BTFSS  x7C.7
0368:  BRA    0370
036A:  BSF    x7D.0
036C:  BRA    0528
036E:  BCF    x7D.0
0370:  BCF    x7B.0
0372:  BSF    x7D.4
0374:  CLRF   FEA
0376:  MOVLW  76
0378:  MOVWF  FE9
037A:  BRA    054E
037C:  BCF    x7D.4
037E:  BTFSC  x7C.7
0380:  BRA    0396
0382:  BTFSS  x7B.0
0384:  BRA    03AC
0386:  RRCF   x81,F
0388:  RRCF   x80,F
038A:  RRCF   x7F,F
038C:  RRCF   x7E,F
038E:  INCF   00,F
0390:  BTFSC  FD8.2
0392:  BRA    051E
0394:  BRA    03AC
0396:  BTFSC  x81.7
0398:  BRA    03B2
039A:  BCF    FD8.0
039C:  RLCF   x7E,F
039E:  RLCF   x7F,F
03A0:  RLCF   x80,F
03A2:  RLCF   x81,F
03A4:  DECF   00,F
03A6:  BTFSC  FD8.2
03A8:  BRA    051E
03AA:  BRA    0396
03AC:  BSF    x7D.6
03AE:  BRA    0486
03B0:  BCF    x7D.6
03B2:  MOVFF  74,7C
03B6:  BTFSS  x74.7
03B8:  BRA    03BE
03BA:  BSF    x81.7
03BC:  BRA    0510
03BE:  BCF    x81.7
03C0:  BRA    0510
03C2:  MOVFF  77,7B
03C6:  MOVFF  77,00
03CA:  MOVF   x73,W
03CC:  SUBWF  x7B,F
03CE:  MOVFF  74,81
03D2:  BSF    x81.7
03D4:  MOVFF  75,80
03D8:  MOVFF  76,7F
03DC:  CLRF   x7E
03DE:  BCF    FD8.0
03E0:  RRCF   x81,F
03E2:  RRCF   x80,F
03E4:  RRCF   x7F,F
03E6:  RRCF   x7E,F
03E8:  DECFSZ x7B,F
03EA:  BRA    03DC
03EC:  BTFSS  x7C.7
03EE:  BRA    03F6
03F0:  BSF    x7D.1
03F2:  BRA    0528
03F4:  BCF    x7D.1
03F6:  BCF    x7B.0
03F8:  BSF    x7D.5
03FA:  CLRF   FEA
03FC:  MOVLW  7A
03FE:  MOVWF  FE9
0400:  BRA    054E
0402:  BCF    x7D.5
0404:  BTFSC  x7C.7
0406:  BRA    041C
0408:  BTFSS  x7B.0
040A:  BRA    0432
040C:  RRCF   x81,F
040E:  RRCF   x80,F
0410:  RRCF   x7F,F
0412:  RRCF   x7E,F
0414:  INCF   00,F
0416:  BTFSC  FD8.2
0418:  BRA    051E
041A:  BRA    0432
041C:  BTFSC  x81.7
041E:  BRA    0438
0420:  BCF    FD8.0
0422:  RLCF   x7E,F
0424:  RLCF   x7F,F
0426:  RLCF   x80,F
0428:  RLCF   x81,F
042A:  DECF   00,F
042C:  BTFSC  FD8.2
042E:  BRA    051E
0430:  BRA    041C
0432:  BSF    x7D.7
0434:  BRA    0486
0436:  BCF    x7D.7
0438:  MOVFF  78,7C
043C:  BTFSS  x78.7
043E:  BRA    0444
0440:  BSF    x81.7
0442:  BRA    0510
0444:  BCF    x81.7
0446:  BRA    0510
0448:  MOVFF  78,81
044C:  BSF    x81.7
044E:  MOVFF  79,80
0452:  MOVFF  7A,7F
0456:  BTFSS  x7C.7
0458:  BRA    0462
045A:  BCF    x81.7
045C:  BSF    x7D.2
045E:  BRA    0528
0460:  BCF    x7D.2
0462:  CLRF   x7E
0464:  BCF    x7B.0
0466:  CLRF   FEA
0468:  MOVLW  76
046A:  MOVWF  FE9
046C:  BRA    054E
046E:  BTFSC  x7C.7
0470:  BRA    04AA
0472:  MOVFF  74,7C
0476:  BTFSS  x7B.0
0478:  BRA    0486
047A:  RRCF   x81,F
047C:  RRCF   x80,F
047E:  RRCF   x7F,F
0480:  RRCF   x7E,F
0482:  INCF   00,F
0484:  BZ    051E
0486:  BTFSS  x7E.7
0488:  BRA    04A0
048A:  INCF   x7F,F
048C:  BNZ   04A0
048E:  INCF   x80,F
0490:  BNZ   04A0
0492:  INCF   x81,F
0494:  BNZ   04A0
0496:  RRCF   x81,F
0498:  RRCF   x80,F
049A:  RRCF   x7F,F
049C:  INCF   00,F
049E:  BZ    051E
04A0:  BTFSC  x7D.6
04A2:  BRA    03B0
04A4:  BTFSC  x7D.7
04A6:  BRA    0436
04A8:  BRA    04E2
04AA:  MOVLW  80
04AC:  XORWF  x81,F
04AE:  BTFSS  x81.7
04B0:  BRA    04BA
04B2:  BRA    0528
04B4:  MOVFF  78,7C
04B8:  BRA    04CE
04BA:  MOVFF  74,7C
04BE:  MOVF   x81,F
04C0:  BNZ   04CE
04C2:  MOVF   x80,F
04C4:  BNZ   04CE
04C6:  MOVF   x7F,F
04C8:  BNZ   04CE
04CA:  CLRF   00
04CC:  BRA    0510
04CE:  BTFSC  x81.7
04D0:  BRA    04E2
04D2:  BCF    FD8.0
04D4:  RLCF   x7E,F
04D6:  RLCF   x7F,F
04D8:  RLCF   x80,F
04DA:  RLCF   x81,F
04DC:  DECFSZ 00,F
04DE:  BRA    04CE
04E0:  BRA    051E
04E2:  BTFSS  x7C.7
04E4:  BRA    04EA
04E6:  BSF    x81.7
04E8:  BRA    0510
04EA:  BCF    x81.7
04EC:  BRA    0510
04EE:  MOVFF  77,00
04F2:  MOVFF  78,81
04F6:  MOVFF  79,80
04FA:  MOVFF  7A,7F
04FE:  BRA    0510
0500:  MOVFF  73,00
0504:  MOVFF  74,81
0508:  MOVFF  75,80
050C:  MOVFF  76,7F
0510:  MOVFF  81,01
0514:  MOVFF  80,02
0518:  MOVFF  7F,03
051C:  BRA    0586
051E:  CLRF   00
0520:  CLRF   01
0522:  CLRF   02
0524:  CLRF   03
0526:  BRA    0586
0528:  CLRF   x7E
052A:  COMF   x7F,F
052C:  COMF   x80,F
052E:  COMF   x81,F
0530:  COMF   x7E,F
0532:  INCF   x7E,F
0534:  BNZ   0540
0536:  INCF   x7F,F
0538:  BNZ   0540
053A:  INCF   x80,F
053C:  BNZ   0540
053E:  INCF   x81,F
0540:  BTFSC  x7D.0
0542:  BRA    036E
0544:  BTFSC  x7D.1
0546:  BRA    03F4
0548:  BTFSC  x7D.2
054A:  BRA    0460
054C:  BRA    04B4
054E:  MOVF   FEF,W
0550:  ADDWF  x7F,F
0552:  BNC   055E
0554:  INCF   x80,F
0556:  BNZ   055E
0558:  INCF   x81,F
055A:  BTFSC  FD8.2
055C:  BSF    x7B.0
055E:  MOVF   FED,F
0560:  MOVF   FEF,W
0562:  ADDWF  x80,F
0564:  BNC   056C
0566:  INCF   x81,F
0568:  BTFSC  FD8.2
056A:  BSF    x7B.0
056C:  MOVF   FED,F
056E:  MOVF   FEF,W
0570:  BTFSC  FEF.7
0572:  BRA    0576
0574:  XORLW  80
0576:  ADDWF  x81,F
0578:  BTFSC  FD8.0
057A:  BSF    x7B.0
057C:  BTFSC  x7D.4
057E:  BRA    037C
0580:  BTFSC  x7D.5
0582:  BRA    0402
0584:  BRA    046E
0586:  RETURN 0
0588:  MOVLW  8E
058A:  MOVWF  00
058C:  MOVF   x6F,W
058E:  SUBWF  00,F
0590:  MOVFF  70,02
0594:  MOVFF  71,01
0598:  BSF    02.7
059A:  MOVF   00,F
059C:  BZ    05B0
059E:  BCF    FD8.0
05A0:  MOVF   02,F
05A2:  BNZ   05A8
05A4:  MOVF   01,F
05A6:  BZ    05B0
05A8:  RRCF   02,F
05AA:  RRCF   01,F
05AC:  DECFSZ 00,F
05AE:  BRA    059E
05B0:  BTFSS  x70.7
05B2:  BRA    05BE
05B4:  COMF   01,F
05B6:  COMF   02,F
05B8:  INCF   01,F
05BA:  BTFSC  FD8.2
05BC:  INCF   02,F
05BE:  RETURN 0
*
0AB8:  ADDWF  FE8,W
0ABA:  CLRF   FF7
0ABC:  RLCF   FF7,F
0ABE:  ADDLW  D3
0AC0:  MOVWF  FF6
0AC2:  MOVLW  0A
0AC4:  ADDWFC FF7,F
0AC6:  TBLRD*-
0AC8:  MOVF   FF5,W
0ACA:  MOVWF  FFA
0ACC:  TBLRD*
0ACE:  MOVF   FF5,W
0AD0:  MOVWF  FF9
0AD2:  DATA 4A,0A
0AD4:  DATA 56,0A
0AD6:  DATA 6E,0A
0AD8:  DATA 86,0A
....................  
.................... #list 
....................  
.................... #include <PIC18F4431_registers.h> 
.................... #byte TOSU = 0xFFF 
.................... #word TOS = 0xFFE 
.................... #byte STKPTR = 0xFFC 
.................... #bit    STKOVF = STKPTR.7 
.................... #byte STKPTR = 0xFFC 
.................... #bit    STKPTR0 = STKPTR.0 
.................... #bit    STKPTR1 = STKPTR.1 
.................... #bit    STKPTR2 = STKPTR.2 
.................... #bit    STKPTR3 = STKPTR.3 
.................... #bit    STKPTR4 = STKPTR.4 
.................... #bit    STKUNF = STKPTR.6 
.................... #bit    STKFUL = STKPTR.7 
.................... #byte PCLATU = 0xFFB 
.................... #byte PCLATH = 0xFFA 
.................... #byte PCL = 0xFF9 
.................... #byte TBLPTRU = 0xFF8 
.................... #bit    TBLPTRU0 = TBLPTRU.0 
.................... #bit    TBLPTRU1 = TBLPTRU.1 
.................... #bit    TBLPTRU2 = TBLPTRU.2 
.................... #bit    TBLPTRU3 = TBLPTRU.3 
.................... #bit    TBLPTRU4 = TBLPTRU.4 
.................... #bit    ACSS = TBLPTRU.5 
.................... #word TBLPTR = 0xFF7 
.................... #byte TABLAT = 0xFF5 
.................... #word PROD = 0xFF4 
.................... #byte INTCON = 0xFF2 
.................... #bit    RBIF = INTCON.0 
.................... #bit    INT0IF = INTCON.1 
.................... #bit    TMR0IF = INTCON.2 
.................... #bit    RBIE = INTCON.3 
.................... #bit    INT0IE = INTCON.4 
.................... #bit    TMR0IE = INTCON.5 
.................... #bit    PEIE_GIEL = INTCON.6 
.................... #bit    GIE_GIEH = INTCON.7 
.................... #byte INTCON = 0xFF2 
.................... #bit    PEIE = INTCON.6 
.................... #bit    GIE = INTCON.7 
.................... #byte INTCON = 0xFF2 
.................... #bit    INT0F = INTCON.1 
.................... #bit    T0IF = INTCON.2 
.................... #bit    INT0E = INTCON.4 
.................... #bit    T0IE = INTCON.5 
.................... #bit    GIEL = INTCON.6 
.................... #bit    GIEH = INTCON.7 
.................... #byte INTCON2 = 0xFF1 
.................... #bit    T0IP = INTCON2.2 
.................... #byte INTCON2 = 0xFF1 
.................... #bit    RBIP = INTCON2.0 
.................... #bit    TMR0IP = INTCON2.2 
.................... #bit    INTEDG2 = INTCON2.4 
.................... #bit    INTEDG1 = INTCON2.5 
.................... #bit    INTEDG0 = INTCON2.6 
.................... #bit    RBPU = INTCON2.7 
.................... #byte INTCON3 = 0xFF0 
.................... #bit    INT1F = INTCON3.0 
.................... #bit    INT2F = INTCON3.1 
.................... #bit    INT1E = INTCON3.3 
.................... #bit    INT2E = INTCON3.4 
.................... #bit    INT1P = INTCON3.6 
.................... #bit    INT2P = INTCON3.7 
.................... #byte INTCON3 = 0xFF0 
.................... #bit    INT1IF = INTCON3.0 
.................... #bit    INT2IF = INTCON3.1 
.................... #bit    INT1IE = INTCON3.3 
.................... #bit    INT2IE = INTCON3.4 
.................... #bit    INT1IP = INTCON3.6 
.................... #bit    INT2IP = INTCON3.7 
.................... #byte INDF0 = 0xFEF 
.................... #byte POSTINC0 = 0xFEE 
.................... #byte POSTDEC0 = 0xFED 
.................... #byte PREINC0 = 0xFEC 
.................... #byte PLUSW0 = 0xFEB 
.................... #word FSR0 = 0xFEA 
.................... #byte WREG = 0xFE8 
.................... #byte INDF1 = 0xFE7 
.................... #byte POSTINC1 = 0xFE6 
.................... #byte POSTDEC1 = 0xFE5 
.................... #byte PREINC1 = 0xFE4 
.................... #byte PLUSW1 = 0xFE3 
.................... #word FSR1 = 0xFE2 
.................... #byte BSR = 0xFE0 
.................... #byte INDF2 = 0xFDF 
.................... #byte POSTINC2 = 0xFDE 
.................... #byte POSTDEC2 = 0xFDD 
.................... #byte PREINC2 = 0xFDC 
.................... #byte PLUSW2 = 0xFDB 
.................... #word FSR2 = 0xFDA 
.................... #byte STATUS = 0xFD8 
.................... #bit    C = STATUS.0 
.................... #bit    DC = STATUS.1 
.................... #bit    Z = STATUS.2 
.................... #bit    OV = STATUS.3 
.................... #bit    N = STATUS.4 
.................... #word TMR0 = 0xFD7 
.................... #byte T0CON = 0xFD5 
.................... #bit    T0PS0 = T0CON.0 
.................... #bit    T0PS1 = T0CON.1 
.................... #bit    T0PS2 = T0CON.2 
.................... #bit    PSA = T0CON.3 
.................... #bit    T0SE = T0CON.4 
.................... #bit    T0CS = T0CON.5 
.................... #bit    T016BIT = T0CON.6 
.................... #bit    TMR0ON = T0CON.7 
.................... #byte OSCCON = 0xFD3 
.................... #bit    FLTS = OSCCON.2 
.................... #byte OSCCON = 0xFD3 
.................... #bit    SCS0 = OSCCON.0 
.................... #bit    SCS1 = OSCCON.1 
.................... #bit    IOFS = OSCCON.2 
.................... #bit    OSTS = OSCCON.3 
.................... #bit    IRCF0 = OSCCON.4 
.................... #bit    IRCF1 = OSCCON.5 
.................... #bit    IRCF2 = OSCCON.6 
.................... #bit    IDLEN = OSCCON.7 
.................... #byte LVDCON = 0xFD2 
.................... #bit    IVRST = LVDCON.5 
.................... #byte LVDCON = 0xFD2 
.................... #bit    LVDL0 = LVDCON.0 
.................... #bit    LVDL1 = LVDCON.1 
.................... #bit    LVDL2 = LVDCON.2 
.................... #bit    LVDL3 = LVDCON.3 
.................... #bit    LVDEN = LVDCON.4 
.................... #bit    IRVST = LVDCON.5 
.................... #byte WDTCON = 0xFD1 
.................... #bit    SWDTEN = WDTCON.0 
.................... #bit    WDTW = WDTCON.7 
.................... #byte RCON = 0xFD0 
.................... #bit    BOR = RCON.0 
.................... #bit    POR = RCON.1 
.................... #bit    PD = RCON.2 
.................... #bit    TO = RCON.3 
.................... #bit    RI = RCON.4 
.................... #bit    IPEN = RCON.7 
.................... #word TMR1 = 0xFCF 
.................... #byte T1CON = 0xFCD 
.................... #bit    T1INSYNC = T1CON.2 
.................... #byte T1CON = 0xFCD 
.................... #bit    TMR1ON = T1CON.0 
.................... #bit    TMR1CS = T1CON.1 
.................... #bit    T1SYNC = T1CON.2 
.................... #bit    T1OSCEN = T1CON.3 
.................... #bit    T1CKPS0 = T1CON.4 
.................... #bit    T1CKPS1 = T1CON.5 
.................... #bit    T1RUN = T1CON.6 
.................... #bit    RD16 = T1CON.7 
.................... #byte TMR2 = 0xFCC 
.................... #byte PR2 = 0xFCB 
.................... #byte T2CON = 0xFCA 
.................... #bit    T2OUTPS0 = T2CON.3 
.................... #bit    T2OUTPS1 = T2CON.4 
.................... #bit    T2OUTPS2 = T2CON.5 
.................... #bit    T2OUTPS3 = T2CON.6 
.................... #byte T2CON = 0xFCA 
.................... #bit    T2CKPS0 = T2CON.0 
.................... #bit    T2CKPS1 = T2CON.1 
.................... #bit    TMR2ON = T2CON.2 
.................... #bit    TOUTPS0 = T2CON.3 
.................... #bit    TOUTPS1 = T2CON.4 
.................... #bit    TOUTPS2 = T2CON.5 
.................... #bit    TOUTPS3 = T2CON.6 
.................... #byte SSPBUF = 0xFC9 
.................... #byte SSPADD = 0xFC8 
.................... #byte SSPSTAT = 0xFC7 
.................... #bit    READ_WRITE = SSPSTAT.2 
.................... #bit    DATA_ADDRESS = SSPSTAT.5 
.................... #byte SSPSTAT = 0xFC7 
.................... #bit    WRITE = SSPSTAT.2 
.................... #bit    ADDRESS = SSPSTAT.5 
.................... #byte SSPSTAT = 0xFC7 
.................... #bit    BF = SSPSTAT.0 
.................... #bit    UA = SSPSTAT.1 
.................... #bit    R = SSPSTAT.2 
.................... #bit    S = SSPSTAT.3 
.................... #bit    P = SSPSTAT.4 
.................... #bit    D = SSPSTAT.5 
.................... #bit    CKE = SSPSTAT.6 
.................... #bit    SMP = SSPSTAT.7 
.................... #byte SSPSTAT = 0xFC7 
.................... #bit    R_W = SSPSTAT.2 
.................... #bit    D_A = SSPSTAT.5 
.................... #byte SSPSTAT = 0xFC7 
.................... #bit    W = SSPSTAT.2 
.................... #bit    A = SSPSTAT.5 
.................... #byte SSPCON = 0xFC6 
.................... #bit    SSPM0 = SSPCON.0 
.................... #bit    SSPM1 = SSPCON.1 
.................... #bit    SSPM2 = SSPCON.2 
.................... #bit    SSPM3 = SSPCON.3 
.................... #bit    CKP = SSPCON.4 
.................... #bit    SSPEN = SSPCON.5 
.................... #bit    SSPOV = SSPCON.6 
.................... #bit    WCOL = SSPCON.7 
.................... #word ADRES = 0xFC4 
.................... #byte ADCON0 = 0xFC2 
.................... #bit    GO_DONE = ADCON0.1 
.................... #byte ADCON0 = 0xFC2 
.................... #bit    ADON = ADCON0.0 
.................... #bit    GO = ADCON0.1 
.................... #bit    ACMOD0 = ADCON0.2 
.................... #bit    ACMOD1 = ADCON0.3 
.................... #bit    ACSCH = ADCON0.4 
.................... #bit    ACONV = ADCON0.5 
.................... #byte ADCON0 = 0xFC2 
.................... #bit    GODONE = ADCON0.1 
.................... #byte ADCON0 = 0xFC2 
.................... #bit    DONE = ADCON0.1 
.................... #byte ADCON1 = 0xFC1 
.................... #bit    FFOVFL = ADCON1.2 
.................... #byte ADCON1 = 0xFC1 
.................... #bit    ADPNT0 = ADCON1.0 
.................... #bit    ADPNT1 = ADCON1.1 
.................... #bit    BFOVFL = ADCON1.2 
.................... #bit    BFEMT = ADCON1.3 
.................... #bit    FIFOEN = ADCON1.4 
.................... #bit    VCFG0 = ADCON1.6 
.................... #bit    VCFG1 = ADCON1.7 
.................... #byte ADCON2 = 0xFC0 
.................... #bit    ADCS0 = ADCON2.0 
.................... #bit    ADCS1 = ADCON2.1 
.................... #bit    ADCS2 = ADCON2.2 
.................... #bit    ACQT0 = ADCON2.3 
.................... #bit    ACQT1 = ADCON2.4 
.................... #bit    ACQT2 = ADCON2.5 
.................... #bit    ACQT3 = ADCON2.6 
.................... #bit    ADFM = ADCON2.7 
.................... #word CCPR1 = 0xFBF 
.................... #byte CCP1CON = 0xFBD 
.................... #bit    CCP1Y = CCP1CON.4 
.................... #bit    CCP1X = CCP1CON.5 
.................... #byte CCP1CON = 0xFBD 
.................... #bit    CCP1M0 = CCP1CON.0 
.................... #bit    CCP1M1 = CCP1CON.1 
.................... #bit    CCP1M2 = CCP1CON.2 
.................... #bit    CCP1M3 = CCP1CON.3 
.................... #bit    DC1B0 = CCP1CON.4 
.................... #bit    DC1B1 = CCP1CON.5 
.................... #word CCPR2 = 0xFBC 
.................... #byte CCP2CON = 0xFBA 
.................... #bit    CCP2Y = CCP2CON.4 
.................... #bit    CCP2X = CCP2CON.5 
.................... #byte CCP2CON = 0xFBA 
.................... #bit    CCP2M0 = CCP2CON.0 
.................... #bit    CCP2M1 = CCP2CON.1 
.................... #bit    CCP2M2 = CCP2CON.2 
.................... #bit    CCP2M3 = CCP2CON.3 
.................... #bit    DC2B0 = CCP2CON.4 
.................... #bit    DC2B1 = CCP2CON.5 
.................... #byte ANSEL1 = 0xFB9 
.................... #bit    ANS8 = ANSEL1.0 
.................... #byte ANSEL0 = 0xFB8 
.................... #byte T5CON = 0xFB7 
.................... #bit    TMR5ON = T5CON.0 
.................... #bit    TMR5CS = T5CON.1 
.................... #bit    T5SYNC = T5CON.2 
.................... #bit    T5PS0 = T5CON.3 
.................... #bit    T5PS1 = T5CON.4 
.................... #bit    T5MOD = T5CON.5 
.................... #bit    RESEN = T5CON.6 
.................... #bit    T5SEN = T5CON.7 
.................... #byte QEICON = 0xFB6 
.................... #bit    UP_DOWN = QEICON.5 
.................... #byte QEICON = 0xFB6 
.................... #bit    PDEC0 = QEICON.0 
.................... #bit    PDEC1 = QEICON.1 
.................... #bit    QEIM0 = QEICON.2 
.................... #bit    QEIM1 = QEICON.3 
.................... #bit    QEIM2 = QEICON.4 
.................... #bit    UP = QEICON.5 
.................... #bit    QERR = QEICON.6 
.................... #bit    VELM = QEICON.7 
.................... #byte QEICON = 0xFB6 
.................... #bit    UPDOWN = QEICON.5 
.................... #byte QEICON = 0xFB6 
.................... #bit    DOWN = QEICON.5 
.................... #byte SPBRGH = 0xFB0 
.................... #byte SPBRG = 0xFAF 
.................... #byte RCREG = 0xFAE 
.................... #byte TXREG = 0xFAD 
.................... #byte TXSTA = 0xFAC 
.................... #bit    TX9D = TXSTA.0 
.................... #bit    TRMT = TXSTA.1 
.................... #bit    BRGH = TXSTA.2 
.................... #bit    SENDB = TXSTA.3 
.................... #bit    SYNC = TXSTA.4 
.................... #bit    TXEN = TXSTA.5 
.................... #bit    TX9 = TXSTA.6 
.................... #bit    CSRC = TXSTA.7 
.................... #byte RCSTA = 0xFAB 
.................... #bit    ADEN = RCSTA.3 
.................... #byte RCSTA = 0xFAB 
.................... #bit    RX9D = RCSTA.0 
.................... #bit    OERR = RCSTA.1 
.................... #bit    FERR = RCSTA.2 
.................... #bit    ADDEN = RCSTA.3 
.................... #bit    CREN = RCSTA.4 
.................... #bit    SREN = RCSTA.5 
.................... #bit    RX9 = RCSTA.6 
.................... #bit    SPEN = RCSTA.7 
.................... #byte BAUDCON = 0xFAA 
.................... #bit    SCKP = BAUDCON.4 
.................... #bit    RCMT = BAUDCON.6 
.................... #byte BAUDCON = 0xFAA 
.................... #bit    ABDEN = BAUDCON.0 
.................... #bit    WUE = BAUDCON.1 
.................... #bit    BRG16 = BAUDCON.3 
.................... #bit    TXCKP = BAUDCON.4 
.................... #bit    RXDTP = BAUDCON.5 
.................... #bit    RCIDL = BAUDCON.6 
.................... #bit    ABDOVF = BAUDCON.7 
.................... #byte EEADR = 0xFA9 
.................... #byte EEDATA = 0xFA8 
.................... #byte EECON2 = 0xFA7 
.................... #byte EECON1 = 0xFA6 
.................... #bit    RD = EECON1.0 
.................... #bit    WR = EECON1.1 
.................... #bit    WREN = EECON1.2 
.................... #bit    WRERR = EECON1.3 
.................... #bit    FREE = EECON1.4 
.................... #bit    CFGS = EECON1.6 
.................... #bit    EEPGD = EECON1.7 
.................... #byte IPR3 = 0xFA5 
.................... #bit    TMR5IP = IPR3.0 
.................... #bit    IC1IP = IPR3.1 
.................... #bit    IC2QEIP = IPR3.2 
.................... #bit    IC3DRIP = IPR3.3 
.................... #bit    PTIP = IPR3.4 
.................... #byte PIR3 = 0xFA4 
.................... #bit    TMR5IF = PIR3.0 
.................... #bit    IC1IF = PIR3.1 
.................... #bit    IC2QEIF = PIR3.2 
.................... #bit    IC3DRIF = PIR3.3 
.................... #bit    PTIF = PIR3.4 
.................... #byte PIE3 = 0xFA3 
.................... #bit    TMR5IE = PIE3.0 
.................... #bit    IC1IE = PIE3.1 
.................... #bit    IC2QEIE = PIE3.2 
.................... #bit    IC3DRIE = PIE3.3 
.................... #bit    PTIE = PIE3.4 
.................... #byte IPR2 = 0xFA2 
.................... #bit    CCP2IP = IPR2.0 
.................... #bit    LVDIP = IPR2.2 
.................... #bit    EEIP = IPR2.4 
.................... #bit    OSFIP = IPR2.7 
.................... #byte PIR2 = 0xFA1 
.................... #bit    CCP2IF = PIR2.0 
.................... #bit    LVDIF = PIR2.2 
.................... #bit    EEIF = PIR2.4 
.................... #bit    OSFIF = PIR2.7 
.................... #byte PIE2 = 0xFA0 
.................... #bit    CCP2IE = PIE2.0 
.................... #bit    LVDIE = PIE2.2 
.................... #bit    EEIE = PIE2.4 
.................... #bit    OSFIE = PIE2.7 
.................... #byte IPR1 = 0xF9F 
.................... #bit    TBIP = IPR1.4 
.................... #byte IPR1 = 0xF9F 
.................... #bit    TMR1IP = IPR1.0 
.................... #bit    TMR2IP = IPR1.1 
.................... #bit    CCP1IP = IPR1.2 
.................... #bit    SSPIP = IPR1.3 
.................... #bit    TXIP = IPR1.4 
.................... #bit    RCIP = IPR1.5 
.................... #bit    ADIP = IPR1.6 
.................... #byte PIR1 = 0xF9E 
.................... #bit    TBIF = PIR1.4 
.................... #byte PIR1 = 0xF9E 
.................... #bit    TMR1IF = PIR1.0 
.................... #bit    TMR2IF = PIR1.1 
.................... #bit    CCP1IF = PIR1.2 
.................... #bit    SSPIF = PIR1.3 
.................... #bit    TXIF = PIR1.4 
.................... #bit    RCIF = PIR1.5 
.................... #bit    ADIF = PIR1.6 
.................... #byte PIE1 = 0xF9D 
.................... #bit    TBIE = PIE1.4 
.................... #byte PIE1 = 0xF9D 
.................... #bit    TMR1IE = PIE1.0 
.................... #bit    TMR2IE = PIE1.1 
.................... #bit    CCP1IE = PIE1.2 
.................... #bit    SSPIE = PIE1.3 
.................... #bit    TXIE = PIE1.4 
.................... #bit    RCIE = PIE1.5 
.................... #bit    ADIE = PIE1.6 
.................... #byte OSCTUNE = 0xF9B 
.................... #byte ADCON3 = 0xF9A 
.................... #bit    SSRC0 = ADCON3.0 
.................... #bit    SSRC1 = ADCON3.1 
.................... #bit    SSRC2 = ADCON3.2 
.................... #bit    SSRC3 = ADCON3.3 
.................... #bit    SSRC4 = ADCON3.4 
.................... #bit    ADRS0 = ADCON3.6 
.................... #bit    ADRS1 = ADCON3.7 
.................... #byte ADCHS = 0xF99 
.................... #bit    GASEL0 = ADCHS.0 
.................... #bit    GASEL1 = ADCHS.1 
.................... #bit    GCSEL0 = ADCHS.2 
.................... #bit    GCSEL1 = ADCHS.3 
.................... #bit    GBSEL0 = ADCHS.4 
.................... #bit    GBSEL1 = ADCHS.5 
.................... #bit    GDSEL0 = ADCHS.6 
.................... #bit    GDSEL1 = ADCHS.7 
.................... #byte ADCHS = 0xF99 
.................... #bit    SASEL0 = ADCHS.0 
.................... #bit    SASEL1 = ADCHS.1 
.................... #bit    SCSEL0 = ADCHS.2 
.................... #bit    SCSEL1 = ADCHS.3 
.................... #bit    SBSEL0 = ADCHS.4 
.................... #bit    SBSEL1 = ADCHS.5 
.................... #bit    SDSEL0 = ADCHS.6 
.................... #bit    SDSEL1 = ADCHS.7 
.................... #byte TRISE = 0xF96 
.................... #byte TRISD = 0xF95 
.................... #byte TRISC = 0xF94 
.................... #byte TRISB = 0xF93 
.................... #byte TRISA = 0xF92 
.................... #word PR5 = 0xF91 
.................... #byte LATE = 0xF8D 
.................... #byte LATD = 0xF8C 
.................... #byte LATC = 0xF8B 
.................... #byte LATB = 0xF8A 
.................... #byte LATA = 0xF89 
.................... #word TMR5 = 0xF88 
.................... #byte PORTE = 0xF84 
.................... #byte PORTD = 0xF83 
.................... #byte PORTC = 0xF82 
.................... #byte PORTB = 0xF81 
.................... #byte PORTA = 0xF80 
.................... #byte PTCON0 = 0xF7F 
.................... #bit    PTMOD0 = PTCON0.0 
.................... #bit    PTMOD1 = PTCON0.1 
.................... #bit    PTCKPS0 = PTCON0.2 
.................... #bit    PTCKPS1 = PTCON0.3 
.................... #bit    PTOPS0 = PTCON0.4 
.................... #bit    PTOPS1 = PTCON0.5 
.................... #bit    PTOPS2 = PTCON0.6 
.................... #bit    PTOPS3 = PTCON0.7 
.................... #byte PTCON1 = 0xF7E 
.................... #bit    PTDIR = PTCON1.6 
.................... #bit    PTEN = PTCON1.7 
.................... #byte PTMRL = 0xF7D 
.................... #byte PTMRH = 0xF7C 
.................... #byte PTPERL = 0xF7B 
.................... #byte PTPERH = 0xF7A 
.................... #byte PDC0L = 0xF79 
.................... #byte PDC0H = 0xF78 
.................... #byte PDC1L = 0xF77 
.................... #byte PDC1H = 0xF76 
.................... #byte PDC2L = 0xF75 
.................... #byte PDC2H = 0xF74 
.................... #byte PDC3L = 0xF73 
.................... #byte PDC3H = 0xF72 
.................... #byte SEVTCMPL = 0xF71 
.................... #byte SEVTCMPH = 0xF70 
.................... #byte PWMCON0 = 0xF6F 
.................... #bit    PMOD0 = PWMCON0.0 
.................... #bit    PMOD1 = PWMCON0.1 
.................... #bit    PMOD2 = PWMCON0.2 
.................... #bit    PMOD3 = PWMCON0.3 
.................... #bit    PWMEN0 = PWMCON0.4 
.................... #bit    PWMEN1 = PWMCON0.5 
.................... #bit    PWMEN2 = PWMCON0.6 
.................... #byte PWMCON1 = 0xF6E 
.................... #bit    OSYNC = PWMCON1.0 
.................... #bit    UDIS = PWMCON1.1 
.................... #bit    SEVTDIR = PWMCON1.3 
.................... #bit    SEVOPS0 = PWMCON1.4 
.................... #bit    SEVOPS1 = PWMCON1.5 
.................... #bit    SEVOPS2 = PWMCON1.6 
.................... #bit    SEVOPS3 = PWMCON1.7 
.................... #byte DTCON = 0xF6D 
.................... #bit    DT0 = DTCON.0 
.................... #bit    DT1 = DTCON.1 
.................... #bit    DT2 = DTCON.2 
.................... #bit    DT3 = DTCON.3 
.................... #bit    DT4 = DTCON.4 
.................... #bit    DT5 = DTCON.5 
.................... #bit    DTPS0 = DTCON.6 
.................... #bit    DTPS1 = DTCON.7 
.................... #byte DTCON = 0xF6D 
.................... #bit    DTA0 = DTCON.0 
.................... #bit    DTA1 = DTCON.1 
.................... #bit    DTA2 = DTCON.2 
.................... #bit    DTA3 = DTCON.3 
.................... #bit    DTA4 = DTCON.4 
.................... #bit    DTA5 = DTCON.5 
.................... #bit    DTAPS0 = DTCON.6 
.................... #bit    DTAPS1 = DTCON.7 
.................... #byte FLTCONFIG = 0xF6C 
.................... #bit    FLTAEN = FLTCONFIG.0 
.................... #bit    FLTAMOD = FLTCONFIG.1 
.................... #bit    FLTAS = FLTCONFIG.2 
.................... #bit    FLTCON = FLTCONFIG.3 
.................... #bit    FLTBEN = FLTCONFIG.4 
.................... #bit    FLTBMOD = FLTCONFIG.5 
.................... #bit    FLTBS = FLTCONFIG.6 
.................... #bit    BRFEN = FLTCONFIG.7 
.................... #byte OVDCOND = 0xF6B 
.................... #byte OVDCONS = 0xF6A 
.................... #word CAP1BUF = 0xF69 
.................... #word CAP2BUF = 0xF67 
.................... #word CAP3BUF = 0xF65 
.................... #byte CAP1CON = 0xF63 
.................... #bit    CAP1M0 = CAP1CON.0 
.................... #bit    CAP1M1 = CAP1CON.1 
.................... #bit    CAP1M2 = CAP1CON.2 
.................... #bit    CAP1M3 = CAP1CON.3 
.................... #bit    CAP1TMR = CAP1CON.5 
.................... #bit    CAP1REN = CAP1CON.6 
.................... #byte CAP2CON = 0xF62 
.................... #bit    CAP2M0 = CAP2CON.0 
.................... #bit    CAP2M1 = CAP2CON.1 
.................... #bit    CAP2M2 = CAP2CON.2 
.................... #bit    CAP2M3 = CAP2CON.3 
.................... #bit    CAP2TMR = CAP2CON.5 
.................... #bit    CAP2REN = CAP2CON.6 
.................... #byte CAP3CON = 0xF61 
.................... #bit    CAP3M0 = CAP3CON.0 
.................... #bit    CAP3M1 = CAP3CON.1 
.................... #bit    CAP3M2 = CAP3CON.2 
.................... #bit    CAP3M3 = CAP3CON.3 
.................... #bit    CAP3TMR = CAP3CON.5 
.................... #bit    CAP3REN = CAP3CON.6 
.................... #byte DFLTCON = 0xF60 
.................... #bit    FLTCK0 = DFLTCON.0 
.................... #bit    FLTCK1 = DFLTCON.1 
.................... #bit    FLTCK2 = DFLTCON.2 
.................... #bit    FLT1EN = DFLTCON.3 
.................... #bit    FLT2EN = DFLTCON.4 
.................... #bit    FLT3EN = DFLTCON.5 
.................... #bit    FLT4EN = DFLTCON.6 
....................  
.................... #include <stdlib.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDLIB 
.................... #define _STDLIB 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Definitions and types 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #ifndef RAND_MAX 
.................... #define RAND_MAX  32767    // The value of which is the maximum value 
....................                            // ... returned by the rand function 
.................... #endif 
....................  
....................  
.................... #IF (sizeof(int16*)>1) 
.................... #DEFINE LONG_POINTERS 1 
.................... #ELSE  
.................... #DEFINE LONG_POINTERS 0 
.................... #ENDIF 
....................  
.................... typedef struct { 
....................    signed int quot; 
....................    signed int rem; 
.................... } div_t; 
....................  
.................... typedef struct { 
....................    signed long quot; 
....................    signed long rem; 
.................... } ldiv_t; 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // String conversion functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Standard template: signed int  atoi(char * s) 
....................  * converts the initial portion of the string s to a signed int 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed int atoi(char *s); 
....................  
.................... /* Syntax: signed int32  atoi32(char * s) 
....................    converts the initial portion of the string s to a signed int32 
....................    returns the converted value if any, 0 otherwise*/ 
.................... #if (sizeof(long)==4) 
....................  #define atoi32(s) atol(s) 
.................... #else  
....................  signed int32 atoi32(char *s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
.................... /* Syntax: signed int48  atoi48(char * s) 
....................    converts the initial portion of the string s to a signed int48 
....................    returns the converted value if any, 0 otherwise*/ 
....................     
.................... signed int48 atoi48(char *s); 
....................  
.................... /* Syntax: signed int64  atoi64(char * s) 
....................    converts the initial portion of the string s to a signed int64 
....................    returns the converted value if any, 0 otherwise*/ 
.................... signed int64 atoi64(char *s); 
.................... #endif 
....................  
.................... /* Syntax: char *  itoa(signed int32 num, int8 base, char * s) 
....................    converts the signed int32 to a string and 
....................    returns the converted value if any, 0 otherwise*/ 
.................... char * itoa(signed int32 num, unsigned int base, char * s); 
....................  
.................... /* Standard template: signed int16  atol(char * s) 
....................  * converts the initial portion of the string s to a signed int16 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed long atol(char *s); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base  to a signed long. 
....................  * Returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... signed long strtol(char *s,char *endptr, signed int base); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base to a unsigned long. 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... unsigned long strtoul(char *s,char *endptr, signed int base); 
....................  
.................... /* Standart template: float strtof(char * s,char *endptr) 
....................                       float48 strtof48(char *s,char *endptr); 
....................                       float64 strtod(char *s,char *endptr); 
....................  * converts the initial portion of the string s to a float32, float48 or float64, 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null                    
.................... */ 
.................... float strtof(char *s,char *endptr); 
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s,char *endptr); 
.................... float64 strtod(char *s,char *endptr); 
.................... #else 
.................... //provided for compatibility 
.................... #define strtof48(s, e) strtof(s, e) 
.................... #define strtod(s, e) strtof(s, e) 
.................... #endif 
....................  
.................... /* Standard template: float32 atof(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof(s)   strtof(s, 0) 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
....................  
.................... /* Standard template: float48 atof48(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof48(s) strtof48(s, 0) 
....................  
.................... /* Standard template: float64 atof64(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof64(s) strtod(s, 0) 
.................... #endif 
....................  
.................... /* Standard template: float32 atoe(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  * also handles E format numbers 
....................  */ 
.................... #if !defined(__PCD__) 
.................... float atoe(char * s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s); 
.................... #endif 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Pseudo-random sequence generation functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The rand function computes a sequence of pseudo-random integers in 
....................  * the range 0 to RAND_MAX 
....................  * 
....................  * Parameters: 
....................  *       (none) 
....................  * 
....................  * Returns: 
....................  *       The pseudo-random integer 
....................  */ 
.................... unsigned int16 rand(void); 
....................  
.................... /* The srand function uses the argument as a seed for a new sequence of 
....................  * pseudo-random numbers to be returned by subsequent calls to rand. 
....................  * 
....................  * Parameters: 
....................  *       [in] seed: The seed value to start from. You might need to pass 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  * 
....................  * Remarks 
....................  *          The srand function sets the starting point for generating 
....................  *       a series of pseudorandom integers. To reinitialize the 
....................  *       generator, use 1 as the seed argument. Any other value for 
....................  *       seed sets the generator to a random starting point. rand 
....................  *       retrieves the pseudorandom numbers that are generated. 
....................  *       Calling rand before any call to srand generates the same 
....................  *       sequence as calling srand with seed passed as 1. 
....................  *          Usually, you need to pass a time here from outer source 
....................  *       so that the numbers will be different every time you run. 
....................  */ 
.................... void srand(unsigned int32 seed); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Memory management functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Comming soon 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Communication with the environment 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The function returns 0 always 
....................  */ 
.................... signed int8 system(char *string); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Performs a binary search of a sorted array.. 
....................  * 
....................  * Parameters: 
....................  *       [in] key: Object to search for 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       bsearch returns a pointer to an occurrence of key in the array pointed 
....................  *       to by base. If key is not found, the function returns NULL. If the 
....................  *       array is not in order or contains duplicate records with identical keys, 
....................  *       the result is unpredictable. 
....................  */ 
.................... //void *bsearch(const void *key, const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... /* Performs the shell-metzner sort (not the quick sort algorithm). The contents 
....................  * of the array are sorted into ascending order according to a comparison 
....................  * function pointed to by compar. 
....................  * 
....................  * Parameters: 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  */ 
.................... //void *qsort(const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Integer arithmetic functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #define labs abs 
....................  
.................... div_t div(signed int numer, signed int denom); 
.................... ldiv_t ldiv(signed long numer, signed long denom); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte character functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte string functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Internal implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... unsigned char *memmove(void *s1,void *s2,size_t n) 
.................... { 
....................    unsigned char *sc1; 
....................    unsigned char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... unsigned char *strncpy(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................   unsigned char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... unsigned char *strcat(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... unsigned char *strncat(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................    unsigned char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,void *s2,size_t n) 
.................... { 
.................... unsigned char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................   unsigned char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... unsigned char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    unsigned char uc; 
....................    unsigned char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... unsigned char *strchr(unsigned char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... unsigned char *strpbrk(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... unsigned char *strrchr(unsigned char *s, unsigned int8 c) 
.................... { 
....................    unsigned char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... unsigned char *strstr(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... unsigned char *strtok(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... unsigned char * strerror(unsigned int8 errnum) 
.................... { 
.................... static unsigned char s[13]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(unsigned char *s) 
.................... { 
....................    unsigned char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(unsigned char *s1, unsigned char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... unsigned char *strlwr(unsigned char *s) 
.................... { 
....................    unsigned char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
.................... /* standard template: char *strupr(char *s). 
....................    Replaces lowercase letters by upercase; 
....................    returns pointer to new string s */ 
....................  
.................... unsigned char *strupr(unsigned char *s) 
.................... { 
....................    unsigned char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'a' && *p <='z') 
....................          *p -= 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... div_t div(signed int numer, signed int denom) 
.................... { 
....................    div_t val; 
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... ldiv_t ldiv(signed long numer, signed long denom) 
.................... { 
....................    ldiv_t val; 
....................  
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s) 
.................... { 
....................    float32 pow10 = 1.0; 
....................    float32 result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float32 exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if !defined(__PCD__) 
.................... float atoe(char * s) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... signed int atoi(char *s) 
.................... { 
....................    signed int result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    // Omit all preceeding alpha characters 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................  
....................       // Check for hexa number 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c<='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++]; 
....................             c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (sign == 1 && base == 10) 
....................        result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed long atol(char *s) 
.................... { 
....................    signed long result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... /* A fast routine to multiply by 10 
....................  */ 
.................... signed int32 mult_with10(int32 num) 
.................... { 
....................    return ( (num << 1) + (num << 3) ); 
.................... } 
....................  
.................... #if sizeof(long)==2 
.................... signed int32 atoi32(char *s) 
.................... { 
....................    signed int32 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
....................  
.................... signed int48 atoi48(char *s) 
.................... { 
....................    signed int48 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed int64 atoi64(char *s) 
.................... { 
....................    signed int64 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... char * itoa(signed int32 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int32 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... #if defined(__PCD__) 
....................  
.................... char * itoa(signed int48 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int48 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... char * itoa(signed int64 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int64 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................       
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1;         
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................              
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... #endif 
....................  
.................... float strtof(char *s, char *endptr) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s, char *endptr) 
.................... { 
....................    float48 pow10 = 1.0; 
....................    float48 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float48)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float48)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... float64 strtod(char *s, char *endptr) 
.................... { 
....................    float64 pow10 = 1.0; 
....................    float64 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float64)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float64)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... unsigned long strtoul(char *s, char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    unsigned long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if(sign=='-' || base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtoulGO; 
....................  
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(; sd!=0; ) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtoulGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................          } 
....................    return 0; 
....................    } 
....................    if (endptr) 
....................    { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= sc;  
....................          #ELSE 
....................          *((char *)endptr)=sc;  
....................          #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
....................  
.................... signed long strtol(char *s,char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    signed long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if (base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtolGO; 
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................  
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(;sd!=0;) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtolGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................       } 
....................    return 0; 
....................    } 
....................    if(sign=='-') 
....................       x  =-x; 
....................    if (endptr) 
....................    { 
....................         #IF LONG_POINTERS 
....................          *((int16 *)endptr)= sc;  
....................         #ELSE 
....................         *((char *)endptr)=sc; 
....................         #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
.................... signed int8 system(char *string) 
.................... { 
....................    return 0; 
.................... } 
....................  
.................... int8 mblen(char *s,size_t n) 
.................... { 
....................    return strlen(s); 
.................... } 
....................  
.................... int8 mbtowc(wchar_t *pwc,char *s,size_t n) 
.................... { 
....................    *pwc=*s; 
....................    return 1; 
.................... } 
....................  
.................... int8 wctomb(char *s,wchar_t wchar) 
.................... { 
....................    *s=wchar; 
....................    return 1; 
.................... } 
....................  
.................... size_t mbstowcs(wchar_t *pwcs,char *s,size_t n) 
.................... { 
....................    strncpy(pwcs,s,n); 
....................    return strlen(pwcs); 
.................... } 
....................  
.................... size_t wcstombs(char *s,wchar_t *pwcs,size_t n) 
.................... { 
....................    strncpy(s,pwcs,n); 
....................    return strlen(s); 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // The random number implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... unsigned int32 _Randseed; 
....................  
.................... unsigned int16 rand(void) 
.................... { 
....................    _Randseed = _Randseed * 1103515245 + 12345; 
....................    return ((unsigned int16)(_Randseed >> 16) % RAND_MAX); 
.................... } 
....................  
.................... void srand(unsigned int32 seed) 
.................... { 
....................    _Randseed = seed; 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #if !defined(__PCD__) 
.................... typedef signed int8 (*_Cmpfun)(char * p1,char * p2);  
.................... #else  
.................... typedef signed int16 (*_Cmpfun)(char * p1,char * p2);  
.................... #endif 
....................  
....................  
....................  
.................... void qsort(char * qdata, unsigned int qitems, unsigned int qsize, _Cmpfun cmp) { 
....................    unsigned int m,j,i,l; 
....................    int1 done; 
....................    unsigned int8 t[16]; 
....................  
....................    m = qitems/2; 
....................    while( m > 0 ) { 
....................      for(j=0; j<(qitems-m); ++j) { 
....................         i = j; 
....................         do 
....................         { 
....................            done=1; 
....................            l = i+m; 
....................            if( (*cmp)(qdata+i*qsize, qdata+l*qsize) > 0 ) { 
....................               memcpy(t, qdata+i*qsize, qsize); 
....................               memcpy(qdata+i*qsize, qdata+l*qsize, qsize); 
....................               memcpy(qdata+l*qsize, t, qsize); 
....................               if(m <= i) 
....................                 i -= m; 
....................                 done = 0; 
....................            } 
....................         } while(!done); 
....................      } 
....................      m = m/2; 
....................    } 
.................... } 
....................  
....................  
.................... char *bsearch(char *key, char *base, size_t num, size_t width,_Cmpfun cmp) 
.................... { 
....................    char *p, *q; 
....................    size_t n; 
....................    size_t pivot; 
....................    signed int val; 
....................  
....................    p = base; 
....................    n = num; 
....................  
....................    while (n > 0) 
....................    { 
....................       pivot = n >> 1; 
....................       q = p + width * pivot; 
....................  
....................       val = (*cmp)(key, q); 
....................  
....................       if (val < 0) 
....................          n = pivot; 
....................       else if (val == 0) 
....................          return ((char *)q); 
....................       else { 
....................          p = q + width; 
....................          n -= pivot + 1; 
....................       } 
....................    } 
....................  
....................    return NULL;      // There's no match 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #include <stdio.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDIO 
.................... #define _STDIO 
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... unsigned char *memmove(void *s1,void *s2,size_t n) 
.................... { 
....................    unsigned char *sc1; 
....................    unsigned char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... unsigned char *strncpy(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................   unsigned char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... unsigned char *strcat(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... unsigned char *strncat(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................    unsigned char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,void *s2,size_t n) 
.................... { 
.................... unsigned char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................   unsigned char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... unsigned char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    unsigned char uc; 
....................    unsigned char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... unsigned char *strchr(unsigned char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... unsigned char *strpbrk(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... unsigned char *strrchr(unsigned char *s, unsigned int8 c) 
.................... { 
....................    unsigned char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... unsigned char *strstr(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... unsigned char *strtok(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... unsigned char * strerror(unsigned int8 errnum) 
.................... { 
.................... static unsigned char s[13]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(unsigned char *s) 
.................... { 
....................    unsigned char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(unsigned char *s1, unsigned char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... unsigned char *strlwr(unsigned char *s) 
.................... { 
....................    unsigned char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
.................... /* standard template: char *strupr(char *s). 
....................    Replaces lowercase letters by upercase; 
....................    returns pointer to new string s */ 
....................  
.................... unsigned char *strupr(unsigned char *s) 
.................... { 
....................    unsigned char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'a' && *p <='z') 
....................          *p -= 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #ifndef getc 
.................... #define getc getch 
.................... #define getchar getch 
.................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
.................... #define putc putchar 
.................... #endif 
.................... /* maps error number to an error message. Writes a sequence of characters to 
.................... stderr stream thus: if s is not null then string pointed to by s follwed by 
.................... a colon (:) and a space and the appropriate error message returned by strerror 
.................... function with argument errno 
....................  
.................... Returns: no value 
.................... */ 
....................  
.................... #ifdef _ERRNO 
.................... void perror(char *s) 
.................... { 
....................   if(s) 
....................   fprintf(STDERR,"%s: ",s); 
....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
.................... } 
.................... #endif 
.................... #endif 
....................  
....................  
.................... //#device ADC=16 
.................... #FUSES HS    
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... //#FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
0ADA:  CLRF   FEA
0ADC:  MOVLW  6F
0ADE:  MOVWF  FE9
0AE0:  MOVF   FEF,W
0AE2:  BZ    0AFE
0AE4:  MOVLW  06
0AE6:  MOVWF  01
0AE8:  CLRF   00
0AEA:  DECFSZ 00,F
0AEC:  BRA    0AEA
0AEE:  DECFSZ 01,F
0AF0:  BRA    0AE8
0AF2:  MOVLW  7B
0AF4:  MOVWF  00
0AF6:  DECFSZ 00,F
0AF8:  BRA    0AF6
0AFA:  DECFSZ FEF,F
0AFC:  BRA    0AE4
0AFE:  RETURN 0
.................... #use fast_io(a) 
.................... #use fast_io(d) 
.................... #use fast_io(c) 
.................... #use fast_io(e) 
....................  
.................... #include <khoidong.c> 
.................... ///// KHOI DONG PIC 
.................... /* 
.................... #include <18F4431.h> 
.................... #include <PIC18F4431_registers.h> 
.................... //#device ADC=16 
.................... #include <stdlib.h> 
.................... #include <stdio.h> 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... //#FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... //#FUSES H4 
.................... #use delay(clock=40000000,crystal=10000000) 
.................... //#use spi(MASTER ,FORCE_HW, BITS=16) 
.................... //#bit ss1 = PORTD.0 
.................... #use fast_io(a) 
.................... #use fast_io(d) 
.................... #use fast_io(c) 
.................... #use fast_io(e) 
.................... */ 
.................... void khoidong() 
.................... { 
....................    trisa=0b00011000; /// DAU VAO QEI CUNG 
*
0B7E:  MOVLW  18
0B80:  MOVWF  F92
....................    porta=0b11100111; 
0B82:  MOVLW  E7
0B84:  MOVWF  F80
....................    trisb=0b11111111; /// DAU VAO CONG TAC HANH TRINH 
0B86:  SETF   F93
....................    port_b_pullups(0xff); 
0B88:  BCF    FF1.7
....................    portb=0xff; 
0B8A:  SETF   F81
....................    trisc=0b00110000; /// DAU VAO QEI MEM 
0B8C:  MOVLW  30
0B8E:  MOVWF  F94
....................    portc=0b00000000; 
0B90:  CLRF   F82
....................    trisd=0b00000000; /// DAU VAO SPI 0b00000100 
0B92:  CLRF   F95
....................    portd=0b11110000; 
0B94:  MOVLW  F0
0B96:  MOVWF  F83
....................    trise=0b00000000; 
0B98:  CLRF   F96
....................    porte=0b11111111; 
0B9A:  SETF   F84
....................     
....................    enable_interrupts(INT_EXT1); 
0B9C:  BSF    FF0.3
....................    enable_interrupts(INT_EXT2); 
0B9E:  BSF    FF0.4
....................     
....................    //enable_interrupts(int_timer0); 
....................    //enable_interrupts(int_timer1); 
....................    //enable_interrupts(int_timer5); 
....................     
....................    enable_interrupts(GLOBAL); 
0BA0:  MOVLW  C0
0BA2:  IORWF  FF2,F
....................    ext_int_edge(1,L_to_H); 
0BA4:  BSF    FF1.5
....................    ext_int_edge(2,L_to_H); 
0BA6:  BSF    FF1.4
....................     
....................    clear_interrupt(INT_EXT1); 
0BA8:  BCF    FF0.0
....................    clear_interrupt(INT_EXT2); 
0BAA:  BCF    FF0.1
....................    clear_interrupt(int_timer0); 
0BAC:  BCF    FF2.2
....................    clear_interrupt(int_timer1); 
0BAE:  BCF    F9E.0
....................    clear_interrupt(int_timer5); 
0BB0:  BCF    FA4.0
....................     
....................    setup_qei(QEI_MODE_X4_RESET_WITH_INDX,qei_filter_enable_qea|qei_filter_enable_qeb|qei_filter_div_2,65535); 
0BB2:  MOVLW  14
0BB4:  MOVWF  FB6
0BB6:  MOVLW  31
0BB8:  MOVWF  F60
0BBA:  SETF   F65
0BBC:  SETF   F64
0BBE:  CLRF   F67
0BC0:  CLRF   F66
....................    qei_set_count(0); 
0BC2:  CLRF   F67
0BC4:  CLRF   F66
....................     
....................    //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1);      //6.5 ms overflow, 0.1us 
....................    //set_timer0(64535); 
....................     
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_2|RTCC_8_bit);      //102 us overflow, 0.4us 
0BC6:  MOVLW  C0
0BC8:  MOVWF  FD5
....................    set_timer0(5); 
0BCA:  CLRF   FD7
0BCC:  MOVLW  05
0BCE:  MOVWF  FD6
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_4);      //52.4 ms overflow, 0.8us 
0BD0:  MOVLW  A5
0BD2:  MOVWF  FCD
....................    set_timer1(50286); 
0BD4:  MOVLW  C4
0BD6:  MOVWF  FCF
0BD8:  MOVLW  6E
0BDA:  MOVWF  FCE
....................    setup_timer_5(T5_INTERNAL|T5_DIV_BY_4);      //52.4 ms overflow, 0.8us 
0BDC:  MOVLW  11
0BDE:  MOVWF  FB7
....................    set_timer5(53035); 
0BE0:  MOVLW  CF
0BE2:  MOVWF  F88
0BE4:  MOVLW  2B
0BE6:  MOVWF  F87
0BE8:  GOTO   1826 (RETURN)
....................     
....................    //setup_spi(SPI_MASTER|SPI_L_TO_H|SPI_CLK_DIV_16); 
....................    //ss1=1; 
....................  
....................       
.................... } 
....................  
....................  
....................  
.................... #include <van-ctht.c> 
....................  
.................... ///// DEFINE VAN 
....................  
.................... #bit vantay1=porta.5 
.................... #bit vantay2=porte.0 
.................... #bit vancanh2=porta.0     
.................... #bit vancanh1=porta.1     
.................... #bit vanduoi=porta.2 
....................  
.................... ///// DEFINE CONG TAC HANH TRINH 
.................... #bit ctt2=portb.0 
.................... #bit ctc2=portb.1 
.................... #bit ctt1=portb.2 
.................... #bit ctc1=portb.3 
....................  
.................... #bit ctld=portb.4 
.................... #bit ctlt=portb.5 
....................  
.................... #bit ctsel=portb.7 
.................... #bit cten=portb.6 
....................  
.................... ///// CHUONG TRINH LOA TIN HIEU 
.................... #bit trisloa = trisd.7 
.................... #bit loa = portd.7 
.................... void beep(int8 solan,int8 time) 
.................... { 
.................... int8 i; 
.................... for (i=0; i<solan; i++) 
*
0B00:  CLRF   x6D
0B02:  MOVF   x6B,W
0B04:  SUBWF  x6D,W
0B06:  BC    0B22
....................    { 
....................    trisloa = 0; 
0B08:  BCF    F95.7
....................    loa = 0; 
0B0A:  BCF    F83.7
....................    delay_ms(20); 
0B0C:  MOVLW  14
0B0E:  MOVWF  x6F
0B10:  RCALL  0ADA
....................    loa = 1; 
0B12:  BSF    F83.7
....................    delay_ms(time-20); 
0B14:  MOVLW  14
0B16:  SUBWF  x6C,W
0B18:  MOVWF  x6E
0B1A:  MOVWF  x6F
0B1C:  RCALL  0ADA
0B1E:  INCF   x6D,F
0B20:  BRA    0B02
....................    } 
0B22:  RETURN 0
.................... } 
....................  
....................  
....................  
....................  
.................... #include <dongco.c> 
....................  
.................... ///// DEFINE CAC DONG CO 
....................  
.................... #bit br1=porte.2 
.................... #bit br2=porte.1 
.................... #bit trisbr1 = trise.2 
.................... #bit trisbr2 = trise.1 
.................... #bit dir1=portc.3 
.................... #bit dir2=portc.0 
.................... #bit trisdir1 = trisc.3 
.................... #bit trisdir2 = trisc.0 
.................... #bit pwm1=portc.2 
.................... #bit pwm2=portc.1 
.................... #bit trispwm1 = trisc.2 
.................... #bit trispwm2 = trisc.1 
....................  
.................... void dc1t(INT16 x) 
.................... { 
....................    trispwm1 = trisdir1 = trisbr1 = 0; 
*
0BEC:  BCF    F96.2
0BEE:  BCF    F94.3
0BF0:  BCF    F94.2
....................    dir1 = 1; 
0BF2:  BSF    F82.3
....................    br1 = 0; 
0BF4:  BCF    F84.2
....................    setup_timer_2(T2_DIV_BY_4,250,1);      //401 us overflow, 401 us interrupt 
0BF6:  MOVLW  00
0BF8:  IORLW  05
0BFA:  MOVWF  FCA
0BFC:  MOVLW  FA
0BFE:  MOVWF  FCB
....................    setup_ccp1 (ccp_pwm); 
0C00:  BCF    F8B.2
0C02:  MOVLW  0C
0C04:  MOVWF  FBD
....................    set_pwm1_duty (x); 
0C06:  MOVFF  66,02
0C0A:  MOVFF  65,01
0C0E:  RRCF   02,F
0C10:  RRCF   01,F
0C12:  RRCF   02,F
0C14:  RRCF   01,F
0C16:  RRCF   02,F
0C18:  MOVFF  01,FBE
0C1C:  RRCF   02,F
0C1E:  RRCF   02,W
0C20:  ANDLW  30
0C22:  MOVWF  00
0C24:  MOVF   FBD,W
0C26:  ANDLW  CF
0C28:  IORWF  00,W
0C2A:  MOVWF  FBD
0C2C:  RETURN 0
.................... } 
....................  
.................... void dc1n(INT16 x) 
.................... { 
....................    trispwm1 = trisdir1 = trisbr1 = 0; 
*
0DE6:  BCF    F96.2
0DE8:  BCF    F94.3
0DEA:  BCF    F94.2
....................    dir1 = 0; 
0DEC:  BCF    F82.3
....................    br1 = 0; 
0DEE:  BCF    F84.2
....................    setup_timer_2(T2_DIV_BY_4,250,1);      //401 us overflow, 401 us interrupt 
0DF0:  MOVLW  00
0DF2:  IORLW  05
0DF4:  MOVWF  FCA
0DF6:  MOVLW  FA
0DF8:  MOVWF  FCB
....................    setup_ccp1 (ccp_pwm); 
0DFA:  BCF    F8B.2
0DFC:  MOVLW  0C
0DFE:  MOVWF  FBD
....................    set_pwm1_duty (x); 
0E00:  MOVFF  66,02
0E04:  MOVFF  65,01
0E08:  RRCF   02,F
0E0A:  RRCF   01,F
0E0C:  RRCF   02,F
0E0E:  RRCF   01,F
0E10:  RRCF   02,F
0E12:  MOVFF  01,FBE
0E16:  RRCF   02,F
0E18:  RRCF   02,W
0E1A:  ANDLW  30
0E1C:  MOVWF  00
0E1E:  MOVF   FBD,W
0E20:  ANDLW  CF
0E22:  IORWF  00,W
0E24:  MOVWF  FBD
0E26:  RETURN 0
.................... } 
....................  
.................... void resetdc1() 
.................... { 
....................    trispwm1 = trisdir1 = trisbr1 = 0; 
*
01A8:  BCF    F96.2
01AA:  BCF    F94.3
01AC:  BCF    F94.2
....................    setup_timer_2(T2_DIV_BY_4,250,1);      //401 us overflow, 401 us interrupt 
01AE:  MOVLW  00
01B0:  IORLW  05
01B2:  MOVWF  FCA
01B4:  MOVLW  FA
01B6:  MOVWF  FCB
....................    setup_ccp1 (ccp_pwm); 
01B8:  BCF    F8B.2
01BA:  MOVLW  0C
01BC:  MOVWF  FBD
....................    set_pwm1_duty (0); 
01BE:  CLRF   FBE
....................    br1 = 1; 
01C0:  BSF    F84.2
....................    dir1 = 0; 
01C2:  BCF    F82.3
01C4:  RETURN 0
.................... } 
....................  
.................... void dc2n(INT16 x) 
.................... { 
....................    trispwm2 = trisdir2 = trisbr2 = 0; 
*
0E28:  BCF    F96.1
0E2A:  BCF    F94.0
0E2C:  BCF    F94.1
....................    dir2 = 1; 
0E2E:  BSF    F82.0
....................    br2 = 0; 
0E30:  BCF    F84.1
....................    setup_timer_2(T2_DIV_BY_4,250,1);      //401 us overflow, 401 us interrupt 
0E32:  MOVLW  00
0E34:  IORLW  05
0E36:  MOVWF  FCA
0E38:  MOVLW  FA
0E3A:  MOVWF  FCB
....................    setup_ccp2 (ccp_pwm); 
0E3C:  BCF    F8B.1
0E3E:  MOVLW  0C
0E40:  MOVWF  FBA
....................    set_pwm2_duty (x); 
0E42:  MOVFF  66,02
0E46:  MOVFF  65,01
0E4A:  RRCF   02,F
0E4C:  RRCF   01,F
0E4E:  RRCF   02,F
0E50:  RRCF   01,F
0E52:  RRCF   02,F
0E54:  MOVFF  01,FBB
0E58:  RRCF   02,F
0E5A:  RRCF   02,W
0E5C:  ANDLW  30
0E5E:  MOVWF  00
0E60:  MOVF   FBA,W
0E62:  ANDLW  CF
0E64:  IORWF  00,W
0E66:  MOVWF  FBA
0E68:  RETURN 0
.................... } 
....................  
.................... void dc2t(INT16 x) 
.................... { 
....................    trispwm2 = trisdir2 = trisbr2 = 0; 
*
0C2E:  BCF    F96.1
0C30:  BCF    F94.0
0C32:  BCF    F94.1
....................    br2 = 0; 
0C34:  BCF    F84.1
....................    dir2 = 0; 
0C36:  BCF    F82.0
....................    setup_timer_2(T2_DIV_BY_4,250,1);      //401 us overflow, 401 us interrupt 
0C38:  MOVLW  00
0C3A:  IORLW  05
0C3C:  MOVWF  FCA
0C3E:  MOVLW  FA
0C40:  MOVWF  FCB
....................    setup_ccp2 (ccp_pwm); 
0C42:  BCF    F8B.1
0C44:  MOVLW  0C
0C46:  MOVWF  FBA
....................    set_pwm2_duty (x); 
0C48:  MOVFF  66,02
0C4C:  MOVFF  65,01
0C50:  RRCF   02,F
0C52:  RRCF   01,F
0C54:  RRCF   02,F
0C56:  RRCF   01,F
0C58:  RRCF   02,F
0C5A:  MOVFF  01,FBB
0C5E:  RRCF   02,F
0C60:  RRCF   02,W
0C62:  ANDLW  30
0C64:  MOVWF  00
0C66:  MOVF   FBA,W
0C68:  ANDLW  CF
0C6A:  IORWF  00,W
0C6C:  MOVWF  FBA
0C6E:  RETURN 0
.................... } 
....................  
.................... void resetdc2() 
.................... { 
....................    trispwm2 = trisdir2 = trisbr2 = 0; 
*
01C6:  BCF    F96.1
01C8:  BCF    F94.0
01CA:  BCF    F94.1
....................    br2 = 1; 
01CC:  BSF    F84.1
....................    dir2 = 0; 
01CE:  BCF    F82.0
....................    setup_timer_2(T2_DIV_BY_4,250,1);      //401 us overflow, 401 us interrupt 
01D0:  MOVLW  00
01D2:  IORLW  05
01D4:  MOVWF  FCA
01D6:  MOVLW  FA
01D8:  MOVWF  FCB
....................    setup_ccp2 (ccp_pwm); 
01DA:  BCF    F8B.1
01DC:  MOVLW  0C
01DE:  MOVWF  FBA
....................    set_pwm2_duty (0); 
01E0:  CLRF   FBB
01E2:  RETURN 0
.................... } 
....................  
....................  
.................... #bit pwm3 = portd.6 
.................... #bit dir3 = portd.5 
.................... #bit trispwm3 = trisd.6 
.................... #bit trisdir3 = trisd.5 
....................  
....................  
.................... #include <qei_piddc.c> 
....................  
.................... ///// QEI MEM + DU LIEU QEI 
.................... signed int16 En2; 
.................... #define ChanelA PIN_C4 
.................... #define ChanelB PIN_C5 
.................... #INT_EXT1 
.................... void  EXT1_L2H_isr(void)  
.................... { 
.................... INTEDG1^=1; 
*
00DE:  MOVLW  00
00E0:  BTFSC  FF1.5
00E2:  MOVLW  01
00E4:  XORLW  01
00E6:  BCF    FF1.5
00E8:  BTFSC  FE8.0
00EA:  BSF    FF1.5
.................... if (INTEDG1) 
00EC:  BTFSS  FF1.5
00EE:  BRA    0106
....................    { 
....................    if (input(ChanelB)) {En2--;}  
00F0:  BTFSS  F82.5
00F2:  BRA    00FE
00F4:  MOVF   20,W
00F6:  BTFSC  FD8.2
00F8:  DECF   21,F
00FA:  DECF   20,F
00FC:  BRA    0104
....................    else {En2++;} 
00FE:  INCF   20,F
0100:  BTFSC  FD8.2
0102:  INCF   21,F
....................    } 
0104:  BRA    011A
.................... else  
....................    {  
....................    if (input(ChanelB)) {En2++;} 
0106:  BTFSS  F82.5
0108:  BRA    0112
010A:  INCF   20,F
010C:  BTFSC  FD8.2
010E:  INCF   21,F
0110:  BRA    011A
....................    else {En2--;} 
0112:  MOVF   20,W
0114:  BTFSC  FD8.2
0116:  DECF   21,F
0118:  DECF   20,F
....................    } 
.................... } 
011A:  BCF    FF0.0
011C:  GOTO   0090
.................... #int_EXT2 
.................... void  EXT2_isr(void)  
.................... { 
.................... INTEDG2^=1; 
0120:  MOVLW  00
0122:  BTFSC  FF1.4
0124:  MOVLW  01
0126:  XORLW  01
0128:  BCF    FF1.4
012A:  BTFSC  FE8.0
012C:  BSF    FF1.4
.................... if (INTEDG2) 
012E:  BTFSS  FF1.4
0130:  BRA    0148
....................    { 
....................    if (input(ChanelA)) {En2++;}  
0132:  BTFSS  F82.4
0134:  BRA    013E
0136:  INCF   20,F
0138:  BTFSC  FD8.2
013A:  INCF   21,F
013C:  BRA    0146
....................    else {En2--;} 
013E:  MOVF   20,W
0140:  BTFSC  FD8.2
0142:  DECF   21,F
0144:  DECF   20,F
....................    } 
0146:  BRA    015C
.................... else  
....................    {  
....................    if (input(ChanelA)) {En2--;} 
0148:  BTFSS  F82.4
014A:  BRA    0156
014C:  MOVF   20,W
014E:  BTFSC  FD8.2
0150:  DECF   21,F
0152:  DECF   20,F
0154:  BRA    015C
....................    else {En2++;} 
0156:  INCF   20,F
0158:  BTFSC  FD8.2
015A:  INCF   21,F
....................    } 
015C:  BCF    FF0.1
015E:  GOTO   0090
.................... } 
....................  
.................... /// PID DONG CO 1 ////////////////// 
.................... volatile float kp=2, ki=0.2,kd=0.7, pid1, pid2; 
.................... signed int16 realvt1, errs1=0, err1=0, delta1=0, epre1=0, duty1 ; 
.................... signed int16 realvt2, errs2=0, err2=0, delta2=0, epre2=0, duty2 ; 
.................... volatile unsigned int16 Ti1,Ti2; 
.................... volatile signed int16 setvt1,setvt2,vt1=900,vt2=900; 
....................  
.................... void piddc1(signed int16 setvt1, signed int16 vt1) 
....................      { 
....................      br1=0; 
*
05C0:  BCF    F84.2
....................      realvt1 =  qei_get_count();  
05C2:  MOVFF  F67,01
05C6:  MOVFF  F66,00
05CA:  MOVFF  F67,03
05CE:  MOVF   03,W
05D0:  SUBWF  01,W
05D2:  BZ    05D8
05D4:  MOVFF  F66,00
05D8:  MOVF   00,W
05DA:  MOVWF  36
05DC:  MOVFF  03,37
....................      err1 = setvt1 - realvt1; 
05E0:  MOVF   36,W
05E2:  SUBWF  x6B,W
05E4:  MOVWF  3A
05E6:  MOVF   37,W
05E8:  SUBWFB x6C,W
05EA:  MOVWF  3B
....................      if(Ti1>=2) 
05EC:  MOVF   4F,F
05EE:  BNZ   05F6
05F0:  MOVF   4E,W
05F2:  SUBLW  01
05F4:  BC    0656
....................      { 
....................        delta1 = err1-epre1; 
05F6:  MOVF   3E,W
05F8:  SUBWF  3A,W
05FA:  MOVWF  3C
05FC:  MOVF   3F,W
05FE:  SUBWFB 3B,W
0600:  MOVWF  3D
....................        Ti1=0; 
0602:  CLRF   4F
0604:  CLRF   4E
....................        if(delta1>-10) errs1 += err1;//(err1>-20)&&(err1<20) 
0606:  BTFSS  3D.7
0608:  BRA    061A
060A:  MOVF   3D,W
060C:  SUBLW  FE
060E:  BC    0622
0610:  XORLW  FF
0612:  BNZ   061A
0614:  MOVF   3C,W
0616:  SUBLW  F6
0618:  BC    0622
061A:  MOVF   3A,W
061C:  ADDWF  38,F
061E:  MOVF   3B,W
0620:  ADDWFC 39,F
....................        if (errs1 > 200 ) errs1=200; 
0622:  BTFSC  39.7
0624:  BRA    0636
0626:  MOVF   39,F
0628:  BNZ   0630
062A:  MOVF   38,W
062C:  SUBLW  C8
062E:  BC    0636
0630:  CLRF   39
0632:  MOVLW  C8
0634:  MOVWF  38
....................        if (errs1 < -200 ) errs1=-200; 
0636:  BTFSS  39.7
0638:  BRA    064E
063A:  MOVF   39,W
063C:  SUBLW  FF
063E:  BNC   064E
0640:  BNZ   0648
0642:  MOVF   38,W
0644:  SUBLW  37
0646:  BNC   064E
0648:  SETF   39
064A:  MOVLW  38
064C:  MOVWF  38
....................        epre1=err1; 
064E:  MOVFF  3B,3F
0652:  MOVFF  3A,3E
....................      } 
....................    
....................      pid1 =kp*err1 + ki*errs1+kd*delta1;  
0656:  MOVFF  3B,74
065A:  MOVFF  3A,73
065E:  RCALL  01E4
0660:  MOVFF  25,76
0664:  MOVFF  24,75
0668:  MOVFF  23,74
066C:  MOVFF  22,73
0670:  MOVFF  03,7A
0674:  MOVFF  02,79
0678:  MOVFF  01,78
067C:  MOVFF  00,77
0680:  RCALL  022C
0682:  MOVFF  03,72
0686:  MOVFF  02,71
068A:  MOVFF  01,70
068E:  MOVFF  00,6F
0692:  MOVFF  39,74
0696:  MOVFF  38,73
069A:  RCALL  01E4
069C:  MOVFF  29,76
06A0:  MOVFF  28,75
06A4:  MOVFF  27,74
06A8:  MOVFF  26,73
06AC:  MOVFF  03,7A
06B0:  MOVFF  02,79
06B4:  MOVFF  01,78
06B8:  MOVFF  00,77
06BC:  RCALL  022C
06BE:  BCF    FD8.1
06C0:  MOVFF  72,76
06C4:  MOVFF  71,75
06C8:  MOVFF  70,74
06CC:  MOVFF  6F,73
06D0:  MOVFF  03,7A
06D4:  MOVFF  02,79
06D8:  MOVFF  01,78
06DC:  MOVFF  00,77
06E0:  RCALL  031E
06E2:  MOVFF  03,72
06E6:  MOVFF  02,71
06EA:  MOVFF  01,70
06EE:  MOVFF  00,6F
06F2:  MOVFF  3D,74
06F6:  MOVFF  3C,73
06FA:  RCALL  01E4
06FC:  MOVFF  2D,76
0700:  MOVFF  2C,75
0704:  MOVFF  2B,74
0708:  MOVFF  2A,73
070C:  MOVFF  03,7A
0710:  MOVFF  02,79
0714:  MOVFF  01,78
0718:  MOVFF  00,77
071C:  RCALL  022C
071E:  BCF    FD8.1
0720:  MOVFF  72,76
0724:  MOVFF  71,75
0728:  MOVFF  70,74
072C:  MOVFF  6F,73
0730:  MOVFF  03,7A
0734:  MOVFF  02,79
0738:  MOVFF  01,78
073C:  MOVFF  00,77
0740:  RCALL  031E
0742:  MOVFF  03,31
0746:  MOVFF  02,30
074A:  MOVFF  01,2F
074E:  MOVFF  00,2E
....................      duty1=pid1;    
0752:  MOVFF  31,72
0756:  MOVFF  30,71
075A:  MOVFF  2F,70
075E:  MOVFF  2E,6F
0762:  RCALL  0588
0764:  MOVFF  02,41
0768:  MOVFF  01,40
....................      if (duty1 > 0)   dir1 = 0; 
076C:  BTFSC  41.7
076E:  BRA    077C
0770:  MOVF   41,F
0772:  BNZ   077A
0774:  MOVF   40,W
0776:  SUBLW  00
0778:  BC    077C
077A:  BCF    F82.3
....................      if (duty1 <  0)    dir1 = 1; 
077C:  BTFSS  41.7
077E:  BRA    0782
0780:  BSF    F82.3
....................      duty1= abs(duty1); 
0782:  MOVFF  41,03
0786:  MOVF   40,W
0788:  BTFSS  41.7
078A:  BRA    079C
078C:  MOVLW  00
078E:  BSF    FD8.0
0790:  SUBFWB 40,W
0792:  MOVWF  00
0794:  MOVLW  00
0796:  SUBFWB 41,W
0798:  MOVWF  03
079A:  MOVF   00,W
079C:  MOVWF  40
079E:  MOVFF  03,41
....................      if(duty1>5) duty1+=230; 
07A2:  BTFSC  41.7
07A4:  BRA    07B8
07A6:  MOVF   41,F
07A8:  BNZ   07B0
07AA:  MOVF   40,W
07AC:  SUBLW  05
07AE:  BC    07B8
07B0:  MOVLW  E6
07B2:  ADDWF  40,F
07B4:  MOVLW  00
07B6:  ADDWFC 41,F
....................      if(duty1>vt1) duty1=vt1; 
07B8:  BTFSS  x6E.7
07BA:  BRA    07C2
07BC:  BTFSS  41.7
07BE:  BRA    07D4
07C0:  BRA    07C6
07C2:  BTFSC  41.7
07C4:  BRA    07DC
07C6:  MOVF   x6E,W
07C8:  SUBWF  41,W
07CA:  BNC   07DC
07CC:  BNZ   07D4
07CE:  MOVF   40,W
07D0:  SUBWF  x6D,W
07D2:  BC    07DC
07D4:  MOVFF  6E,41
07D8:  MOVFF  6D,40
....................      set_pwm1_duty (duty1); 
07DC:  MOVFF  41,02
07E0:  MOVFF  40,01
07E4:  RRCF   02,F
07E6:  RRCF   01,F
07E8:  RRCF   02,F
07EA:  RRCF   01,F
07EC:  RRCF   02,F
07EE:  MOVFF  01,FBE
07F2:  RRCF   02,F
07F4:  RRCF   02,W
07F6:  ANDLW  30
07F8:  MOVWF  00
07FA:  MOVF   FBD,W
07FC:  ANDLW  CF
07FE:  IORWF  00,W
0800:  MOVWF  FBD
0802:  RETURN 0
....................      } 
....................       
.................... /// PID DONG CO 2 ////////////////// 
....................  
.................... void piddc2(signed int16 setvt2, signed int16 vt2) 
....................      { 
....................      br2=0; 
0804:  BCF    F84.1
....................      realvt2 =  En2;  
0806:  MOVFF  21,43
080A:  MOVFF  20,42
....................      err2 = setvt2 - realvt2; 
080E:  MOVF   42,W
0810:  SUBWF  x6B,W
0812:  MOVWF  46
0814:  MOVF   43,W
0816:  SUBWFB x6C,W
0818:  MOVWF  47
....................      if(Ti2>=2) 
081A:  MOVF   51,F
081C:  BNZ   0824
081E:  MOVF   50,W
0820:  SUBLW  01
0822:  BC    0884
....................      { 
....................        delta2 = err2-epre2; 
0824:  MOVF   4A,W
0826:  SUBWF  46,W
0828:  MOVWF  48
082A:  MOVF   4B,W
082C:  SUBWFB 47,W
082E:  MOVWF  49
....................        Ti2=0; 
0830:  CLRF   51
0832:  CLRF   50
....................        if(delta2>-10) errs2 += err2; /// (err2>-20)&&(err2<20) 
0834:  BTFSS  49.7
0836:  BRA    0848
0838:  MOVF   49,W
083A:  SUBLW  FE
083C:  BC    0850
083E:  XORLW  FF
0840:  BNZ   0848
0842:  MOVF   48,W
0844:  SUBLW  F6
0846:  BC    0850
0848:  MOVF   46,W
084A:  ADDWF  44,F
084C:  MOVF   47,W
084E:  ADDWFC 45,F
....................        if (errs2 > 200 ) errs2=200; 
0850:  BTFSC  45.7
0852:  BRA    0864
0854:  MOVF   45,F
0856:  BNZ   085E
0858:  MOVF   44,W
085A:  SUBLW  C8
085C:  BC    0864
085E:  CLRF   45
0860:  MOVLW  C8
0862:  MOVWF  44
....................        if (errs2 < -200 ) errs2=-200; 
0864:  BTFSS  45.7
0866:  BRA    087C
0868:  MOVF   45,W
086A:  SUBLW  FF
086C:  BNC   087C
086E:  BNZ   0876
0870:  MOVF   44,W
0872:  SUBLW  37
0874:  BNC   087C
0876:  SETF   45
0878:  MOVLW  38
087A:  MOVWF  44
....................        epre2=err2; 
087C:  MOVFF  47,4B
0880:  MOVFF  46,4A
....................      } 
....................    
....................      pid2 =kp*err2 + ki*errs2+kd*delta2;  
0884:  MOVFF  47,74
0888:  MOVFF  46,73
088C:  RCALL  01E4
088E:  MOVFF  25,76
0892:  MOVFF  24,75
0896:  MOVFF  23,74
089A:  MOVFF  22,73
089E:  MOVFF  03,7A
08A2:  MOVFF  02,79
08A6:  MOVFF  01,78
08AA:  MOVFF  00,77
08AE:  RCALL  022C
08B0:  MOVFF  03,72
08B4:  MOVFF  02,71
08B8:  MOVFF  01,70
08BC:  MOVFF  00,6F
08C0:  MOVFF  45,74
08C4:  MOVFF  44,73
08C8:  RCALL  01E4
08CA:  MOVFF  29,76
08CE:  MOVFF  28,75
08D2:  MOVFF  27,74
08D6:  MOVFF  26,73
08DA:  MOVFF  03,7A
08DE:  MOVFF  02,79
08E2:  MOVFF  01,78
08E6:  MOVFF  00,77
08EA:  RCALL  022C
08EC:  BCF    FD8.1
08EE:  MOVFF  72,76
08F2:  MOVFF  71,75
08F6:  MOVFF  70,74
08FA:  MOVFF  6F,73
08FE:  MOVFF  03,7A
0902:  MOVFF  02,79
0906:  MOVFF  01,78
090A:  MOVFF  00,77
090E:  RCALL  031E
0910:  MOVFF  03,72
0914:  MOVFF  02,71
0918:  MOVFF  01,70
091C:  MOVFF  00,6F
0920:  MOVFF  49,74
0924:  MOVFF  48,73
0928:  RCALL  01E4
092A:  MOVFF  2D,76
092E:  MOVFF  2C,75
0932:  MOVFF  2B,74
0936:  MOVFF  2A,73
093A:  MOVFF  03,7A
093E:  MOVFF  02,79
0942:  MOVFF  01,78
0946:  MOVFF  00,77
094A:  RCALL  022C
094C:  BCF    FD8.1
094E:  MOVFF  72,76
0952:  MOVFF  71,75
0956:  MOVFF  70,74
095A:  MOVFF  6F,73
095E:  MOVFF  03,7A
0962:  MOVFF  02,79
0966:  MOVFF  01,78
096A:  MOVFF  00,77
096E:  RCALL  031E
0970:  MOVFF  03,35
0974:  MOVFF  02,34
0978:  MOVFF  01,33
097C:  MOVFF  00,32
....................      duty2=pid2;     
0980:  MOVFF  35,72
0984:  MOVFF  34,71
0988:  MOVFF  33,70
098C:  MOVFF  32,6F
0990:  RCALL  0588
0992:  MOVFF  02,4D
0996:  MOVFF  01,4C
....................      if (duty2 > 0)   dir2 = 1; 
099A:  BTFSC  4D.7
099C:  BRA    09AA
099E:  MOVF   4D,F
09A0:  BNZ   09A8
09A2:  MOVF   4C,W
09A4:  SUBLW  00
09A6:  BC    09AA
09A8:  BSF    F82.0
....................      if (duty2 <  0)    dir2 = 0; 
09AA:  BTFSS  4D.7
09AC:  BRA    09B0
09AE:  BCF    F82.0
....................      duty2= abs(duty2); 
09B0:  MOVFF  4D,03
09B4:  MOVF   4C,W
09B6:  BTFSS  4D.7
09B8:  BRA    09CA
09BA:  MOVLW  00
09BC:  BSF    FD8.0
09BE:  SUBFWB 4C,W
09C0:  MOVWF  00
09C2:  MOVLW  00
09C4:  SUBFWB 4D,W
09C6:  MOVWF  03
09C8:  MOVF   00,W
09CA:  MOVWF  4C
09CC:  MOVFF  03,4D
....................      if(duty2>5) duty2+=230; 
09D0:  BTFSC  4D.7
09D2:  BRA    09E6
09D4:  MOVF   4D,F
09D6:  BNZ   09DE
09D8:  MOVF   4C,W
09DA:  SUBLW  05
09DC:  BC    09E6
09DE:  MOVLW  E6
09E0:  ADDWF  4C,F
09E2:  MOVLW  00
09E4:  ADDWFC 4D,F
....................      if(duty2>vt2) duty2=vt2; 
09E6:  BTFSS  x6E.7
09E8:  BRA    09F0
09EA:  BTFSS  4D.7
09EC:  BRA    0A02
09EE:  BRA    09F4
09F0:  BTFSC  4D.7
09F2:  BRA    0A0A
09F4:  MOVF   x6E,W
09F6:  SUBWF  4D,W
09F8:  BNC   0A0A
09FA:  BNZ   0A02
09FC:  MOVF   4C,W
09FE:  SUBWF  x6D,W
0A00:  BC    0A0A
0A02:  MOVFF  6E,4D
0A06:  MOVFF  6D,4C
....................      set_pwm2_duty (duty2); 
0A0A:  MOVFF  4D,02
0A0E:  MOVFF  4C,01
0A12:  RRCF   02,F
0A14:  RRCF   01,F
0A16:  RRCF   02,F
0A18:  RRCF   01,F
0A1A:  RRCF   02,F
0A1C:  MOVFF  01,FBB
0A20:  RRCF   02,F
0A22:  RRCF   02,W
0A24:  ANDLW  30
0A26:  MOVWF  00
0A28:  MOVF   FBA,W
0A2A:  ANDLW  CF
0A2C:  IORWF  00,W
0A2E:  MOVWF  FBA
0A30:  RETURN 0
....................      } 
....................       
....................  
....................  
....................  
....................  
....................  
.................... ///// CHUONG TRINH QUET PHIM 
.................... int8 demct=0; 
....................  
.................... ///// NGAT TIMER0 LEO THANG, SERVO 
.................... volatile char demservo=0, xungleo=100; 
.................... volatile int1 dclep=0 ; 
.................... int16 demvanduoi=0; 
.................... #int_timer0 
.................... void ngat_timer0(void)  
....................    { 
....................    demvanduoi++; 
*
0162:  INCF   5E,F
0164:  BTFSC  FD8.2
0166:  INCF   5F,F
....................    if (dclep==1) 
0168:  BTFSS  5D.0
016A:  BRA    0188
....................    { 
....................       set_timer0(5); 
016C:  CLRF   FD7
016E:  MOVLW  05
0170:  MOVWF  FD6
....................       demservo++; 
0172:  INCF   5B,F
....................       if (demservo>100) 
0174:  MOVF   5B,W
0176:  SUBLW  64
0178:  BC    017E
....................          { 
....................          demservo=0; 
017A:  CLRF   5B
....................          pwm3=0; 
017C:  BCF    F83.6
....................          } 
....................       if (demservo >=xungleo) pwm3=1; 
017E:  MOVF   5C,W
0180:  SUBWF  5B,W
0182:  BNC   0186
0184:  BSF    F83.6
....................    } 
0186:  BRA    01A2
....................    else 
....................       { 
....................       set_timer0(5); 
0188:  CLRF   FD7
018A:  MOVLW  05
018C:  MOVWF  FD6
....................       demservo++; 
018E:  INCF   5B,F
....................       if (demservo>=200) 
0190:  MOVF   5B,W
0192:  SUBLW  C7
0194:  BC    019A
....................          { 
....................          demservo=0; 
0196:  CLRF   5B
....................          output_high(pin_c7); 
0198:  BSF    F8B.7
....................          } 
....................       if (demservo >=xungleo) output_low(pin_c7); 
019A:  MOVF   5C,W
019C:  SUBWF  5B,W
019E:  BNC   01A2
01A0:  BCF    F8B.7
....................       } 
01A2:  BCF    FF2.2
01A4:  GOTO   0090
....................    }    
....................       
.................... ///// NGAT TIMER1 PID 
.................... volatile int8 chonpid=4; 
.................... #int_timer1 
.................... void ngat_timer1(void)  
....................    { 
....................       Ti1++; 
*
0A32:  INCF   4E,F
0A34:  BTFSC  FD8.2
0A36:  INCF   4F,F
....................       Ti2++; 
0A38:  INCF   50,F
0A3A:  BTFSC  FD8.2
0A3C:  INCF   51,F
....................       switch (chonpid)   
0A3E:  MOVF   x60,W
0A40:  ADDLW  FC
0A42:  BC    0AAA
0A44:  ADDLW  04
0A46:  GOTO   0AB8
....................          { 
....................           case 0 : disable_interrupts(int_timer1); resetdc1(); resetdc2(); break; 
0A4A:  BCF    F9D.0
0A4C:  CALL   01A8
0A50:  CALL   01C6
0A54:  BRA    0AAA
....................           case 1 : resetdc2(); piddc1(setvt1,vt1); break; 
0A56:  CALL   01C6
0A5A:  MOVFF  53,6C
0A5E:  MOVFF  52,6B
0A62:  MOVFF  57,6E
0A66:  MOVFF  56,6D
0A6A:  RCALL  05C0
0A6C:  BRA    0AAA
....................           case 2 : resetdc1(); piddc2(setvt2,vt2); break; 
0A6E:  CALL   01A8
0A72:  MOVFF  55,6C
0A76:  MOVFF  54,6B
0A7A:  MOVFF  59,6E
0A7E:  MOVFF  58,6D
0A82:  RCALL  0804
0A84:  BRA    0AAA
....................           case 3 : piddc1(setvt1,vt1); piddc2(setvt2,vt2);  break; 
0A86:  MOVFF  53,6C
0A8A:  MOVFF  52,6B
0A8E:  MOVFF  57,6E
0A92:  MOVFF  56,6D
0A96:  RCALL  05C0
0A98:  MOVFF  55,6C
0A9C:  MOVFF  54,6B
0AA0:  MOVFF  59,6E
0AA4:  MOVFF  58,6D
0AA8:  RCALL  0804
....................          } 
....................         
....................       set_timer1(50286);    
0AAA:  MOVLW  C4
0AAC:  MOVWF  FCF
0AAE:  MOVLW  6E
0AB0:  MOVWF  FCE
....................        
....................    } 
....................     
.................... ///// NGAT TIMER5 QUET PHIM  
0AB2:  BCF    F9E.0
0AB4:  GOTO   0090
.................... #int_timer5 
.................... void ngat_timer5(void)  
....................    { 
....................       
....................       set_timer5(50035); 
*
0B24:  MOVLW  C3
0B26:  MOVWF  F88
0B28:  MOVLW  73
0B2A:  MOVWF  F87
....................       demct++; 
0B2C:  INCF   5A,F
....................       if (demct==2) { beep(1,50); } 
0B2E:  MOVF   5A,W
0B30:  SUBLW  02
0B32:  BNZ   0B3E
0B34:  MOVLW  01
0B36:  MOVWF  x6B
0B38:  MOVLW  32
0B3A:  MOVWF  x6C
0B3C:  RCALL  0B00
....................       if (demct==50) { beep(1,50); } 
0B3E:  MOVF   5A,W
0B40:  SUBLW  32
0B42:  BNZ   0B4E
0B44:  MOVLW  01
0B46:  MOVWF  x6B
0B48:  MOVLW  32
0B4A:  MOVWF  x6C
0B4C:  RCALL  0B00
....................       if (demct==100) { beep(1,50); } 
0B4E:  MOVF   5A,W
0B50:  SUBLW  64
0B52:  BNZ   0B5E
0B54:  MOVLW  01
0B56:  MOVWF  x6B
0B58:  MOVLW  32
0B5A:  MOVWF  x6C
0B5C:  RCALL  0B00
....................       if (demct==150) { beep(1,50); } 
0B5E:  MOVF   5A,W
0B60:  SUBLW  96
0B62:  BNZ   0B6E
0B64:  MOVLW  01
0B66:  MOVWF  x6B
0B68:  MOVLW  32
0B6A:  MOVWF  x6C
0B6C:  RCALL  0B00
....................       if (demct>200) {demct=0; disable_interrupts(int_timer5); } 
0B6E:  MOVF   5A,W
0B70:  SUBLW  C8
0B72:  BC    0B78
0B74:  CLRF   5A
0B76:  BCF    FA3.0
....................       
....................        
....................    }    
....................  
.................... ///// KHAI BAO NHIEM VU 
.................... //#include <resetall.c> 
0B78:  BCF    FA4.0
0B7A:  GOTO   0090
.................... #include <resetvan.c> 
....................  
.................... ///// RESET TAT CA 
.................... int8 ire=0; 
....................  
.................... void resetvan() 
.................... { 
....................  
.................... disable_interrupts(int_timer1); 
*
0C70:  BCF    F9D.0
.................... disable_interrupts(int_timer0); 
0C72:  BCF    FF2.5
....................  
.................... delay_ms(500); 
0C74:  MOVLW  02
0C76:  MOVWF  x65
0C78:  CLRF   19
0C7A:  BTFSC  FF2.7
0C7C:  BSF    19.7
0C7E:  BCF    FF2.7
0C80:  MOVLW  FA
0C82:  MOVWF  x6F
0C84:  RCALL  0ADA
0C86:  BTFSC  19.7
0C88:  BSF    FF2.7
0C8A:  DECFSZ x65,F
0C8C:  BRA    0C78
0C8E:  CLRF   19
0C90:  BTFSC  FF2.7
0C92:  BSF    19.7
0C94:  BCF    FF2.7
.................... beep(1,100); 
0C96:  MOVLW  01
0C98:  MOVWF  x6B
0C9A:  MOVLW  64
0C9C:  MOVWF  x6C
0C9E:  RCALL  0B00
0CA0:  BTFSC  19.7
0CA2:  BSF    FF2.7
....................  
.................... for (ire=0; ire<50; ire++) 
0CA4:  CLRF   x61
0CA6:  MOVF   x61,W
0CA8:  SUBLW  31
0CAA:  BNC   0CEC
....................    { 
....................    if (ctsel==0) {vancanh1=vancanh2=0; delay_ms(1000); vantay1=vantay2=0; ire=100; } 
0CAC:  BTFSC  F81.7
0CAE:  BRA    0CD6
0CB0:  BCF    F80.0
0CB2:  BCF    F80.1
0CB4:  MOVLW  04
0CB6:  MOVWF  x65
0CB8:  CLRF   19
0CBA:  BTFSC  FF2.7
0CBC:  BSF    19.7
0CBE:  BCF    FF2.7
0CC0:  MOVLW  FA
0CC2:  MOVWF  x6F
0CC4:  RCALL  0ADA
0CC6:  BTFSC  19.7
0CC8:  BSF    FF2.7
0CCA:  DECFSZ x65,F
0CCC:  BRA    0CB8
0CCE:  BCF    F84.0
0CD0:  BCF    F80.5
0CD2:  MOVLW  64
0CD4:  MOVWF  x61
0CD6:  CLRF   19
0CD8:  BTFSC  FF2.7
0CDA:  BSF    19.7
0CDC:  BCF    FF2.7
....................    delay_ms(10); 
0CDE:  MOVLW  0A
0CE0:  MOVWF  x6F
0CE2:  RCALL  0ADA
0CE4:  BTFSC  19.7
0CE6:  BSF    FF2.7
0CE8:  INCF   x61,F
0CEA:  BRA    0CA6
....................    } 
.................... delay_ms(500);    
0CEC:  MOVLW  02
0CEE:  MOVWF  x65
0CF0:  CLRF   19
0CF2:  BTFSC  FF2.7
0CF4:  BSF    19.7
0CF6:  BCF    FF2.7
0CF8:  MOVLW  FA
0CFA:  MOVWF  x6F
0CFC:  RCALL  0ADA
0CFE:  BTFSC  19.7
0D00:  BSF    FF2.7
0D02:  DECFSZ x65,F
0D04:  BRA    0CF0
.................... while (ctc1==1) { dc1t(430); } 
0D06:  BTFSS  F81.3
0D08:  BRA    0D16
0D0A:  MOVLW  01
0D0C:  MOVWF  x66
0D0E:  MOVLW  AE
0D10:  MOVWF  x65
0D12:  RCALL  0BEC
0D14:  BRA    0D06
.................... resetdc1(); 
0D16:  CALL   01A8
.................... while (ctc2==1) { dc2t(600); } 
0D1A:  BTFSS  F81.1
0D1C:  BRA    0D2A
0D1E:  MOVLW  02
0D20:  MOVWF  x66
0D22:  MOVLW  58
0D24:  MOVWF  x65
0D26:  RCALL  0C2E
0D28:  BRA    0D1A
.................... resetdc2(); 
0D2A:  CALL   01C6
0D2E:  CLRF   19
0D30:  BTFSC  FF2.7
0D32:  BSF    19.7
0D34:  BCF    FF2.7
.................... beep(1,100); 
0D36:  MOVLW  01
0D38:  MOVWF  x6B
0D3A:  MOVLW  64
0D3C:  MOVWF  x6C
0D3E:  RCALL  0B00
0D40:  BTFSC  19.7
0D42:  BSF    FF2.7
.................... vantay1=vantay2=vancanh1=vancanh2=vanduoi=1; 
0D44:  BSF    F80.2
0D46:  BSF    F80.0
0D48:  BSF    F80.1
0D4A:  BSF    F84.0
0D4C:  BSF    F80.5
....................  
.................... trispwm3=trisdir3=0; 
0D4E:  BCF    F95.5
0D50:  BCF    F95.6
.................... pwm3=dir3=1; 
0D52:  BSF    F83.5
0D54:  BSF    F83.6
.................... enable_interrupts(int_timer0); 
0D56:  BSF    FF2.5
.................... dclep=1; 
0D58:  BSF    5D.0
.................... while (ctlt==1) 
0D5A:  BTFSS  F81.5
0D5C:  BRA    0D66
....................    { 
....................    dir3=1; 
0D5E:  BSF    F83.5
....................    xungleo=30; 
0D60:  MOVLW  1E
0D62:  MOVWF  5C
0D64:  BRA    0D5A
....................    } 
....................    xungleo=0;   
0D66:  CLRF   5C
....................    delay_ms(300); 
0D68:  MOVLW  02
0D6A:  MOVWF  x65
0D6C:  CLRF   19
0D6E:  BTFSC  FF2.7
0D70:  BSF    19.7
0D72:  BCF    FF2.7
0D74:  MOVLW  96
0D76:  MOVWF  x6F
0D78:  RCALL  0ADA
0D7A:  BTFSC  19.7
0D7C:  BSF    FF2.7
0D7E:  DECFSZ x65,F
0D80:  BRA    0D6C
.................... while (ctlt==0) 
0D82:  BTFSC  F81.5
0D84:  BRA    0D8E
....................    { 
....................    dir3=0;  
0D86:  BCF    F83.5
....................    xungleo=60; 
0D88:  MOVLW  3C
0D8A:  MOVWF  5C
0D8C:  BRA    0D82
....................    } 
....................    xungleo=0; 
0D8E:  CLRF   5C
0D90:  CLRF   19
0D92:  BTFSC  FF2.7
0D94:  BSF    19.7
0D96:  BCF    FF2.7
....................    beep(1,100);    
0D98:  MOVLW  01
0D9A:  MOVWF  x6B
0D9C:  MOVLW  64
0D9E:  MOVWF  x6C
0DA0:  RCALL  0B00
0DA2:  BTFSC  19.7
0DA4:  BSF    FF2.7
.................... disable_interrupts(int_timer0); 
0DA6:  BCF    FF2.5
.................... pwm3=1; 
0DA8:  BSF    F83.6
.................... dir3=1; 
0DAA:  BSF    F83.5
0DAC:  CLRF   19
0DAE:  BTFSC  FF2.7
0DB0:  BSF    19.7
0DB2:  BCF    FF2.7
.................... beep(1,100); 
0DB4:  MOVLW  01
0DB6:  MOVWF  x6B
0DB8:  MOVLW  64
0DBA:  MOVWF  x6C
0DBC:  RCALL  0B00
0DBE:  BTFSC  19.7
0DC0:  BSF    FF2.7
....................  
.................... qei_set_count(0); 
0DC2:  CLRF   F67
0DC4:  CLRF   F66
.................... En2=0; 
0DC6:  CLRF   21
0DC8:  CLRF   20
.................... Ti1=0; 
0DCA:  CLRF   4F
0DCC:  CLRF   4E
.................... Ti2=0; 
0DCE:  CLRF   51
0DD0:  CLRF   50
.................... setvt1=0; 
0DD2:  CLRF   53
0DD4:  CLRF   52
.................... setvt2=0; 
0DD6:  CLRF   55
0DD8:  CLRF   54
.................... chonpid=4; 
0DDA:  MOVLW  04
0DDC:  MOVWF  x60
....................  
.................... demct=200; 
0DDE:  MOVLW  C8
0DE0:  MOVWF  5A
.................... enable_interrupts(int_timer5); 
0DE2:  BSF    FA3.0
0DE4:  RETURN 0
....................  
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... #include <nhiemvu2.c> 
....................  
.................... ///// NHIEM VU 2 
....................  
.................... void nhiemvu2() 
.................... { 
....................  
.................... delay_ms(1000); 
.................... beep(2,100); 
....................  
.................... while(cten==0){} 
.................... delay_ms(1000); 
....................  
.................... vanduoi=0;  
.................... delay_ms(500); 
....................  
.................... while(cten==1) {} 
....................  
.................... delay_ms(1000); 
....................  
.................... vanduoi=1;  
....................  
.................... demct=200; 
.................... enable_interrupts(int_timer5); 
....................  
.................... } 
....................  
....................  
....................  
....................  
.................... #include <nhiemvu3.c> 
....................  
.................... ///// NHIEM VU 3 
.................... int8 inv3=0;  
.................... void nhiemvu3() 
.................... { 
....................  
.................... delay_ms(1000); 
*
0E6A:  MOVLW  04
0E6C:  MOVWF  x65
0E6E:  CLRF   19
0E70:  BTFSC  FF2.7
0E72:  BSF    19.7
0E74:  BCF    FF2.7
0E76:  MOVLW  FA
0E78:  MOVWF  x6F
0E7A:  RCALL  0ADA
0E7C:  BTFSC  19.7
0E7E:  BSF    FF2.7
0E80:  DECFSZ x65,F
0E82:  BRA    0E6E
0E84:  CLRF   19
0E86:  BTFSC  FF2.7
0E88:  BSF    19.7
0E8A:  BCF    FF2.7
.................... beep(3,100); 
0E8C:  MOVLW  03
0E8E:  MOVWF  x6B
0E90:  MOVLW  64
0E92:  MOVWF  x6C
0E94:  RCALL  0B00
0E96:  BTFSC  19.7
0E98:  BSF    FF2.7
.................... setup_timer_2(T2_DIV_BY_4,250,1);      //401 us overflow, 401 us interrupt 
0E9A:  MOVLW  00
0E9C:  IORLW  05
0E9E:  MOVWF  FCA
0EA0:  MOVLW  FA
0EA2:  MOVWF  FCB
.................... setup_ccp1 (ccp_pwm); 
0EA4:  BCF    F8B.2
0EA6:  MOVLW  0C
0EA8:  MOVWF  FBD
.................... setup_ccp2 (ccp_pwm); 
0EAA:  BCF    F8B.1
0EAC:  MOVWF  FBA
....................  
.................... vantay1=vantay2=vancanh1=vancanh2=vanduoi=1; 
0EAE:  BSF    F80.2
0EB0:  BSF    F80.0
0EB2:  BSF    F80.1
0EB4:  BSF    F84.0
0EB6:  BSF    F80.5
.................... vancanh1=vancanh2=0; 
0EB8:  BCF    F80.0
0EBA:  BCF    F80.1
....................  
.................... chonpid=2; 
0EBC:  MOVLW  02
0EBE:  MOVWF  x60
.................... setvt2=280; 
0EC0:  MOVLW  01
0EC2:  MOVWF  55
0EC4:  MOVLW  18
0EC6:  MOVWF  54
.................... enable_interrupts(int_timer1); 
0EC8:  BSF    F9D.0
.................... while (En2<280) {} 
0ECA:  BTFSC  21.7
0ECC:  BRA    0EDC
0ECE:  MOVF   21,W
0ED0:  SUBLW  01
0ED2:  BNC   0EDE
0ED4:  BNZ   0EDC
0ED6:  MOVF   20,W
0ED8:  SUBLW  17
0EDA:  BTFSC  FD8.0
0EDC:  BRA    0ECA
....................  
.................... chonpid=1; 
0EDE:  MOVLW  01
0EE0:  MOVWF  x60
.................... setvt1=235; 
0EE2:  CLRF   53
0EE4:  MOVLW  EB
0EE6:  MOVWF  52
.................... while (qei_get_count() <235) {} 
0EE8:  MOVFF  F67,01
0EEC:  MOVFF  F66,00
0EF0:  MOVFF  F67,03
0EF4:  MOVF   03,W
0EF6:  SUBWF  01,W
0EF8:  BZ    0EFE
0EFA:  MOVFF  F66,00
0EFE:  MOVF   00,W
0F00:  MOVWF  x65
0F02:  MOVFF  03,66
0F06:  MOVF   x66,F
0F08:  BNZ   0F12
0F0A:  MOVF   x65,W
0F0C:  SUBLW  EA
0F0E:  BNC   0F12
0F10:  BRA    0EE8
....................  
.................... vantay1=vantay2=0; 
0F12:  BCF    F84.0
0F14:  BCF    F80.5
....................  
.................... while (ctsel==1) {} 
0F16:  BTFSC  F81.7
0F18:  BRA    0F16
.................... if (ctsel==0) { vantay1=1; beep(1,100); } 
0F1A:  BTFSC  F81.7
0F1C:  BRA    0F36
0F1E:  BSF    F80.5
0F20:  CLRF   19
0F22:  BTFSC  FF2.7
0F24:  BSF    19.7
0F26:  BCF    FF2.7
0F28:  MOVLW  01
0F2A:  MOVWF  x6B
0F2C:  MOVLW  64
0F2E:  MOVWF  x6C
0F30:  RCALL  0B00
0F32:  BTFSC  19.7
0F34:  BSF    FF2.7
.................... while (cten==1) {} 
0F36:  BTFSC  F81.6
0F38:  BRA    0F36
.................... /* 
.................... chonpid=1;  
.................... if (cten==0) { setvt1=270; } 
.................... while (qei_get_count() <270) {}; 
.................... */ 
.................... chonpid=0; 
0F3A:  CLRF   x60
....................  
.................... dc1n(600); 
0F3C:  MOVLW  02
0F3E:  MOVWF  x66
0F40:  MOVLW  58
0F42:  MOVWF  x65
0F44:  RCALL  0DE6
.................... for ( inv3=0; inv3 < 6 ; inv3++) 
0F46:  CLRF   x62
0F48:  MOVF   x62,W
0F4A:  SUBLW  05
0F4C:  BNC   0FB2
.................... { 
.................... while (ctt2==1) { dc1n(600);} //if ( qei_get_count()>285 ) {resetdc1(); beep(10,100);} } 
0F4E:  BTFSS  F81.0
0F50:  BRA    0F5E
0F52:  MOVLW  02
0F54:  MOVWF  x66
0F56:  MOVLW  58
0F58:  MOVWF  x65
0F5A:  RCALL  0DE6
0F5C:  BRA    0F4E
.................... if (ctt2==0) {vantay2=1; resetdc1();  } 
0F5E:  BTFSC  F81.0
0F60:  BRA    0F68
0F62:  BSF    F84.0
0F64:  CALL   01A8
0F68:  CLRF   19
0F6A:  BTFSC  FF2.7
0F6C:  BSF    19.7
0F6E:  BCF    FF2.7
.................... delay_ms(100); 
0F70:  MOVLW  64
0F72:  MOVWF  x6F
0F74:  RCALL  0ADA
0F76:  BTFSC  19.7
0F78:  BSF    FF2.7
.................... if (ctt2==1) {vantay2=0; dc1t(300); delay_ms(400); dc1n(600); } 
0F7A:  BTFSS  F81.0
0F7C:  BRA    0FAE
0F7E:  BCF    F84.0
0F80:  MOVLW  01
0F82:  MOVWF  x66
0F84:  MOVLW  2C
0F86:  MOVWF  x65
0F88:  RCALL  0BEC
0F8A:  MOVLW  02
0F8C:  MOVWF  x65
0F8E:  CLRF   19
0F90:  BTFSC  FF2.7
0F92:  BSF    19.7
0F94:  BCF    FF2.7
0F96:  MOVLW  C8
0F98:  MOVWF  x6F
0F9A:  RCALL  0ADA
0F9C:  BTFSC  19.7
0F9E:  BSF    FF2.7
0FA0:  DECFSZ x65,F
0FA2:  BRA    0F8E
0FA4:  MOVLW  02
0FA6:  MOVWF  x66
0FA8:  MOVLW  58
0FAA:  MOVWF  x65
0FAC:  RCALL  0DE6
0FAE:  INCF   x62,F
0FB0:  BRA    0F48
.................... } 
.................... vantay2=1; resetdc1(); 
0FB2:  BSF    F84.0
0FB4:  CALL   01A8
....................  
.................... delay_ms(1000); 
0FB8:  MOVLW  04
0FBA:  MOVWF  x65
0FBC:  CLRF   19
0FBE:  BTFSC  FF2.7
0FC0:  BSF    19.7
0FC2:  BCF    FF2.7
0FC4:  MOVLW  FA
0FC6:  MOVWF  x6F
0FC8:  RCALL  0ADA
0FCA:  BTFSC  19.7
0FCC:  BSF    FF2.7
0FCE:  DECFSZ x65,F
0FD0:  BRA    0FBC
.................... vantay1=0; 
0FD2:  BCF    F80.5
.................... chonpid=2; 
0FD4:  MOVLW  02
0FD6:  MOVWF  x60
.................... setvt2=250; 
0FD8:  CLRF   55
0FDA:  MOVLW  FA
0FDC:  MOVWF  54
.................... enable_interrupts(int_timer1); 
0FDE:  BSF    F9D.0
.................... while ( En2 >250) {} 
0FE0:  BTFSC  21.7
0FE2:  BRA    0FF0
0FE4:  MOVF   21,F
0FE6:  BNZ   0FEE
0FE8:  MOVF   20,W
0FEA:  SUBLW  FA
0FEC:  BTFSS  FD8.0
0FEE:  BRA    0FE0
....................  
.................... setvt2=10; 
0FF0:  CLRF   55
0FF2:  MOVLW  0A
0FF4:  MOVWF  54
.................... setvt1=0; 
0FF6:  CLRF   53
0FF8:  CLRF   52
.................... chonpid=3; 
0FFA:  MOVLW  03
0FFC:  MOVWF  x60
.................... while ( En2 >10) {} 
0FFE:  BTFSC  21.7
1000:  BRA    100E
1002:  MOVF   21,F
1004:  BNZ   100C
1006:  MOVF   20,W
1008:  SUBLW  0A
100A:  BTFSS  FD8.0
100C:  BRA    0FFE
.................... chonpid=0; 
100E:  CLRF   x60
....................  
.................... dc2t(600); 
1010:  MOVLW  02
1012:  MOVWF  x66
1014:  MOVLW  58
1016:  MOVWF  x65
1018:  RCALL  0C2E
.................... for (inv3=0; inv3 < 6; inv3++) 
101A:  CLRF   x62
101C:  MOVF   x62,W
101E:  SUBLW  05
1020:  BNC   1086
....................    { 
....................    while (ctt1==1) { dc2t(600);} //if ( En2 <-5 ) {resetdc2(); beep(10,100);} } 
1022:  BTFSS  F81.2
1024:  BRA    1032
1026:  MOVLW  02
1028:  MOVWF  x66
102A:  MOVLW  58
102C:  MOVWF  x65
102E:  RCALL  0C2E
1030:  BRA    1022
....................    if (ctt1==0) {vantay1=1;resetdc2();  } 
1032:  BTFSC  F81.2
1034:  BRA    103C
1036:  BSF    F80.5
1038:  CALL   01C6
103C:  CLRF   19
103E:  BTFSC  FF2.7
1040:  BSF    19.7
1042:  BCF    FF2.7
....................    delay_ms(100); 
1044:  MOVLW  64
1046:  MOVWF  x6F
1048:  RCALL  0ADA
104A:  BTFSC  19.7
104C:  BSF    FF2.7
....................    if (ctt1==1) {vantay1=0; dc2n(300); delay_ms(400); dc2t(600); } 
104E:  BTFSS  F81.2
1050:  BRA    1082
1052:  BCF    F80.5
1054:  MOVLW  01
1056:  MOVWF  x66
1058:  MOVLW  2C
105A:  MOVWF  x65
105C:  RCALL  0E28
105E:  MOVLW  02
1060:  MOVWF  x65
1062:  CLRF   19
1064:  BTFSC  FF2.7
1066:  BSF    19.7
1068:  BCF    FF2.7
106A:  MOVLW  C8
106C:  MOVWF  x6F
106E:  RCALL  0ADA
1070:  BTFSC  19.7
1072:  BSF    FF2.7
1074:  DECFSZ x65,F
1076:  BRA    1062
1078:  MOVLW  02
107A:  MOVWF  x66
107C:  MOVLW  58
107E:  MOVWF  x65
1080:  RCALL  0C2E
1082:  INCF   x62,F
1084:  BRA    101C
....................    } 
.................... vantay1=1;resetdc2();  
1086:  BSF    F80.5
1088:  CALL   01C6
....................  
....................  
.................... delay_ms(1000); 
108C:  MOVLW  04
108E:  MOVWF  x65
1090:  CLRF   19
1092:  BTFSC  FF2.7
1094:  BSF    19.7
1096:  BCF    FF2.7
1098:  MOVLW  FA
109A:  MOVWF  x6F
109C:  RCALL  0ADA
109E:  BTFSC  19.7
10A0:  BSF    FF2.7
10A2:  DECFSZ x65,F
10A4:  BRA    1090
.................... vantay2=0; 
10A6:  BCF    F84.0
.................... chonpid=1; 
10A8:  MOVLW  01
10AA:  MOVWF  x60
.................... setvt1=30; 
10AC:  CLRF   53
10AE:  MOVLW  1E
10B0:  MOVWF  52
.................... enable_interrupts(int_timer1); 
10B2:  BSF    F9D.0
.................... while (qei_get_count() < 30) {} 
10B4:  MOVFF  F67,01
10B8:  MOVFF  F66,00
10BC:  MOVFF  F67,03
10C0:  MOVF   03,W
10C2:  SUBWF  01,W
10C4:  BZ    10CA
10C6:  MOVFF  F66,00
10CA:  MOVF   00,W
10CC:  MOVWF  x65
10CE:  MOVFF  03,66
10D2:  MOVF   x66,F
10D4:  BNZ   10DE
10D6:  MOVF   x65,W
10D8:  SUBLW  1D
10DA:  BNC   10DE
10DC:  BRA    10B4
....................  
.................... setvt1=270; 
10DE:  MOVLW  01
10E0:  MOVWF  53
10E2:  MOVLW  0E
10E4:  MOVWF  52
.................... setvt2=275; 
10E6:  MOVLW  01
10E8:  MOVWF  55
10EA:  MOVLW  13
10EC:  MOVWF  54
.................... chonpid=3; 
10EE:  MOVLW  03
10F0:  MOVWF  x60
.................... while (qei_get_count() < 270) {} 
10F2:  MOVFF  F67,01
10F6:  MOVFF  F66,00
10FA:  MOVFF  F67,03
10FE:  MOVF   03,W
1100:  SUBWF  01,W
1102:  BZ    1108
1104:  MOVFF  F66,00
1108:  MOVF   00,W
110A:  MOVWF  x65
110C:  MOVFF  03,66
1110:  MOVF   x66,W
1112:  SUBLW  01
1114:  BNC   1120
1116:  BNZ   111E
1118:  MOVF   x65,W
111A:  SUBLW  0D
111C:  BNC   1120
111E:  BRA    10F2
.................... chonpid=0; 
1120:  CLRF   x60
.................... dc1n(600); 
1122:  MOVLW  02
1124:  MOVWF  x66
1126:  MOVLW  58
1128:  MOVWF  x65
112A:  RCALL  0DE6
.................... for ( inv3=0; inv3 < 6 ; inv3++) 
112C:  CLRF   x62
112E:  MOVF   x62,W
1130:  SUBLW  05
1132:  BNC   119C
.................... { 
.................... while (ctt2==1) {dc1n(600);} // if ( qei_get_count() >285 ) {resetdc1(); beep(10,100);} } 
1134:  BTFSS  F81.0
1136:  BRA    1144
1138:  MOVLW  02
113A:  MOVWF  x66
113C:  MOVLW  58
113E:  MOVWF  x65
1140:  RCALL  0DE6
1142:  BRA    1134
.................... if (ctt2==0) {vantay2=1; resetdc1();  } 
1144:  BTFSC  F81.0
1146:  BRA    114E
1148:  BSF    F84.0
114A:  CALL   01A8
114E:  CLRF   19
1150:  BTFSC  FF2.7
1152:  BSF    19.7
1154:  BCF    FF2.7
.................... delay_ms(100); 
1156:  MOVLW  64
1158:  MOVWF  x6F
115A:  RCALL  0ADA
115C:  BTFSC  19.7
115E:  BSF    FF2.7
.................... if (ctt2==1) {vantay2=0; dc1t(300); delay_ms(400); resetdc1(); dc1n(600); } 
1160:  BTFSS  F81.0
1162:  BRA    1198
1164:  BCF    F84.0
1166:  MOVLW  01
1168:  MOVWF  x66
116A:  MOVLW  2C
116C:  MOVWF  x65
116E:  RCALL  0BEC
1170:  MOVLW  02
1172:  MOVWF  x65
1174:  CLRF   19
1176:  BTFSC  FF2.7
1178:  BSF    19.7
117A:  BCF    FF2.7
117C:  MOVLW  C8
117E:  MOVWF  x6F
1180:  RCALL  0ADA
1182:  BTFSC  19.7
1184:  BSF    FF2.7
1186:  DECFSZ x65,F
1188:  BRA    1174
118A:  CALL   01A8
118E:  MOVLW  02
1190:  MOVWF  x66
1192:  MOVLW  58
1194:  MOVWF  x65
1196:  RCALL  0DE6
1198:  INCF   x62,F
119A:  BRA    112E
.................... } 
.................... vantay2=1; resetdc1(); 
119C:  BSF    F84.0
119E:  CALL   01A8
....................  
.................... delay_ms(1000); 
11A2:  MOVLW  04
11A4:  MOVWF  x65
11A6:  CLRF   19
11A8:  BTFSC  FF2.7
11AA:  BSF    19.7
11AC:  BCF    FF2.7
11AE:  MOVLW  FA
11B0:  MOVWF  x6F
11B2:  RCALL  0ADA
11B4:  BTFSC  19.7
11B6:  BSF    FF2.7
11B8:  DECFSZ x65,F
11BA:  BRA    11A6
.................... vantay2=0; 
11BC:  BCF    F84.0
.................... chonpid=2; 
11BE:  MOVLW  02
11C0:  MOVWF  x60
.................... setvt2=0; 
11C2:  CLRF   55
11C4:  CLRF   54
.................... enable_interrupts(int_timer1); 
11C6:  BSF    F9D.0
....................  
.................... vancanh2=1; 
11C8:  BSF    F80.0
.................... while ( En2 > 240) {} 
11CA:  BTFSC  21.7
11CC:  BRA    11DA
11CE:  MOVF   21,F
11D0:  BNZ   11D8
11D2:  MOVF   20,W
11D4:  SUBLW  F0
11D6:  BTFSS  FD8.0
11D8:  BRA    11CA
.................... chonpid=0; 
11DA:  CLRF   x60
.................... vancanh2=0; 
11DC:  BCF    F80.0
....................  
.................... while (cten==1) {} 
11DE:  BTFSC  F81.6
11E0:  BRA    11DE
....................  
.................... while (ctsel==1) {} 
11E2:  BTFSC  F81.7
11E4:  BRA    11E2
....................  
....................  vantay1=0; delay_ms(500); 
11E6:  BCF    F80.5
11E8:  MOVLW  02
11EA:  MOVWF  x65
11EC:  CLRF   19
11EE:  BTFSC  FF2.7
11F0:  BSF    19.7
11F2:  BCF    FF2.7
11F4:  MOVLW  FA
11F6:  MOVWF  x6F
11F8:  RCALL  0ADA
11FA:  BTFSC  19.7
11FC:  BSF    FF2.7
11FE:  DECFSZ x65,F
1200:  BRA    11EC
....................   
.................... while (ctsel==1) {} 
1202:  BTFSC  F81.7
1204:  BRA    1202
....................  resetvan();  
1206:  RCALL  0C70
....................   
.................... demct=200; 
1208:  MOVLW  C8
120A:  MOVWF  5A
.................... enable_interrupts(int_timer5); 
120C:  BSF    FA3.0
120E:  GOTO   18B2 (RETURN)
....................  
.................... } 
....................  
....................  
....................  
.................... /* 
....................  
.................... void nhiemvu3xdg() 
.................... { 
.................... delay_ms(1000); 
.................... beep(3,100); 
....................  
.................... vantay1=vantay2=vancanh1=vancanh2=vanduoi=1; 
.................... vancanh1=vancanh2=0; 
.................... vantay1=vantay2=0; 
.................... En2=0; 
.................... qei_set_count(0); 
....................  
.................... while( En2< 235) dc2n(500);   
.................... resetdc2(); 
.................... while (En2> 235) dc2t(250); 
.................... resetdc2(); 
....................  
.................... while( qei_get_count() < 280) dc1n(500);   
.................... resetdc1(); 
.................... while (qei_get_count() > 280) dc1t(250); 
.................... resetdc1(); 
....................  
.................... while (ctsel==1) {} 
....................  
.................... vantay2=1; beep(1,100);  
....................  
.................... while (cten==1) {} 
....................  
.................... while( En2< 270) dc2n(370);  
....................  
.................... while (ctt1==1) { dc2n(600); } 
.................... vantay1=0;  
.................... resetdc2(); 
.................... delay_ms(200); 
.................... if (ctt1==1) { vantay1=0; }    
.................... while (ctt1==1) { dc2n(600); } 
.................... vantay1=0;  
.................... resetdc2(); 
.................... delay_ms(200); 
....................  
....................  
....................  
....................  
....................  
.................... } 
....................  
....................  
.................... */ 
....................  
....................  
.................... #include <nhiemvu3x.c> 
....................  
.................... ///// NHIEM VU 3X 
....................  
.................... int8 inv3x=0; 
.................... void nhiemvu3x() 
.................... { 
.................... delay_ms(1000); 
1212:  MOVLW  04
1214:  MOVWF  x65
1216:  CLRF   19
1218:  BTFSC  FF2.7
121A:  BSF    19.7
121C:  BCF    FF2.7
121E:  MOVLW  FA
1220:  MOVWF  x6F
1222:  RCALL  0ADA
1224:  BTFSC  19.7
1226:  BSF    FF2.7
1228:  DECFSZ x65,F
122A:  BRA    1216
122C:  CLRF   19
122E:  BTFSC  FF2.7
1230:  BSF    19.7
1232:  BCF    FF2.7
.................... beep(3,100); 
1234:  MOVLW  03
1236:  MOVWF  x6B
1238:  MOVLW  64
123A:  MOVWF  x6C
123C:  RCALL  0B00
123E:  BTFSC  19.7
1240:  BSF    FF2.7
.................... setup_timer_2(T2_DIV_BY_4,250,1);      //401 us overflow, 401 us interrupt 
1242:  MOVLW  00
1244:  IORLW  05
1246:  MOVWF  FCA
1248:  MOVLW  FA
124A:  MOVWF  FCB
.................... setup_ccp1 (ccp_pwm); 
124C:  BCF    F8B.2
124E:  MOVLW  0C
1250:  MOVWF  FBD
.................... setup_ccp2 (ccp_pwm); 
1252:  BCF    F8B.1
1254:  MOVWF  FBA
....................  
.................... vantay1=vantay2=vancanh1=vancanh2=vanduoi=1; 
1256:  BSF    F80.2
1258:  BSF    F80.0
125A:  BSF    F80.1
125C:  BSF    F84.0
125E:  BSF    F80.5
.................... vancanh2=0; 
1260:  BCF    F80.0
.................... vancanh1=0; 
1262:  BCF    F80.1
....................  
.................... chonpid=2; 
1264:  MOVLW  02
1266:  MOVWF  x60
.................... setvt2=235; 
1268:  CLRF   55
126A:  MOVLW  EB
126C:  MOVWF  54
.................... enable_interrupts(int_timer1); 
126E:  BSF    F9D.0
.................... while (En2<235) {} 
1270:  BTFSC  21.7
1272:  BRA    127E
1274:  MOVF   21,F
1276:  BNZ   1280
1278:  MOVF   20,W
127A:  SUBLW  EA
127C:  BTFSC  FD8.0
127E:  BRA    1270
....................  
.................... chonpid=1; 
1280:  MOVLW  01
1282:  MOVWF  x60
.................... setvt1=280; 
1284:  MOVWF  53
1286:  MOVLW  18
1288:  MOVWF  52
.................... while (qei_get_count() <280) {} 
128A:  MOVFF  F67,01
128E:  MOVFF  F66,00
1292:  MOVFF  F67,03
1296:  MOVF   03,W
1298:  SUBWF  01,W
129A:  BZ    12A0
129C:  MOVFF  F66,00
12A0:  MOVF   00,W
12A2:  MOVWF  x65
12A4:  MOVFF  03,66
12A8:  MOVF   x66,W
12AA:  SUBLW  01
12AC:  BNC   12B8
12AE:  BNZ   12B6
12B0:  MOVF   x65,W
12B2:  SUBLW  17
12B4:  BNC   12B8
12B6:  BRA    128A
....................  
.................... vantay1=vantay2=0; 
12B8:  BCF    F84.0
12BA:  BCF    F80.5
....................  
.................... while (ctsel==1) {} 
12BC:  BTFSC  F81.7
12BE:  BRA    12BC
....................  
.................... vantay2=1; beep(1,100);  
12C0:  BSF    F84.0
12C2:  CLRF   19
12C4:  BTFSC  FF2.7
12C6:  BSF    19.7
12C8:  BCF    FF2.7
12CA:  MOVLW  01
12CC:  MOVWF  x6B
12CE:  MOVLW  64
12D0:  MOVWF  x6C
12D2:  RCALL  0B00
12D4:  BTFSC  19.7
12D6:  BSF    FF2.7
....................  
.................... while (cten==1) {} 
12D8:  BTFSC  F81.6
12DA:  BRA    12D8
.................... /* 
.................... chonpid=2;  
.................... setvt2=300; 
.................... while (En2 <260) {}; 
.................... */ 
.................... chonpid=0; 
12DC:  CLRF   x60
.................... dc2n(600); 
12DE:  MOVLW  02
12E0:  MOVWF  x66
12E2:  MOVLW  58
12E4:  MOVWF  x65
12E6:  RCALL  0E28
.................... for ( inv3x=0; inv3x < 6 ; inv3x++) 
12E8:  CLRF   x63
12EA:  MOVF   x63,W
12EC:  SUBLW  05
12EE:  BNC   135C
.................... { 
.................... while (ctt1==1) {dc2n(600);} ///*if ( En2>285 ) {resetdc2(); beep(10,100);}*/} 
12F0:  BTFSS  F81.2
12F2:  BRA    1300
12F4:  MOVLW  02
12F6:  MOVWF  x66
12F8:  MOVLW  58
12FA:  MOVWF  x65
12FC:  RCALL  0E28
12FE:  BRA    12F0
.................... if (ctt1==0) {vantay1=1; resetdc2(); } 
1300:  BTFSC  F81.2
1302:  BRA    130A
1304:  BSF    F80.5
1306:  CALL   01C6
130A:  CLRF   19
130C:  BTFSC  FF2.7
130E:  BSF    19.7
1310:  BCF    FF2.7
.................... delay_ms(100); 
1312:  MOVLW  64
1314:  MOVWF  x6F
1316:  CALL   0ADA
131A:  BTFSC  19.7
131C:  BSF    FF2.7
.................... if (ctt1==1) {vantay1=0; dc2t(300); delay_ms(400);resetdc2(); dc2n(600); } 
131E:  BTFSS  F81.2
1320:  BRA    1358
1322:  BCF    F80.5
1324:  MOVLW  01
1326:  MOVWF  x66
1328:  MOVLW  2C
132A:  MOVWF  x65
132C:  RCALL  0C2E
132E:  MOVLW  02
1330:  MOVWF  x65
1332:  CLRF   19
1334:  BTFSC  FF2.7
1336:  BSF    19.7
1338:  BCF    FF2.7
133A:  MOVLW  C8
133C:  MOVWF  x6F
133E:  CALL   0ADA
1342:  BTFSC  19.7
1344:  BSF    FF2.7
1346:  DECFSZ x65,F
1348:  BRA    1332
134A:  CALL   01C6
134E:  MOVLW  02
1350:  MOVWF  x66
1352:  MOVLW  58
1354:  MOVWF  x65
1356:  RCALL  0E28
1358:  INCF   x63,F
135A:  BRA    12EA
.................... } 
.................... vantay1=1; resetdc2(); 
135C:  BSF    F80.5
135E:  CALL   01C6
....................  
.................... delay_ms(1000); 
1362:  MOVLW  04
1364:  MOVWF  x65
1366:  CLRF   19
1368:  BTFSC  FF2.7
136A:  BSF    19.7
136C:  BCF    FF2.7
136E:  MOVLW  FA
1370:  MOVWF  x6F
1372:  CALL   0ADA
1376:  BTFSC  19.7
1378:  BSF    FF2.7
137A:  DECFSZ x65,F
137C:  BRA    1366
.................... vantay2=0; 
137E:  BCF    F84.0
.................... chonpid=1; 
1380:  MOVLW  01
1382:  MOVWF  x60
.................... setvt1=0; 
1384:  CLRF   53
1386:  CLRF   52
.................... enable_interrupts(int_timer1); 
1388:  BSF    F9D.0
.................... while ( qei_get_count() >220) {} 
138A:  MOVFF  F67,01
138E:  MOVFF  F66,00
1392:  MOVFF  F67,03
1396:  MOVF   03,W
1398:  SUBWF  01,W
139A:  BZ    13A0
139C:  MOVFF  F66,00
13A0:  MOVF   00,W
13A2:  MOVWF  x65
13A4:  MOVFF  03,66
13A8:  MOVF   x66,F
13AA:  BNZ   13B2
13AC:  MOVF   x65,W
13AE:  SUBLW  DC
13B0:  BC    13B4
13B2:  BRA    138A
....................  
.................... setvt1=10; 
13B4:  CLRF   53
13B6:  MOVLW  0A
13B8:  MOVWF  52
.................... setvt2=0; 
13BA:  CLRF   55
13BC:  CLRF   54
.................... chonpid=3; 
13BE:  MOVLW  03
13C0:  MOVWF  x60
.................... while ( qei_get_count() >10) {} 
13C2:  MOVFF  F67,01
13C6:  MOVFF  F66,00
13CA:  MOVFF  F67,03
13CE:  MOVF   03,W
13D0:  SUBWF  01,W
13D2:  BZ    13D8
13D4:  MOVFF  F66,00
13D8:  MOVF   00,W
13DA:  MOVWF  x65
13DC:  MOVFF  03,66
13E0:  MOVF   x66,F
13E2:  BNZ   13EA
13E4:  MOVF   x65,W
13E6:  SUBLW  0A
13E8:  BC    13EC
13EA:  BRA    13C2
.................... chonpid=0; 
13EC:  CLRF   x60
13EE:  CLRF   19
13F0:  BTFSC  FF2.7
13F2:  BSF    19.7
13F4:  BCF    FF2.7
.................... delay_ms(100); 
13F6:  MOVLW  64
13F8:  MOVWF  x6F
13FA:  CALL   0ADA
13FE:  BTFSC  19.7
1400:  BSF    FF2.7
.................... dc1t(500); 
1402:  MOVLW  01
1404:  MOVWF  x66
1406:  MOVLW  F4
1408:  MOVWF  x65
140A:  CALL   0BEC
.................... for (inv3x=0; inv3x <6; inv3x++) 
140E:  CLRF   x63
1410:  MOVF   x63,W
1412:  SUBLW  05
1414:  BNC   1486
....................    { 
....................    while (ctt2==1) {dc1t(500);} ///* if ( qei_get_count() <-5 ) {resetdc1(); beep(10,100);} */} 
1416:  BTFSS  F81.0
1418:  BRA    1428
141A:  MOVLW  01
141C:  MOVWF  x66
141E:  MOVLW  F4
1420:  MOVWF  x65
1422:  CALL   0BEC
1426:  BRA    1416
....................    if (ctt2==0) {vantay2=1;resetdc1(); } 
1428:  BTFSC  F81.0
142A:  BRA    1432
142C:  BSF    F84.0
142E:  CALL   01A8
1432:  CLRF   19
1434:  BTFSC  FF2.7
1436:  BSF    19.7
1438:  BCF    FF2.7
....................    delay_ms(100); 
143A:  MOVLW  64
143C:  MOVWF  x6F
143E:  CALL   0ADA
1442:  BTFSC  19.7
1444:  BSF    FF2.7
....................    if (ctt2==1) {vantay2=0; dc1n(300); delay_ms(400);resetdc1(); dc1t(600); } 
1446:  BTFSS  F81.0
1448:  BRA    1482
144A:  BCF    F84.0
144C:  MOVLW  01
144E:  MOVWF  x66
1450:  MOVLW  2C
1452:  MOVWF  x65
1454:  RCALL  0DE6
1456:  MOVLW  02
1458:  MOVWF  x65
145A:  CLRF   19
145C:  BTFSC  FF2.7
145E:  BSF    19.7
1460:  BCF    FF2.7
1462:  MOVLW  C8
1464:  MOVWF  x6F
1466:  CALL   0ADA
146A:  BTFSC  19.7
146C:  BSF    FF2.7
146E:  DECFSZ x65,F
1470:  BRA    145A
1472:  CALL   01A8
1476:  MOVLW  02
1478:  MOVWF  x66
147A:  MOVLW  58
147C:  MOVWF  x65
147E:  CALL   0BEC
1482:  INCF   x63,F
1484:  BRA    1410
....................    } 
.................... vantay2=1;resetdc1();  
1486:  BSF    F84.0
1488:  CALL   01A8
....................  
....................  
.................... delay_ms(1000); 
148C:  MOVLW  04
148E:  MOVWF  x65
1490:  CLRF   19
1492:  BTFSC  FF2.7
1494:  BSF    19.7
1496:  BCF    FF2.7
1498:  MOVLW  FA
149A:  MOVWF  x6F
149C:  CALL   0ADA
14A0:  BTFSC  19.7
14A2:  BSF    FF2.7
14A4:  DECFSZ x65,F
14A6:  BRA    1490
.................... vantay1=0; 
14A8:  BCF    F80.5
.................... chonpid=2; 
14AA:  MOVLW  02
14AC:  MOVWF  x60
.................... setvt2=120; 
14AE:  CLRF   55
14B0:  MOVLW  78
14B2:  MOVWF  54
.................... enable_interrupts(int_timer1); 
14B4:  BSF    F9D.0
.................... while (En2 < 50) {} 
14B6:  BTFSC  21.7
14B8:  BRA    14C4
14BA:  MOVF   21,F
14BC:  BNZ   14C6
14BE:  MOVF   20,W
14C0:  SUBLW  31
14C2:  BTFSC  FD8.0
14C4:  BRA    14B6
....................  
.................... setvt1=280; 
14C6:  MOVLW  01
14C8:  MOVWF  53
14CA:  MOVLW  18
14CC:  MOVWF  52
.................... setvt2=270; 
14CE:  MOVLW  01
14D0:  MOVWF  55
14D2:  MOVLW  0E
14D4:  MOVWF  54
.................... chonpid=3; 
14D6:  MOVLW  03
14D8:  MOVWF  x60
.................... while (En2<270) {} 
14DA:  BTFSC  21.7
14DC:  BRA    14EC
14DE:  MOVF   21,W
14E0:  SUBLW  01
14E2:  BNC   14EE
14E4:  BNZ   14EC
14E6:  MOVF   20,W
14E8:  SUBLW  0D
14EA:  BTFSC  FD8.0
14EC:  BRA    14DA
.................... chonpid=0; 
14EE:  CLRF   x60
....................  
.................... dc2n(600); 
14F0:  MOVLW  02
14F2:  MOVWF  x66
14F4:  MOVLW  58
14F6:  MOVWF  x65
14F8:  RCALL  0E28
.................... for ( inv3x=0; inv3x < 6 ; inv3x++) 
14FA:  CLRF   x63
14FC:  MOVF   x63,W
14FE:  SUBLW  05
1500:  BNC   1570
.................... { 
.................... while (ctt1==1) {dc2n(600);} ///*if ( En2>285 ) {resetdc2(); beep(10,100);}*/ } 
1502:  BTFSS  F81.2
1504:  BRA    1512
1506:  MOVLW  02
1508:  MOVWF  x66
150A:  MOVLW  58
150C:  MOVWF  x65
150E:  RCALL  0E28
1510:  BRA    1502
.................... if (ctt1==0) {vantay1=1; resetdc2(); } 
1512:  BTFSC  F81.2
1514:  BRA    151C
1516:  BSF    F80.5
1518:  CALL   01C6
151C:  CLRF   19
151E:  BTFSC  FF2.7
1520:  BSF    19.7
1522:  BCF    FF2.7
.................... delay_ms(100); 
1524:  MOVLW  64
1526:  MOVWF  x6F
1528:  CALL   0ADA
152C:  BTFSC  19.7
152E:  BSF    FF2.7
.................... if (ctt1==1) {vantay1=0; dc2t(300); delay_ms(400);resetdc2(); dc2n(600); } 
1530:  BTFSS  F81.2
1532:  BRA    156C
1534:  BCF    F80.5
1536:  MOVLW  01
1538:  MOVWF  x66
153A:  MOVLW  2C
153C:  MOVWF  x65
153E:  CALL   0C2E
1542:  MOVLW  02
1544:  MOVWF  x65
1546:  CLRF   19
1548:  BTFSC  FF2.7
154A:  BSF    19.7
154C:  BCF    FF2.7
154E:  MOVLW  C8
1550:  MOVWF  x6F
1552:  CALL   0ADA
1556:  BTFSC  19.7
1558:  BSF    FF2.7
155A:  DECFSZ x65,F
155C:  BRA    1546
155E:  CALL   01C6
1562:  MOVLW  02
1564:  MOVWF  x66
1566:  MOVLW  58
1568:  MOVWF  x65
156A:  RCALL  0E28
156C:  INCF   x63,F
156E:  BRA    14FC
.................... } 
.................... vantay1=1; resetdc2(); 
1570:  BSF    F80.5
1572:  CALL   01C6
....................  
....................  
.................... delay_ms(1000); 
1576:  MOVLW  04
1578:  MOVWF  x65
157A:  CLRF   19
157C:  BTFSC  FF2.7
157E:  BSF    19.7
1580:  BCF    FF2.7
1582:  MOVLW  FA
1584:  MOVWF  x6F
1586:  CALL   0ADA
158A:  BTFSC  19.7
158C:  BSF    FF2.7
158E:  DECFSZ x65,F
1590:  BRA    157A
.................... vantay2=0; 
1592:  BCF    F84.0
.................... chonpid=1; 
1594:  MOVLW  01
1596:  MOVWF  x60
.................... setvt1=0; 
1598:  CLRF   53
159A:  CLRF   52
.................... enable_interrupts(int_timer1); 
159C:  BSF    F9D.0
....................  
.................... vancanh1=1; 
159E:  BSF    F80.1
.................... while ( qei_get_count() > 240) {} 
15A0:  MOVFF  F67,01
15A4:  MOVFF  F66,00
15A8:  MOVFF  F67,03
15AC:  MOVF   03,W
15AE:  SUBWF  01,W
15B0:  BZ    15B6
15B2:  MOVFF  F66,00
15B6:  MOVF   00,W
15B8:  MOVWF  x65
15BA:  MOVFF  03,66
15BE:  MOVF   x66,F
15C0:  BNZ   15C8
15C2:  MOVF   x65,W
15C4:  SUBLW  F0
15C6:  BC    15CA
15C8:  BRA    15A0
.................... chonpid=0; 
15CA:  CLRF   x60
.................... vancanh1=0; 
15CC:  BCF    F80.1
.................... while (cten==1) {} 
15CE:  BTFSC  F81.6
15D0:  BRA    15CE
....................  
.................... while (ctsel==1) {} 
15D2:  BTFSC  F81.7
15D4:  BRA    15D2
....................  
.................... vantay1=0; delay_ms(500);  
15D6:  BCF    F80.5
15D8:  MOVLW  02
15DA:  MOVWF  x65
15DC:  CLRF   19
15DE:  BTFSC  FF2.7
15E0:  BSF    19.7
15E2:  BCF    FF2.7
15E4:  MOVLW  FA
15E6:  MOVWF  x6F
15E8:  CALL   0ADA
15EC:  BTFSC  19.7
15EE:  BSF    FF2.7
15F0:  DECFSZ x65,F
15F2:  BRA    15DC
....................  
.................... while (ctsel==1) {} 
15F4:  BTFSC  F81.7
15F6:  BRA    15F4
....................  
.................... resetvan(); 
15F8:  CALL   0C70
....................  
.................... demct=200; 
15FC:  MOVLW  C8
15FE:  MOVWF  5A
.................... enable_interrupts(int_timer5); 
1600:  BSF    FA3.0
1602:  GOTO   18D8 (RETURN)
....................  
.................... } 
....................  
.................... #include <nhiemvu4.c> 
....................  
.................... ///// NHIEM VU 4 
....................  
....................  
.................... void nhiemvu4() 
.................... { 
....................  
.................... int8 inv4; 
.................... delay_ms(1000); 
1606:  MOVLW  04
1608:  MOVWF  x66
160A:  CLRF   19
160C:  BTFSC  FF2.7
160E:  BSF    19.7
1610:  BCF    FF2.7
1612:  MOVLW  FA
1614:  MOVWF  x6F
1616:  CALL   0ADA
161A:  BTFSC  19.7
161C:  BSF    FF2.7
161E:  DECFSZ x66,F
1620:  BRA    160A
1622:  CLRF   19
1624:  BTFSC  FF2.7
1626:  BSF    19.7
1628:  BCF    FF2.7
.................... beep(4,100); 
162A:  MOVLW  04
162C:  MOVWF  x6B
162E:  MOVLW  64
1630:  MOVWF  x6C
1632:  CALL   0B00
1636:  BTFSC  19.7
1638:  BSF    FF2.7
....................  
.................... trispwm3=trisdir3=0; 
163A:  BCF    F95.5
163C:  BCF    F95.6
.................... pwm3=dir3=1; 
163E:  BSF    F83.5
1640:  BSF    F83.6
.................... while (cten==1) {} 
1642:  BTFSC  F81.6
1644:  BRA    1642
1646:  CLRF   19
1648:  BTFSC  FF2.7
164A:  BSF    19.7
164C:  BCF    FF2.7
.................... delay_ms(100); 
164E:  MOVLW  64
1650:  MOVWF  x6F
1652:  CALL   0ADA
1656:  BTFSC  19.7
1658:  BSF    FF2.7
....................  
.................... dclep=1; 
165A:  BSF    5D.0
.................... enable_interrupts(int_timer0); 
165C:  BSF    FF2.5
.................... vanduoi=0;    
165E:  BCF    F80.2
.................... while (ctld==1) 
1660:  BTFSS  F81.4
1662:  BRA    166C
....................    { 
....................    dir3=0; 
1664:  BCF    F83.5
....................    xungleo=80; 
1666:  MOVLW  50
1668:  MOVWF  5C
166A:  BRA    1660
....................     
....................    }  
.................... dir3=1; 
166C:  BSF    F83.5
.................... xungleo=0; 
166E:  CLRF   5C
1670:  CLRF   19
1672:  BTFSC  FF2.7
1674:  BSF    19.7
1676:  BCF    FF2.7
.................... beep(1,100); 
1678:  MOVLW  01
167A:  MOVWF  x6B
167C:  MOVLW  64
167E:  MOVWF  x6C
1680:  CALL   0B00
1684:  BTFSC  19.7
1686:  BSF    FF2.7
....................  
.................... for (inv4=0; inv4 < 3; inv4++)    /// 4 lan la ok 
1688:  CLRF   x65
168A:  MOVF   x65,W
168C:  SUBLW  02
168E:  BNC   16E4
....................  { 
....................    while (ctlt==1) 
1690:  BTFSS  F81.5
1692:  BRA    169C
....................       { 
....................       dir3=1; 
1694:  BSF    F83.5
....................       xungleo=80; 
1696:  MOVLW  50
1698:  MOVWF  5C
169A:  BRA    1690
....................       } 
....................    dir3=0;    
169C:  BCF    F83.5
....................    xungleo=0; 
169E:  CLRF   5C
16A0:  CLRF   19
16A2:  BTFSC  FF2.7
16A4:  BSF    19.7
16A6:  BCF    FF2.7
....................    beep(1,100); 
16A8:  MOVLW  01
16AA:  MOVWF  x6B
16AC:  MOVLW  64
16AE:  MOVWF  x6C
16B0:  CALL   0B00
16B4:  BTFSC  19.7
16B6:  BSF    FF2.7
....................  
....................    while (ctld==1) 
16B8:  BTFSS  F81.4
16BA:  BRA    16C4
....................       { 
....................       dir3=0; 
16BC:  BCF    F83.5
....................       xungleo=85; 
16BE:  MOVLW  55
16C0:  MOVWF  5C
16C2:  BRA    16B8
....................       } 
....................    dir3=1;    
16C4:  BSF    F83.5
....................    xungleo=0; 
16C6:  CLRF   5C
16C8:  CLRF   19
16CA:  BTFSC  FF2.7
16CC:  BSF    19.7
16CE:  BCF    FF2.7
....................    beep(1,100); 
16D0:  MOVLW  01
16D2:  MOVWF  x6B
16D4:  MOVLW  64
16D6:  MOVWF  x6C
16D8:  CALL   0B00
16DC:  BTFSC  19.7
16DE:  BSF    FF2.7
16E0:  INCF   x65,F
16E2:  BRA    168A
....................  } 
....................   
....................  //delay_ms(1000); 
....................  /////////////////////delay nga robot 
....................  while (ctlt==1) 
16E4:  BTFSS  F81.5
16E6:  BRA    16F0
....................       { 
....................       dir3=1; 
16E8:  BSF    F83.5
....................       xungleo=80; 
16EA:  MOVLW  50
16EC:  MOVWF  5C
16EE:  BRA    16E4
....................       } 
....................    dir3=0;    
16F0:  BCF    F83.5
....................    xungleo=0; 
16F2:  CLRF   5C
16F4:  CLRF   19
16F6:  BTFSC  FF2.7
16F8:  BSF    19.7
16FA:  BCF    FF2.7
....................    beep(1,100); 
16FC:  MOVLW  01
16FE:  MOVWF  x6B
1700:  MOVLW  64
1702:  MOVWF  x6C
1704:  CALL   0B00
1708:  BTFSC  19.7
170A:  BSF    FF2.7
....................  
....................    while (ctld==1) 
170C:  BTFSS  F81.4
170E:  BRA    1718
....................       { 
....................       dir3=0; 
1710:  BCF    F83.5
....................       xungleo=85; 
1712:  MOVLW  55
1714:  MOVWF  5C
1716:  BRA    170C
....................       } 
....................    dir3=1;    
1718:  BSF    F83.5
....................    xungleo=0; 
171A:  CLRF   5C
171C:  CLRF   19
171E:  BTFSC  FF2.7
1720:  BSF    19.7
1722:  BCF    FF2.7
....................    beep(1,100); 
1724:  MOVLW  01
1726:  MOVWF  x6B
1728:  MOVLW  64
172A:  MOVWF  x6C
172C:  CALL   0B00
1730:  BTFSC  19.7
1732:  BSF    FF2.7
....................   
....................   
....................  
.................... while (ctlt==1) 
1734:  BTFSS  F81.5
1736:  BRA    1740
....................       { 
....................       dir3=1; 
1738:  BSF    F83.5
....................       xungleo=80; 
173A:  MOVLW  50
173C:  MOVWF  5C
173E:  BRA    1734
....................       } 
....................    dir3=0;    
1740:  BCF    F83.5
....................    xungleo=0; 
1742:  CLRF   5C
1744:  CLRF   19
1746:  BTFSC  FF2.7
1748:  BSF    19.7
174A:  BCF    FF2.7
....................    beep(1,100); 
174C:  MOVLW  01
174E:  MOVWF  x6B
1750:  MOVLW  64
1752:  MOVWF  x6C
1754:  CALL   0B00
1758:  BTFSC  19.7
175A:  BSF    FF2.7
....................     
.................... while (ctlt==0) 
175C:  BTFSC  F81.5
175E:  BRA    1768
....................    { 
....................    dir3=0;  
1760:  BCF    F83.5
....................    xungleo=60; 
1762:  MOVLW  3C
1764:  MOVWF  5C
1766:  BRA    175C
....................    } 
....................    xungleo=0; 
1768:  CLRF   5C
176A:  CLRF   19
176C:  BTFSC  FF2.7
176E:  BSF    19.7
1770:  BCF    FF2.7
....................    beep(1,100); 
1772:  MOVLW  01
1774:  MOVWF  x6B
1776:  MOVLW  64
1778:  MOVWF  x6C
177A:  CALL   0B00
177E:  BTFSC  19.7
1780:  BSF    FF2.7
....................   
.................... vanduoi=1; 
1782:  BSF    F80.2
.................... pwm3=1; 
1784:  BSF    F83.6
.................... dir3=1; 
1786:  BSF    F83.5
.................... dclep=0; 
1788:  BCF    5D.0
.................... xungleo=10; 
178A:  MOVLW  0A
178C:  MOVWF  5C
.................... while (cten==1) { } 
178E:  BTFSC  F81.6
1790:  BRA    178E
.................... disable_interrupts(int_timer0); 
1792:  BCF    FF2.5
....................  
.................... demct=200; 
1794:  MOVLW  C8
1796:  MOVWF  5A
.................... enable_interrupts(int_timer5); 
1798:  BSF    FA3.0
179A:  GOTO   18FE (RETURN)
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... ///// MAIN ///// 
.................... int8 i=0; 
....................  
.................... void main() 
179E:  CLRF   FF8
17A0:  BCF    FD0.7
17A2:  BSF    07.7
17A4:  CLRF   25
17A6:  CLRF   24
17A8:  CLRF   23
17AA:  MOVLW  80
17AC:  MOVWF  22
17AE:  MOVLW  CD
17B0:  MOVWF  29
17B2:  MOVLW  CC
17B4:  MOVWF  28
17B6:  MOVLW  4C
17B8:  MOVWF  27
17BA:  MOVLW  7C
17BC:  MOVWF  26
17BE:  MOVLW  33
17C0:  MOVWF  2D
17C2:  MOVWF  2C
17C4:  MOVWF  2B
17C6:  MOVLW  7E
17C8:  MOVWF  2A
17CA:  CLRF   39
17CC:  CLRF   38
17CE:  CLRF   3B
17D0:  CLRF   3A
17D2:  CLRF   3D
17D4:  CLRF   3C
17D6:  CLRF   3F
17D8:  CLRF   3E
17DA:  CLRF   45
17DC:  CLRF   44
17DE:  CLRF   47
17E0:  CLRF   46
17E2:  CLRF   49
17E4:  CLRF   48
17E6:  CLRF   4B
17E8:  CLRF   4A
17EA:  MOVLW  03
17EC:  MOVWF  57
17EE:  MOVLW  84
17F0:  MOVWF  56
17F2:  MOVLW  03
17F4:  MOVWF  59
17F6:  MOVLW  84
17F8:  MOVWF  58
17FA:  CLRF   5A
17FC:  CLRF   5B
17FE:  MOVLW  64
1800:  MOVWF  5C
1802:  BCF    5D.0
1804:  CLRF   5F
1806:  CLRF   5E
1808:  MOVLW  04
180A:  MOVWF  x60
180C:  CLRF   x61
180E:  CLRF   x62
1810:  CLRF   x63
1812:  CLRF   x64
1814:  BCF    FB9.0
1816:  BCF    FC1.6
1818:  BCF    FC1.7
181A:  MOVLW  00
181C:  MOVWF  FB8
181E:  CLRF   1A
1820:  CLRF   1B
.................... { 
....................     
....................    khoidong();  
1822:  GOTO   0B7E
....................     
....................    En2=0; 
1826:  CLRF   21
1828:  CLRF   20
....................    Ti1=0; 
182A:  CLRF   4F
182C:  CLRF   4E
....................    Ti2=0; 
182E:  CLRF   51
1830:  CLRF   50
....................    setvt1=0; 
1832:  CLRF   53
1834:  CLRF   52
....................    setvt2=0; 
1836:  CLRF   55
1838:  CLRF   54
183A:  CLRF   19
183C:  BTFSC  FF2.7
183E:  BSF    19.7
1840:  BCF    FF2.7
....................    beep(2,100);  
1842:  MOVLW  02
1844:  MOVWF  x6B
1846:  MOVLW  64
1848:  MOVWF  x6C
184A:  CALL   0B00
184E:  BTFSC  19.7
1850:  BSF    FF2.7
....................  
.................... while(true) 
....................    { 
....................     
....................    if (ctsel==0)  
1852:  BTFSC  F81.7
1854:  BRA    1876
....................       { 
....................       enable_interrupts(int_timer5); 
1856:  BSF    FA3.0
....................       demct=0; i=1; delay_ms(10);  
1858:  CLRF   5A
185A:  MOVLW  01
185C:  MOVWF  x64
185E:  CLRF   19
1860:  BTFSC  FF2.7
1862:  BSF    19.7
1864:  BCF    FF2.7
1866:  MOVLW  0A
1868:  MOVWF  x6F
186A:  CALL   0ADA
186E:  BTFSC  19.7
1870:  BSF    FF2.7
....................       while (ctsel==0) {} 
1872:  BTFSS  F81.7
1874:  BRA    1872
....................       } 
....................        
....................    while (i==1)  
1876:  DECFSZ x64,W
1878:  BRA    1900
....................       { 
....................       if ( demct<50 ) {disable_interrupts(int_timer5); i=0; demct=0;  resetvan(); } 
187A:  MOVF   5A,W
187C:  SUBLW  31
187E:  BNC   188A
1880:  BCF    FA3.0
1882:  CLRF   x64
1884:  CLRF   5A
1886:  CALL   0C70
....................       if ((50<demct)&(demct<100)) {disable_interrupts(int_timer5); i=0; demct=0; nhiemvu3(); }  
188A:  MOVF   5A,W
188C:  SUBLW  32
188E:  BNC   1894
1890:  MOVLW  00
1892:  BRA    1896
1894:  MOVLW  01
1896:  MOVWF  x65
1898:  MOVF   5A,W
189A:  SUBLW  63
189C:  BC    18A2
189E:  MOVLW  00
18A0:  BRA    18A4
18A2:  MOVLW  01
18A4:  ANDWF  x65,W
18A6:  BZ    18B2
18A8:  BCF    FA3.0
18AA:  CLRF   x64
18AC:  CLRF   5A
18AE:  GOTO   0E6A
....................       if ((100<demct)&(demct<150)) {disable_interrupts(int_timer5); i=0; demct=0; nhiemvu3x(); } 
18B2:  MOVF   5A,W
18B4:  SUBLW  64
18B6:  BNC   18BC
18B8:  MOVLW  00
18BA:  BRA    18BE
18BC:  MOVLW  01
18BE:  MOVWF  x65
18C0:  MOVF   5A,W
18C2:  SUBLW  95
18C4:  BC    18CA
18C6:  MOVLW  00
18C8:  BRA    18CC
18CA:  MOVLW  01
18CC:  ANDWF  x65,W
18CE:  BZ    18D8
18D0:  BCF    FA3.0
18D2:  CLRF   x64
18D4:  CLRF   5A
18D6:  BRA    1212
....................       if ((150<demct)&(demct<200)) {disable_interrupts(int_timer5); i=0; demct=0; nhiemvu4(); } 
18D8:  MOVF   5A,W
18DA:  SUBLW  96
18DC:  BNC   18E2
18DE:  MOVLW  00
18E0:  BRA    18E4
18E2:  MOVLW  01
18E4:  MOVWF  x65
18E6:  MOVF   5A,W
18E8:  SUBLW  C7
18EA:  BC    18F0
18EC:  MOVLW  00
18EE:  BRA    18F2
18F0:  MOVLW  01
18F2:  ANDWF  x65,W
18F4:  BZ    18FE
18F6:  BCF    FA3.0
18F8:  CLRF   x64
18FA:  CLRF   5A
18FC:  BRA    1606
18FE:  BRA    1876
....................       } 
1900:  BRA    1852
....................      
....................    } 
....................     
.................... } 
1902:  SLEEP 

Configuration Fuses:
   Word  1: C200   HS FCMEN IESO
   Word  2: 3E0C   PUT NOBROWNOUT BORV20 NOWDT WDT32768 NOWINEN
   Word  3: 9D3C   NOPWMPIN LPOL_HIGH HPOL_HIGH T1LOWPOWER FLTAC1 SSP_RC PWM4B5 EXCLKC3 MCLR
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
